#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ü–µ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""

import os
import json
import sys
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from regex_parser import RegexParser
from ai_fallback import AIFallbackParser, HybridParser

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
ROOT_DIR = Path(__file__).resolve().parents[2]
load_dotenv(ROOT_DIR / '.env.local', override=False)

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
regex_parser = RegexParser()

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
products = [
    {"name": "–¶–µ–º–µ–Ω—Ç 50–∫–≥", "price": 300.0, "unit": "–º–µ—à"},
    {"name": "OSB-3 2500x1250x12 –º–º", "price": 919.0, "unit": "—à—Ç"},
    {"name": "–ö–∏—Ä–ø–∏—á –ø–æ–ª–Ω–æ—Ç–µ–ª—ã–π –ú-150 (250x120x65)", "price": 13.0, "unit": "—à—Ç"},
]

# 1. –¢–æ–ª—å–∫–æ Regex –ø–∞—Ä—Å–µ—Ä
print("\n1. –¢–û–õ–¨–ö–û REGEX –ü–ê–†–°–ï–†")
print("-" * 50)
for product in products:
    result = regex_parser.parse_product(product["name"], product["price"], product["unit"])
    print(f"üì¶ {product['name']}")
    if result.parsing_method != 'no_parsing':
        print(f"  ‚úÖ {result.quantity} {result.metric_unit}, {result.price_per_unit:.2f} —Ä—É–±/{result.metric_unit}")
    else:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å regex –ø–∞—Ä—Å–µ—Ä–æ–º")
    print()

# 2. –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API –∫–ª—é—á)
api_key = os.getenv('OPENAI_API_KEY')
if api_key:
    print("\n2. –ì–ò–ë–†–ò–î–ù–´–ô –ü–ê–†–°–ï–†")
    print("-" * 50)
    
    ai_parser = AIFallbackParser(api_key=api_key)
    hybrid_parser = HybridParser(regex_parser, ai_parser)
    
    results = hybrid_parser.parse_batch(products)
    
    for i, (product, result) in enumerate(zip(products, results)):
        print(f"üì¶ {product['name']}")
        if result['parsing_method'] != 'no_parsing':
            print(f"  ‚úÖ {result['quantity']} {result['metric_unit']}, {result['price_per_unit']:.2f} —Ä—É–±/{result['metric_unit']}")
            print(f"  üìä –ú–µ—Ç–æ–¥: {result['parsing_method']}")
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = hybrid_parser.get_stats()
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_products']}")
    print(f"Regex —É—Å–ø–µ—à–Ω–æ: {stats['regex_success']} ({stats['regex_success_rate']:.1f}%)")
    print(f"AI fallback: {stats['ai_fallback']} ({stats['ai_fallback_rate']:.1f}%)")
    print(f"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_failed']} ({100 - stats['total_success_rate']:.1f}%)")
else:
    print("\n‚ö†Ô∏è –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ—Ç OPENAI_API_KEY")
    print("   –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY") 