#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ü–µ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""

import argparse
import json
import os
import time
from pathlib import Path
from typing import Dict, List, Optional

from regex_parser import RegexParser
from ai_parser import AIParser
from hybrid_parser import HybridParser
from price_enricher import PriceEnricher
from config import load_project_config, check_required_env_vars, print_env_status


def load_materials_from_file(file_path: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    path = Path(file_path)
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)


def analyze_results(results: List[Dict]) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    stats = {
        'total': len(results),
        'parsed': 0,
        'unparsed': 0,
        'by_unit': {},
        'by_method': {},
        'by_source': {
            'regex': 0,
            'ai': 0,
            'none': 0
        }
    }
    
    for result in results:
        if result.get('metric_unit'):
            stats['parsed'] += 1
            unit = result.get('metric_unit')
            stats['by_unit'][unit] = stats['by_unit'].get(unit, 0) + 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            method = result.get('parsing_method', '')
            if method == 'ai_fallback':
                stats['by_source']['ai'] += 1
            elif method != 'no_parsing':
                stats['by_source']['regex'] += 1
        else:
            stats['unparsed'] += 1
            stats['by_source']['none'] += 1
        
        method = result.get('parsing_method', '')
        stats['by_method'][method] = stats['by_method'].get(method, 0) + 1
    
    return stats


def format_result(result: Dict, index: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    name = result.get('original_name', '')[:50]
    
    if result.get('metric_unit'):
        return (f"‚úÖ {index:2d}. {name:<50} ‚Üí "
                f"{result.get('quantity', 0):>8.3f} {result.get('metric_unit', ''):<3} | "
                f"{result.get('price_per_unit', 0):>8.2f} ‚ÇΩ/{result.get('metric_unit', '')} | "
                f"{result.get('parsing_method', '')}")
    else:
        return (f"‚ùå {index:2d}. {name:<50} ‚Üí "
                f"{'–Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ':<20} | {result.get('parsing_method', '')}")


def print_statistics(stats: Dict, ai_stats: Optional[Dict] = None, processing_time: float = 0):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üéØ –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['parsed']}/{stats['total']} ({stats['parsed']/stats['total']*100:.1f}%)")
    print(f"‚ùå –ù–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {stats['unparsed']} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ({stats['unparsed']/stats['total']*100:.1f}%)")
    print()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    print("üîç –ò–°–¢–û–ß–ù–ò–ö–ò –ü–ê–†–°–ò–ù–ì–ê:")
    print(f"   RegEx: {stats['by_source']['regex']} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ({stats['by_source']['regex']/stats['total']*100:.1f}%)")
    print(f"   AI:    {stats['by_source']['ai']} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ({stats['by_source']['ai']/stats['total']*100:.1f}%)")
    print(f"   None:  {stats['by_source']['none']} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ({stats['by_source']['none']/stats['total']*100:.1f}%)")
    print()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º
    if stats['by_unit']:
        print("üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ï–î–ò–ù–ò–¶–ê–ú –ò–ó–ú–ï–†–ï–ù–ò–Ø:")
        for unit, count in sorted(stats['by_unit'].items()):
            print(f"   {unit:<3}: {count:>2} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ({count/stats['total']*100:.1f}%)")
        print()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Ç–æ–¥–∞–º
    print("üîß –ú–ï–¢–û–î–´ –ü–ê–†–°–ò–ù–ì–ê:")
    for method, count in sorted(stats['by_method'].items()):
        print(f"   {method:<25}: {count:>2} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
    if ai_stats:
        print("üí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø AI:")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ API: {ai_stats.get('total_requests', 0)}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {ai_stats.get('total_tokens', 0)}")
        total_cost = ai_stats.get('total_cost_rub', 0)
        print(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f}‚ÇΩ")
        print()


def print_detailed_results(results: List[Dict], show_failed: bool = True):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
    print("=" * 120)
    print(f"{'‚Ññ':<3} {'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':<50} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<20} {'–¶–µ–Ω–∞/–µ–¥–∏–Ω–∏—Ü—É':<15} {'–ú–µ—Ç–æ–¥'}")
    print("-" * 120)
    
    # –°–Ω–∞—á–∞–ª–∞ —É—Å–ø–µ—à–Ω—ã–µ
    success_results = [(i+1, r) for i, r in enumerate(results) if r.get('metric_unit')]
    for index, result in success_results:
        print(format_result(result, index))
    
    # –ü–æ—Ç–æ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ
    if show_failed:
        failed_results = [(i+1, r) for i, r in enumerate(results) if not r.get('metric_unit')]
        if failed_results:
            print("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –†–ê–°–ü–ê–†–°–ò–¢–¨:")
            for index, result in failed_results:
                print(format_result(result, index))


def save_results(results: List[Dict], stats: Dict, ai_stats: Optional[Dict], 
                 processing_time: float, output_file: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    output_data = {
        'metadata': {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'total_materials': stats['total'],
            'parsed_count': stats['parsed'],
            'success_rate': f"{stats['parsed']/stats['total']*100:.1f}%",
            'processing_time_seconds': round(processing_time, 2),
        },
        'statistics': stats,
        'results': results
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if ai_stats:
        output_data['metadata'].update({
            'ai_requests': ai_stats.get('total_requests', 0),
            'ai_tokens': ai_stats.get('total_tokens', 0),
            'ai_cost_rub': round(ai_stats.get('total_cost_rub', 0), 2)
        })
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)


def cmd_regex_only(args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ RegEx –ø–∞—Ä—Å–µ—Ä–æ–º"""
    print("üöÄ –û–ë–†–ê–ë–û–¢–ö–ê –¢–û–õ–¨–ö–û REGEX –ü–ê–†–°–ï–†–û–ú")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    materials = load_materials_from_file(args.input)
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = RegexParser()
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    results = []
    for material in materials:
        name = material.get('name', 'Unknown')
        price = float(material.get('price', 0))
        unit = material.get('unit', '—à—Ç')
        
        result = parser.parse_product(name, price, unit)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        result_dict = {
            'original_name': result.original_name,
            'original_price': result.original_price,
            'original_unit': result.original_unit,
            'metric_unit': result.metric_unit,
            'quantity': result.quantity,
            'price_per_unit': result.price_per_unit,
            'price_coefficient': result.price_coefficient,
            'parsing_method': result.parsing_method,
            'confidence': result.confidence
        }
        results.append(result_dict)
    
    processing_time = time.time() - start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    stats = analyze_results(results)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_statistics(stats, processing_time=processing_time)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.verbose:
        print_detailed_results(results, show_failed=not args.hide_failed)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output:
        save_results(results, stats, None, processing_time, args.output)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {args.output}")
    
    print("\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")


def cmd_hybrid(args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º (RegEx + AI)"""
    print("üöÄ –û–ë–†–ê–ë–û–¢–ö–ê –ì–ò–ë–†–ò–î–ù–´–ú –ü–ê–†–°–ï–†–û–ú (REGEX + AI)")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env.local —Ñ–∞–π–ª–∞
    load_project_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    env_status = check_required_env_vars()
    if env_status['missing_required']:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á OpenAI. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        print("   –ü—Ä–∏–º–µ—Ä: export OPENAI_API_KEY='your-api-key'")
        print("   –ò–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env.local —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OPENAI_API_KEY")
        return
    
    api_key = os.getenv('OPENAI_API_KEY')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    materials = load_materials_from_file(args.input)
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
    regex_parser = RegexParser()
    ai_parser = AIParser(api_key=api_key, cache_file=args.cache)
    hybrid_parser = HybridParser(regex_parser=regex_parser, ai_parser=ai_parser)
    hybrid_parser.batch_size = args.batch_size
    
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    results = hybrid_parser.parse_batch(materials)
    
    processing_time = time.time() - start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    stats = analyze_results(results)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
    ai_stats = ai_parser.get_stats()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_statistics(stats, ai_stats, processing_time)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.verbose:
        print_detailed_results(results, show_failed=not args.hide_failed)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output:
        save_results(results, stats, ai_stats, processing_time, args.output)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {args.output}")
    
    print("\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")


def cmd_enricher(args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ price_enricher —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏"""
    print("üöÄ –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–†–ï–ó PRICE ENRICHER –° –≠–ú–ë–ï–î–î–ò–ù–ì–ê–ú–ò")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    materials = load_materials_from_file(args.input)
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º enricher
    enricher = PriceEnricher(
        use_ai=not args.no_ai,
        batch_size=args.batch_size,
        cache_file=args.cache
    )
    
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    results = enricher.enrich_products(materials)
    
    processing_time = time.time() - start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    stats = analyze_results(results)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    hybrid_stats = enricher.hybrid_parser.get_stats()
    ai_stats = hybrid_stats.get('ai_stats')
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_statistics(stats, ai_stats, processing_time)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.verbose:
        print_detailed_results(results, show_failed=not args.hide_failed)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output:
        enricher.save_results(results, args.output)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {args.output}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if args.report:
        enricher.generate_report(results, args.report)
        print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {args.report}")
    
    print("\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description='–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ü–µ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –¢–æ–ª—å–∫–æ RegEx –ø–∞—Ä—Å–µ—Ä
  python main.py regex-only test_materials_image.json -o results_regex.json
  
  # –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (RegEx + AI)
  python main.py hybrid test_materials_image.json -o results_hybrid.json
  
  # –ü–æ–ª–Ω—ã–π enricher —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
  python main.py enricher test_materials_image.json -o results_enriched.json -r report.json
  
  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  python main.py hybrid test_materials_image.json -v --hide-failed
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ regex-only
    regex_parser = subparsers.add_parser('regex-only', help='–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ RegEx –ø–∞—Ä—Å–µ—Ä–æ–º')
    regex_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏')
    regex_parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª')
    regex_parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    regex_parser.add_argument('--hide-failed', action='store_true', help='–°–∫—Ä—ã—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ hybrid
    hybrid_parser = subparsers.add_parser('hybrid', help='–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (RegEx + AI)')
    hybrid_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏')
    hybrid_parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª')
    hybrid_parser.add_argument('-c', '--cache', default='ai_cache.json', help='–§–∞–π–ª –∫–µ—à–∞ –¥–ª—è AI')
    hybrid_parser.add_argument('-b', '--batch-size', type=int, default=5, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è AI')
    hybrid_parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    hybrid_parser.add_argument('--hide-failed', action='store_true', help='–°–∫—Ä—ã—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ enricher
    enricher_parser = subparsers.add_parser('enricher', help='–ü–æ–ª–Ω—ã–π enricher —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏')
    enricher_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏')
    enricher_parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª')
    enricher_parser.add_argument('-r', '--report', help='–§–∞–π–ª –æ—Ç—á–µ—Ç–∞')
    enricher_parser.add_argument('-c', '--cache', default='ai_cache.json', help='–§–∞–π–ª –∫–µ—à–∞ –¥–ª—è AI')
    enricher_parser.add_argument('-b', '--batch-size', type=int, default=5, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è AI')
    enricher_parser.add_argument('--no-ai', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å AI –ø–∞—Ä—Å–µ—Ä')
    enricher_parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    enricher_parser.add_argument('--hide-failed', action='store_true', help='–°–∫—Ä—ã—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'regex-only':
            cmd_regex_only(args)
        elif args.command == 'hybrid':
            cmd_hybrid(args)
        elif args.command == 'enricher':
            cmd_enricher(args)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 