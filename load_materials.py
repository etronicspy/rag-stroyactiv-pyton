#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
"""

import json
import requests
import sys

def load_materials_from_json(json_file_path, api_url="http://localhost:8000"):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ JSON —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API endpoint"""
    
    print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞: {json_file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(json_file_path, 'r', encoding='utf-8') as f:
            materials_data = json.load(f)
        
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(materials_data)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è API
        import_request = {
            "materials": materials_data,
            "default_use_category": "–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "default_unit": "—à—Ç",
            "batch_size": 50
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ API: {api_url}/api/v1/materials/import")
        
        response = requests.post(
            f"{api_url}/api/v1/materials/import",
            json=import_request,
            headers={"Content-Type": "application/json"},
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã timeout
        )
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['total_processed']}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {len(result['successful_materials'])}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(result['failed_materials'])}")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time_seconds']:.2f}—Å")
            
            if result['failed_materials']:
                print(f"\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
                for i, failed in enumerate(result['failed_materials'][:5], 1):
                    print(f"   {i}. {failed.get('error', 'Unknown error')}")
                if len(result['failed_materials']) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(result['failed_materials']) - 5} –æ—à–∏–±–æ–∫")
            
            if result.get('errors'):
                print(f"\n‚ö†Ô∏è  –û–±—â–∏–µ –æ—à–∏–±–∫–∏:")
                for error in result['errors'][:3]:
                    print(f"   ‚Ä¢ {error}")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file_path}")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 load_materials.py <–ø—É—Ç—å_–∫_json_—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python3 load_materials.py tests/data/building_materials.json")
        sys.exit(1)
    
    json_file_path = sys.argv[1]
    
    print("üèóÔ∏è  –ó–ê–ì–†–£–ó–ö–ê –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("=" * 50)
    
    success = load_materials_from_json(json_file_path)
    
    if success:
        print(f"\nüéâ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        print(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫:")
        print(f"   python3 test_search_quality.py")
    else:
        print(f"\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

if __name__ == "__main__":
    main() 