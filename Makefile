# Makefile –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG Construction Materials API

.PHONY: test-unit test-integration test-functional test-performance test-all test-coverage test-fast test-verbose clean-test

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python
PYTEST := pytest
PYTEST_ARGS := -v --tb=short

# –ë—ã—Å—Ç—Ä—ã–µ unit —Ç–µ—Å—Ç—ã
test-unit:
	@echo "üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
	$(PYTEST) -m unit $(PYTEST_ARGS)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
test-integration:
	@echo "üîß –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	TEST_MODE=real $(PYTEST) -m integration $(PYTEST_ARGS)

# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
test-functional:
	@echo "üéØ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	TEST_MODE=real $(PYTEST) -m functional $(PYTEST_ARGS)

# –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
test-performance:
	@echo "‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
	$(PYTEST) -m performance $(PYTEST_ARGS)

# –í—Å–µ —Ç–µ—Å—Ç—ã
test-all:
	@echo "üé™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤..."
	$(PYTEST) $(PYTEST_ARGS)

# –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
test-coverage:
	@echo "üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è..."
	$(PYTEST) --cov=. --cov-report=html --cov-report=term --cov-report=xml $(PYTEST_ARGS)

# –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–∏—Å–∫–ª—é—á–∞—è slow)
test-fast:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	$(PYTEST) -m "not slow" $(PYTEST_ARGS)

# –¢–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
test-verbose:
	@echo "üìù –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º..."
	$(PYTEST) -v -s --tb=long

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
clean-test:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	rm -rf coverage.xml
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
test-quick: clean-test test-unit
	@echo "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"

test-ci: clean-test test-unit test-integration
	@echo "‚úÖ CI —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"

test-full: clean-test test-all test-coverage
	@echo "‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check-deps:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
	$(PYTHON) -m pip check

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
install-test-deps:
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
	$(PYTHON) -m pip install -r requirements-dev.txt

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ñ–∞–π–ª–∞–º
test-file:
	@echo "üìÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: $(FILE)"
	$(PYTEST) $(FILE) $(PYTEST_ARGS)

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
test-pattern:
	@echo "üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: $(PATTERN)"
	$(PYTEST) -k "$(PATTERN)" $(PYTEST_ARGS)

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
test-profile:
	@echo "üìà –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
	$(PYTEST) --profile $(PYTEST_ARGS)

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
test-validate:
	@echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤..."
	$(PYTEST) --collect-only -q

# –ü–æ–º–æ—â—å
help:
	@echo "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  test-unit         - –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤"
	@echo "  test-integration  - –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  test-functional   - –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  test-performance  - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
	@echo "  test-all          - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  test-coverage     - –¢–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è"
	@echo "  test-fast         - –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"
	@echo "  test-verbose      - –¢–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"
	@echo "  clean-test        - –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo "  test-quick        - –ë—ã—Å—Ç—Ä—ã–µ unit —Ç–µ—Å—Ç—ã"
	@echo "  test-ci           - –¢–µ—Å—Ç—ã –¥–ª—è CI/CD"
	@echo "  test-full         - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
	@echo "  check-deps        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  install-test-deps - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  test-file FILE=<file> - –¢–µ—Å—Ç—ã –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
	@echo "  test-pattern PATTERN=<pattern> - –¢–µ—Å—Ç—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"
	@echo "  test-profile      - –¢–µ—Å—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
	@echo "  test-validate     - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"
	@echo "  help              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"

# ========================================
# DEPENDENCY MANAGEMENT
# ========================================
.PHONY: install install-dev update-deps check-deps clean-deps

install:
	@echo "üì¶ Installing production dependencies..."
	pip install -r requirements.txt

install-dev:
	@echo "üîß Installing development dependencies..."
	pip install -r requirements-dev.txt

install-all:
	@echo "üì¶ Installing all dependencies with pip-tools..."
	pip install -e .[dev,docs,analysis,database]

update-deps:
	@echo "üîÑ Updating dependencies..."
	pip install --upgrade pip setuptools wheel
	pip install --upgrade -r requirements.txt
	pip install --upgrade -r requirements-dev.txt

check-deps:
	@echo "üîç Checking dependency conflicts..."
	pip check
	@echo "‚úÖ Dependencies check complete"

list-deps:
	@echo "üìã Listing installed packages..."
	pip list --format=columns

outdated-deps:
	@echo "‚è∞ Checking for outdated packages..."
	pip list --outdated --format=columns

clean-deps:
	@echo "üßπ Cleaning unused packages..."
	pip-autoremove -y || echo "pip-autoremove not installed"

freeze-deps:
	@echo "‚ùÑÔ∏è Freezing current dependencies..."
	pip freeze > requirements-frozen.txt
	@echo "üìÑ Frozen dependencies saved to requirements-frozen.txt"

# ========================================
# SECURITY & VULNERABILITY SCANNING
# ========================================
.PHONY: security-scan audit-deps

security-scan:
	@echo "üîí Running security scan..."
	pip install safety
	safety check
	@echo "‚úÖ Security scan complete"

audit-deps:
	@echo "üîç Auditing dependencies for vulnerabilities..."
	pip-audit || echo "pip-audit not installed, install with: pip install pip-audit"

# ========================================
# CODE QUALITY
# ========================================
.PHONY: format lint type-check quality

format:
	@echo "üé® Formatting code with black..."
	black .
	@echo "üîß Sorting imports with isort..."
	isort .

lint:
	@echo "üîç Running flake8 linting..."
	flake8 .

type-check:
	@echo "üî¨ Running mypy type checking..."
	mypy .

quality: format lint type-check
	@echo "‚úÖ Code quality checks complete"

# ========================================
# TESTING
# ========================================
.PHONY: test test-unit test-integration test-coverage

test:
	@echo "üß™ Running all tests..."
	pytest

test-unit:
	@echo "üß™ Running unit tests..."
	pytest -m "unit" -v

test-integration:
	@echo "üß™ Running integration tests..."
	pytest -m "integration" -v

test-coverage:
	@echo "üìä Running tests with coverage..."
	pytest --cov=. --cov-report=html --cov-report=term-missing

# ========================================
# DEVELOPMENT HELPERS
# ========================================
.PHONY: dev-setup pre-commit-install dev-server

dev-setup: install-dev pre-commit-install
	@echo "üöÄ Development environment setup complete!"

pre-commit-install:
	@echo "ü™ù Installing pre-commit hooks..."
	pre-commit install

dev-server:
	@echo "üöÄ Starting development server with auto-reload..."
	uvicorn main:app --reload --host 0.0.0.0 --port 8000 