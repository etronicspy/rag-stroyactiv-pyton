#!/usr/bin/env python3

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials –≤ Qdrant –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ SKU
"""

import asyncio
from core.database.adapters.qdrant_adapter import QdrantVectorDatabase
from core.config.base import Settings

async def check_qdrant_collection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials –≤ Qdrant"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials –≤ Qdrant...")
    
    # –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Qdrant –Ω–∞–ø—Ä—è–º—É—é
    settings = Settings()
    qdrant_config = settings.get_vector_db_config()
    vector_db = QdrantVectorDatabase(qdrant_config)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health
    health = await vector_db.health_check()
    print(f"üè• Health check: {health}")
    
    collection_name = "materials"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    exists = await vector_db.collection_exists(collection_name)
    print(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}")
    
    if not exists:
        print("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è materials –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("üí° –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'...")
    all_records = await vector_db.scroll_all(collection_name, with_payload=True, with_vectors=False)
    
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_records)}")
    
    if len(all_records) == 0:
        print("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!")
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
    print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
    available_fields = set()
    
    for i, record in enumerate(all_records[:5]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
        payload = record.get("payload", {})
        available_fields.update(payload.keys())
        
        print(f"  {i+1}. ID: {record['id']}")
        print(f"     SKU: {payload.get('sku', 'N/A')}")
        print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {payload.get('name', 'N/A')}")
        print(f"     –ï–¥–∏–Ω–∏—Ü–∞: {payload.get('unit', 'N/A')}")
        print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {payload.get('description', 'N/A')}")
        print(f"     Normalized Unit: {payload.get('normalized_unit', '–ù–ï–¢ –ü–û–õ–Ø')}")
        print(f"     Normalized Color: {payload.get('normalized_color', '–ù–ï–¢ –ü–û–õ–Ø')}")
        print(f"     –í—Å–µ –ø–æ–ª—è: {list(payload.keys())}")
        print()
    
    print(f"üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {sorted(available_fields)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ SKU –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
    sku_patterns = {}
    none_sku_count = 0
    
    for record in all_records:
        payload = record.get("payload", {})
        sku = payload.get("sku")
        
        if sku is None or sku == "UNKNOWN":
            none_sku_count += 1
        elif isinstance(sku, str) and sku.startswith("CEM"):
            sku_patterns["–¶–µ–º–µ–Ω—Ç (CEM)"] = sku_patterns.get("–¶–µ–º–µ–Ω—Ç (CEM)", 0) + 1
        elif isinstance(sku, str) and sku.startswith("BRK"):
            sku_patterns["–ö–∏—Ä–ø–∏—á (BRK)"] = sku_patterns.get("–ö–∏—Ä–ø–∏—á (BRK)", 0) + 1
        elif isinstance(sku, str) and sku.startswith("SND"):
            sku_patterns["–ü–µ—Å–æ–∫ (SND)"] = sku_patterns.get("–ü–µ—Å–æ–∫ (SND)", 0) + 1
        elif isinstance(sku, str) and sku.startswith("ARM"):
            sku_patterns["–ê—Ä–º–∞—Ç—É—Ä–∞ (ARM)"] = sku_patterns.get("–ê—Ä–º–∞—Ç—É—Ä–∞ (ARM)", 0) + 1
        elif isinstance(sku, str) and sku.startswith("BLK"):
            sku_patterns["–ë–ª–æ–∫–∏ (BLK)"] = sku_patterns.get("–ë–ª–æ–∫–∏ (BLK)", 0) + 1
        elif isinstance(sku, str) and sku.startswith("GRV"):
            sku_patterns["–ì—Ä–∞–≤–∏–π/–©–µ–±–µ–Ω—å (GRV)"] = sku_patterns.get("–ì—Ä–∞–≤–∏–π/–©–µ–±–µ–Ω—å (GRV)", 0) + 1
        elif isinstance(sku, str) and sku.startswith("MTL"):
            sku_patterns["–ú–µ—Ç–∞–ª–ª (MTL)"] = sku_patterns.get("–ú–µ—Ç–∞–ª–ª (MTL)", 0) + 1
        else:
            sku_patterns["–î—Ä—É–≥–∏–µ"] = sku_patterns.get("–î—Ä—É–≥–∏–µ", 0) + 1
    
    if none_sku_count > 0:
        print(f"  ‚ùå None/UNKNOWN SKU: {none_sku_count} –∑–∞–ø–∏—Å–µ–π")
    
    for pattern, count in sku_patterns.items():
        print(f"  - {pattern}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    print("\nüéØ –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    test_embedding = [0.1] * 1536  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
    search_results = await vector_db.search(
        collection_name=collection_name,
        query_vector=test_embedding,
        limit=5
    )
    
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {len(search_results)} –∑–∞–ø–∏—Å–µ–π")
    for i, result in enumerate(search_results[:3]):
        payload = result.get("payload", {})
        print(f"  {i+1}. Score: {result.get('score', 0):.4f}, SKU: {payload.get('sku', 'N/A')}, Name: {payload.get('name', 'N/A')}")

if __name__ == "__main__":
    asyncio.run(check_qdrant_collection()) 