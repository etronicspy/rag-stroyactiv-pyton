#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Stage 8 - Full API Pipeline.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ batch processing pipeline —á–µ—Ä–µ–∑ API endpoints.
"""

import asyncio
import json
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any

import aiohttp
import pytest
from pydantic import ValidationError

from core.schemas.processing_models import (
    BatchMaterialsRequest,
    MaterialInput,
    ProcessingStatus,
    ProcessingProgress
)
from core.logging import get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1/materials"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_MATERIALS = [
    {"id": "test_001", "name": "–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –ú125", "unit": "—à—Ç"},
    {"id": "test_002", "name": "–¶–µ–º–µ–Ω—Ç –ú400", "unit": "–∫–≥"},
    {"id": "test_003", "name": "–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π", "unit": "–º¬≥"},
    {"id": "test_004", "name": "–©–µ–±–µ–Ω—å —Ñ—Ä–∞–∫—Ü–∏–∏ 20-40", "unit": "–º¬≥"},
    {"id": "test_005", "name": "–ê—Ä–º–∞—Ç—É—Ä–∞ –ê400 –¥–∏–∞–º–µ—Ç—Ä 12–º–º", "unit": "–º"},
    {"id": "test_006", "name": "–ë–µ—Ç–æ–Ω –ú300", "unit": "–º¬≥"},
    {"id": "test_007", "name": "–î–æ—Å–∫–∞ –æ–±—Ä–µ–∑–Ω–∞—è 50x150x6000", "unit": "–º¬≥"},
    {"id": "test_008", "name": "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω 12.5–º–º", "unit": "–º¬≤"},
    {"id": "test_009", "name": "–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å –º–∏–Ω–≤–∞—Ç–∞ 100–º–º", "unit": "–º¬≤"},
    {"id": "test_010", "name": "–ö—Ä–æ–≤–ª—è –º–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞", "unit": "–º¬≤"}
]

LARGE_BATCH_MATERIALS = [
    {"id": f"large_batch_{i:03d}", "name": f"–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–π {i}", "unit": "—à—Ç"}
    for i in range(1, 101)  # 100 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
]


class Stage8PipelineTestRunner:
    """–¢–µ—Å—Ç runner –¥–ª—è Stage 8 pipeline."""
    
    def __init__(self):
        self.logger = logger
        self.session: aiohttp.ClientSession = None
        self.test_results: List[Dict[str, Any]] = []
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã Stage 8 pipeline."""
        self.logger.info("üöÄ Starting Stage 8 Full Pipeline Tests")
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
            await self._test_health_endpoint()
            
            # –¢–µ—Å—Ç 2: –ú–∞–ª—ã–π batch (10 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
            await self._test_small_batch()
            
            # –¢–µ—Å—Ç 3: –°—Ä–µ–¥–Ω–∏–π batch (50 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
            await self._test_medium_batch()
            
            # –¢–µ—Å—Ç 4: –ë–æ–ª—å—à–æ–π batch (100 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
            await self._test_large_batch()
            
            # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._test_statistics()
            
            # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            await self._test_validation_errors()
            
            # –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            await self._test_retry_functionality()
            
            # –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ concurrent requests
            await self._test_concurrent_requests()
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            await self._generate_final_report()
            
        except Exception as e:
            self.logger.error(f"Error running tests: {str(e)}")
            raise
    
    async def _test_health_endpoint(self):
        """–¢–µ—Å—Ç health endpoint."""
        self.logger.info("Testing health endpoint...")
        
        try:
            async with self.session.get(f"{API_BASE}/process-enhanced/health") as response:
                data = await response.json()
                
                assert response.status == 200
                assert data["status"] in ["healthy", "overloaded", "degraded"]
                assert "timestamp" in data
                
                self.test_results.append({
                    "test": "health_endpoint",
                    "status": "passed",
                    "response": data
                })
                
                self.logger.info("‚úÖ Health endpoint test passed")
                
        except Exception as e:
            self.logger.error(f"‚ùå Health endpoint test failed: {str(e)}")
            self.test_results.append({
                "test": "health_endpoint",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_small_batch(self):
        """–¢–µ—Å—Ç –º–∞–ª–æ–≥–æ batch (10 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)."""
        self.logger.info("Testing small batch processing...")
        
        try:
            request_id = f"small_batch_{uuid.uuid4().hex[:8]}"
            materials = TEST_MATERIALS[:10]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            request_data = {
                "request_id": request_id,
                "materials": materials
            }
            
            async with self.session.post(
                f"{API_BASE}/process-enhanced",
                json=request_data
            ) as response:
                data = await response.json()
                
                assert response.status == 200
                assert data["status"] == "accepted"
                assert data["request_id"] == request_id
                assert data["materials_count"] == 10
                
                self.logger.info(f"‚úÖ Small batch request accepted: {request_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self._wait_for_processing_completion(request_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = await self._get_processing_results(request_id)
            
            self.test_results.append({
                "test": "small_batch",
                "status": "passed",
                "request_id": request_id,
                "materials_count": 10,
                "results_count": len(results)
            })
            
            self.logger.info("‚úÖ Small batch test passed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Small batch test failed: {str(e)}")
            self.test_results.append({
                "test": "small_batch",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_medium_batch(self):
        """–¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ batch (50 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)."""
        self.logger.info("Testing medium batch processing...")
        
        try:
            request_id = f"medium_batch_{uuid.uuid4().hex[:8]}"
            materials = LARGE_BATCH_MATERIALS[:50]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            request_data = {
                "request_id": request_id,
                "materials": materials
            }
            
            async with self.session.post(
                f"{API_BASE}/process-enhanced",
                json=request_data
            ) as response:
                data = await response.json()
                
                assert response.status == 200
                assert data["status"] == "accepted"
                assert data["request_id"] == request_id
                assert data["materials_count"] == 50
                
                self.logger.info(f"‚úÖ Medium batch request accepted: {request_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self._wait_for_processing_completion(request_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = await self._get_processing_results(request_id)
            
            self.test_results.append({
                "test": "medium_batch",
                "status": "passed",
                "request_id": request_id,
                "materials_count": 50,
                "results_count": len(results)
            })
            
            self.logger.info("‚úÖ Medium batch test passed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Medium batch test failed: {str(e)}")
            self.test_results.append({
                "test": "medium_batch",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_large_batch(self):
        """–¢–µ—Å—Ç –±–æ–ª—å—à–æ–≥–æ batch (100 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)."""
        self.logger.info("Testing large batch processing...")
        
        try:
            request_id = f"large_batch_{uuid.uuid4().hex[:8]}"
            materials = LARGE_BATCH_MATERIALS
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            request_data = {
                "request_id": request_id,
                "materials": materials
            }
            
            async with self.session.post(
                f"{API_BASE}/process-enhanced",
                json=request_data
            ) as response:
                data = await response.json()
                
                assert response.status == 200
                assert data["status"] == "accepted"
                assert data["request_id"] == request_id
                assert data["materials_count"] == 100
                
                self.logger.info(f"‚úÖ Large batch request accepted: {request_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ batch)
            await self._wait_for_processing_completion(request_id, timeout=300)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = await self._get_processing_results(request_id)
            
            self.test_results.append({
                "test": "large_batch",
                "status": "passed",
                "request_id": request_id,
                "materials_count": 100,
                "results_count": len(results)
            })
            
            self.logger.info("‚úÖ Large batch test passed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Large batch test failed: {str(e)}")
            self.test_results.append({
                "test": "large_batch",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_statistics(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.logger.info("Testing statistics endpoint...")
        
        try:
            async with self.session.get(f"{API_BASE}/process-enhanced/statistics") as response:
                data = await response.json()
                
                assert response.status == 200
                assert "total_requests" in data
                assert "total_materials" in data
                assert "success_rate" in data
                
                self.test_results.append({
                    "test": "statistics",
                    "status": "passed",
                    "statistics": data
                })
                
                self.logger.info("‚úÖ Statistics test passed")
                
        except Exception as e:
            self.logger.error(f"‚ùå Statistics test failed: {str(e)}")
            self.test_results.append({
                "test": "statistics",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_validation_errors(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info("Testing validation errors...")
        
        try:
            # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            request_data = {
                "request_id": "empty_materials",
                "materials": []
            }
            
            async with self.session.post(
                f"{API_BASE}/process-enhanced",
                json=request_data
            ) as response:
                data = await response.json()
                
                assert response.status == 400 or "errors" in data
                
                self.logger.info("‚úÖ Empty materials validation test passed")
            
            # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            request_data = {
                "request_id": "invalid_data",
                "materials": [
                    {"id": "", "name": "", "unit": ""}  # –ü—É—Å—Ç—ã–µ –ø–æ–ª—è
                ]
            }
            
            async with self.session.post(
                f"{API_BASE}/process-enhanced",
                json=request_data
            ) as response:
                data = await response.json()
                
                assert response.status == 400 or "errors" in data
                
                self.logger.info("‚úÖ Invalid data validation test passed")
            
            self.test_results.append({
                "test": "validation_errors",
                "status": "passed"
            })
            
        except Exception as e:
            self.logger.error(f"‚ùå Validation errors test failed: {str(e)}")
            self.test_results.append({
                "test": "validation_errors",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_retry_functionality(self):
        """–¢–µ—Å—Ç retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        self.logger.info("Testing retry functionality...")
        
        try:
            async with self.session.post(f"{API_BASE}/process-enhanced/retry") as response:
                data = await response.json()
                
                assert response.status == 200
                assert "retry_count" in data
                
                self.test_results.append({
                    "test": "retry_functionality",
                    "status": "passed",
                    "retry_count": data["retry_count"]
                })
                
                self.logger.info("‚úÖ Retry functionality test passed")
                
        except Exception as e:
            self.logger.error(f"‚ùå Retry functionality test failed: {str(e)}")
            self.test_results.append({
                "test": "retry_functionality",
                "status": "failed",
                "error": str(e)
            })
    
    async def _test_concurrent_requests(self):
        """–¢–µ—Å—Ç concurrent requests."""
        self.logger.info("Testing concurrent requests...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            tasks = []
            
            for i in range(3):
                request_id = f"concurrent_{i}_{uuid.uuid4().hex[:8]}"
                materials = TEST_MATERIALS[:5]  # –ú–∞–ª—ã–µ batch –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
                
                request_data = {
                    "request_id": request_id,
                    "materials": materials
                }
                
                task = self._send_batch_request(request_data)
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = sum(1 for r in responses if not isinstance(r, Exception))
            
            self.test_results.append({
                "test": "concurrent_requests",
                "status": "passed",
                "total_requests": 3,
                "successful_requests": success_count
            })
            
            self.logger.info("‚úÖ Concurrent requests test passed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Concurrent requests test failed: {str(e)}")
            self.test_results.append({
                "test": "concurrent_requests",
                "status": "failed",
                "error": str(e)
            })
    
    async def _send_batch_request(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å batch request."""
        async with self.session.post(
            f"{API_BASE}/process-enhanced",
            json=request_data
        ) as response:
            return await response.json()
    
    async def _wait_for_processing_completion(self, request_id: str, timeout: int = 120):
        """–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        start_time = datetime.utcnow()
        
        while (datetime.utcnow() - start_time).total_seconds() < timeout:
            try:
                async with self.session.get(
                    f"{API_BASE}/process-enhanced/status/{request_id}"
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        status = data.get("status")
                        
                        if status in ["completed", "failed"]:
                            self.logger.info(f"Processing completed for {request_id}: {status}")
                            return
                        
                        if status == "processing":
                            progress = data.get("progress", {})
                            self.logger.info(
                                f"Processing {request_id}: {progress.get('completed', 0)}/"
                                f"{progress.get('total', 0)} completed"
                            )
                    
                    await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                    
            except Exception as e:
                self.logger.warning(f"Error checking status for {request_id}: {str(e)}")
                await asyncio.sleep(5)
        
        self.logger.warning(f"Timeout waiting for completion of {request_id}")
    
    async def _get_processing_results(self, request_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        try:
            async with self.session.get(
                f"{API_BASE}/process-enhanced/results/{request_id}"
            ) as response:
                data = await response.json()
                
                if response.status == 200:
                    return data.get("results", [])
                else:
                    self.logger.warning(f"Error getting results for {request_id}: {data}")
                    return []
                    
        except Exception as e:
            self.logger.error(f"Error getting results for {request_id}: {str(e)}")
            return []
    
    async def _generate_final_report(self):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç."""
        self.logger.info("Generating final test report...")
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for r in self.test_results if r["status"] == "passed")
        failed_tests = total_tests - passed_tests
        
        report = {
            "timestamp": datetime.utcnow().isoformat(),
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "success_rate": passed_tests / total_tests if total_tests > 0 else 0,
            "test_results": self.test_results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f"test_results/stage_8_pipeline_test_report_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            import os
            os.makedirs("test_results", exist_ok=True)
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"Test report saved to {report_file}")
            
        except Exception as e:
            self.logger.error(f"Error saving test report: {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        self.logger.info("=" * 60)
        self.logger.info("üéØ STAGE 8 PIPELINE TEST RESULTS")
        self.logger.info("=" * 60)
        self.logger.info(f"Total tests: {total_tests}")
        self.logger.info(f"Passed: {passed_tests}")
        self.logger.info(f"Failed: {failed_tests}")
        self.logger.info(f"Success rate: {report['success_rate']:.1%}")
        self.logger.info("=" * 60)
        
        if failed_tests > 0:
            self.logger.error("‚ùå Some tests failed!")
            for result in self.test_results:
                if result["status"] == "failed":
                    self.logger.error(f"Failed test: {result['test']} - {result.get('error', 'Unknown error')}")
        else:
            self.logger.info("‚úÖ All tests passed!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    try:
        async with Stage8PipelineTestRunner() as test_runner:
            await test_runner.run_all_tests()
            
    except Exception as e:
        logger.error(f"Error running Stage 8 pipeline tests: {str(e)}")
        return 1
    
    return 0


if __name__ == "__main__":
    import sys
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    result = asyncio.run(main())
    sys.exit(result) 