#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ middleware —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç pytest –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
"""

import requests
import json
import time
from datetime import datetime
from typing import Dict, Any
import sys

class MiddlewareRecoveryTester:
    """–¢–µ—Å—Ç–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ middleware —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.results = {"passed": 0, "failed": 0, "tests": []}
    
    def log_test(self, name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞."""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {name}")
        if details:
            print(f"    {details}")
        
        self.results["tests"].append({
            "name": name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
        
        if success:
            self.results["passed"] += 1
        else:
            self.results["failed"] += 1
    
    def test_sql_injection_post_body(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ SQL injection –≤ POST body."""
        try:
            malicious_data = {
                "name": "'; DROP TABLE materials; --",
                "description": "SQL injection attempt"
            }
            
            response = requests.post(
                f"{self.base_url}/api/v1/test/materials",
                json=malicious_data,
                timeout=5
            )
            
            success = response.status_code == 400
            details = f"Status: {response.status_code}, Expected: 400"
            
            self.log_test("SQL Injection POST Body Block", success, details)
            return success
            
        except Exception as e:
            self.log_test("SQL Injection POST Body Block", False, f"Error: {e}")
            return False
    
    def test_xss_post_body(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ XSS –≤ POST body."""
        try:
            malicious_data = {
                "name": "<script>alert('xss')</script>",
                "description": "XSS attempt"
            }
            
            response = requests.post(
                f"{self.base_url}/api/v1/test/materials",
                json=malicious_data,
                timeout=5
            )
            
            success = response.status_code == 400
            details = f"Status: {response.status_code}, Expected: 400"
            
            self.log_test("XSS POST Body Block", success, details)
            return success
            
        except Exception as e:
            self.log_test("XSS POST Body Block", False, f"Error: {e}")
            return False
    
    def test_legitimate_cyrillic_content(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ legitimate Cyrillic content."""
        try:
            legitimate_data = {
                "name": "–¶–µ–º–µ–Ω—Ç –ú500",
                "description": "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
            }
            
            response = requests.post(
                f"{self.base_url}/api/v1/test/materials",
                json=legitimate_data,
                timeout=5
            )
            
            success = response.status_code == 200
            details = f"Status: {response.status_code}, Expected: 200"
            
            if success:
                data = response.json()
                if data.get("data", {}).get("name") == "–¶–µ–º–µ–Ω—Ç –ú500":
                    details += " - Cyrillic preserved correctly"
                else:
                    success = False
                    details += " - Cyrillic not preserved"
            
            self.log_test("Legitimate Cyrillic Content", success, details)
            return success
            
        except Exception as e:
            self.log_test("Legitimate Cyrillic Content", False, f"Error: {e}")
            return False
    
    def test_sql_injection_query_params(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ SQL injection –≤ query params."""
        try:
            malicious_query = "'; DROP TABLE materials; --"
            
            response = requests.get(
                f"{self.base_url}/api/v1/test/sql-injection-test",
                params={"q": malicious_query},
                timeout=5
            )
            
            success = response.status_code == 400
            details = f"Status: {response.status_code}, Expected: 400"
            
            self.log_test("SQL Injection Query Params Block", success, details)
            return success
            
        except Exception as e:
            self.log_test("SQL Injection Query Params Block", False, f"Error: {e}")
            return False
    
    def test_health_endpoint(self) -> bool:
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ health endpoint."""
        try:
            response = requests.get(f"{self.base_url}/api/v1/health", timeout=5)
            
            success = response.status_code == 200
            details = f"Status: {response.status_code}"
            
            if success:
                data = response.json()
                if "status" in data:
                    details += f" - Health: {data['status']}"
            
            self.log_test("Health Endpoint", success, details)
            return success
            
        except Exception as e:
            self.log_test("Health Endpoint", False, f"Error: {e}")
            return False
    
    def test_security_headers(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è security headers."""
        try:
            response = requests.get(f"{self.base_url}/api/v1/test/materials/1", timeout=5)
            
            required_headers = [
                "X-Content-Type-Options",
                "X-Frame-Options", 
                "X-XSS-Protection"
            ]
            
            missing_headers = []
            for header in required_headers:
                if header not in response.headers:
                    missing_headers.append(header)
            
            success = len(missing_headers) == 0
            details = f"Status: {response.status_code}"
            
            if missing_headers:
                details += f" - Missing headers: {', '.join(missing_headers)}"
            else:
                details += " - All security headers present"
            
            self.log_test("Security Headers", success, details)
            return success
            
        except Exception as e:
            self.log_test("Security Headers", False, f"Error: {e}")
            return False
    
    def test_large_data_compression(self) -> bool:
        """–¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            headers = {"Accept-Encoding": "gzip, deflate, br"}
            response = requests.get(
                f"{self.base_url}/api/v1/test/large-data",
                headers=headers,
                timeout=10
            )
            
            success = response.status_code == 200
            details = f"Status: {response.status_code}"
            
            if success:
                content_encoding = response.headers.get("Content-Encoding", "none")
                content_length = len(response.content)
                details += f" - Encoding: {content_encoding}, Size: {content_length} bytes"
                
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∂–∞—Ç—ã, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
                if content_encoding in ["gzip", "deflate", "br"]:
                    details += " - Compressed ‚úì"
                else:
                    details += " - Not compressed (may be normal for test data)"
            
            self.log_test("Large Data Compression", success, details)
            return success
            
        except Exception as e:
            self.log_test("Large Data Compression", False, f"Error: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üîç Running Middleware Recovery Tests...")
        print("=" * 60)
        
        start_time = time.time()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ security —Ç–µ—Å—Ç—ã
        self.test_sql_injection_post_body()
        self.test_xss_post_body()
        self.test_legitimate_cyrillic_content()
        self.test_sql_injection_query_params()
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_health_endpoint()
        self.test_security_headers()
        self.test_large_data_compression()
        
        end_time = time.time()
        duration = end_time - start_time
        
        print("\nüìä Test Results:")
        print("=" * 60)
        print(f"‚úÖ Passed: {self.results['passed']}")
        print(f"‚ùå Failed: {self.results['failed']}")
        print(f"‚è±Ô∏è  Duration: {duration:.2f} seconds")
        
        success_rate = (self.results["passed"] / (self.results["passed"] + self.results["failed"])) * 100
        print(f"üìà Success Rate: {success_rate:.1f}%")
        
        if self.results["failed"] == 0:
            print("\nüéâ ALL TESTS PASSED! Middleware recovery successful!")
            return {"status": "success", "results": self.results}
        else:
            print(f"\n‚ö†Ô∏è  {self.results['failed']} tests failed. Check details above.")
            return {"status": "partial", "results": self.results}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:8000"
    
    print(f"üöÄ Testing middleware recovery on: {base_url}")
    
    tester = MiddlewareRecoveryTester(base_url)
    
    try:
        results = tester.run_all_tests()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º exit code –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        if results["status"] == "success":
            sys.exit(0)
        else:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Tests interrupted by user")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 