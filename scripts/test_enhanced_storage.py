#!/usr/bin/env python3
"""
Test Enhanced Storage - –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏:
- color
- normalized_color  
- normalized_parsed_unit
- unit_coefficient
"""

import sys
import os
import asyncio
from datetime import datetime
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.logging import get_logger
from core.schemas.materials import MaterialCreate
from core.database.factories import DatabaseFactory, AIClientFactory
from services.materials import MaterialsService

logger = get_logger(__name__)

class EnhancedStorageTest:
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    def __init__(self):
        self.materials_service = None
        self.test_materials = []
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # Initialize database clients
            vector_db = DatabaseFactory.create_vector_database()
            ai_client = AIClientFactory.create_ai_client()
            
            # Initialize service
            self.materials_service = MaterialsService(vector_db=vector_db, ai_client=ai_client)
            await self.materials_service.initialize()
            
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def prepare_test_materials(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        
        self.test_materials = [
            MaterialCreate(
                name="–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π —Ä—è–¥–æ–≤–æ–π –∫—Ä–∞—Å–Ω—ã–π",
                use_category="–ö–∏—Ä–ø–∏—á",
                unit="—à—Ç",
                sku="BRK0101",
                description="–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π —Ä—è–¥–æ–≤–æ–π –∫–∏—Ä–ø–∏—á –¥–ª—è –∫–ª–∞–¥–∫–∏ —Å—Ç–µ–Ω",
                color="–∫—Ä–∞—Å–Ω—ã–π",
                normalized_color="–∫—Ä–∞—Å–Ω—ã–π",
                normalized_parsed_unit="—à—Ç—É–∫–∞",
                unit_coefficient=1.0
            ),
            MaterialCreate(
                name="–¶–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π –ú500 –±–µ–ª—ã–π",
                use_category="–¶–µ–º–µ–Ω—Ç",
                unit="–º–µ—à–æ–∫",
                sku="CEM0201",
                description="–ë–µ–ª—ã–π –ø–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∫–∏",
                color="–±–µ–ª—ã–π",
                normalized_color="–±–µ–ª—ã–π",
                normalized_parsed_unit="–º–µ—à–æ–∫",
                unit_coefficient=1.0
            ),
            MaterialCreate(
                name="–ü–µ—Å–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—á–Ω–æ–π",
                use_category="–ü–µ—Å–æ–∫",
                unit="–º¬≥",
                sku="SND0301",
                description="–†–µ—á–Ω–æ–π –ø–µ—Å–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                color=None,  # –ë–µ–∑ —Ü–≤–µ—Ç–∞
                normalized_color="–±–µ–∑_—Ü–≤–µ—Ç–∞",
                normalized_parsed_unit="–∫—É–±–∏—á–µ—Å–∫–∏–π_–º–µ—Ç—Ä",
                unit_coefficient=1.0
            ),
            MaterialCreate(
                name="–ü–ª–∏—Ç–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞–ø–æ–ª—å–Ω–∞—è —Å–µ—Ä–∞—è 300x300",
                use_category="–ü–ª–∏—Ç–∫–∞",
                unit="–º¬≤",
                sku="TLE0401",
                description="–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞ –¥–ª—è –ø–æ–ª–∞",
                color="—Å–µ—Ä–∞—è",
                normalized_color="—Å–µ—Ä—ã–π",
                normalized_parsed_unit="–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π_–º–µ—Ç—Ä",
                unit_coefficient=1.0
            ),
            MaterialCreate(
                name="–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è 10–ª",
                use_category="–ö—Ä–∞—Å–∫–∞",
                unit="–ª",
                sku="PNT0501",
                description="–í–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è –∫—Ä–∞—Å–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–±–æ—Ç",
                color="–±–µ–ª–∞—è",
                normalized_color="–±–µ–ª—ã–π",
                normalized_parsed_unit="–ª–∏—Ç—Ä",
                unit_coefficient=1.0
            )
        ]
        
        logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.test_materials)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    async def test_individual_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        
        created_materials = []
        
        for i, material in enumerate(self.test_materials, 1):
            try:
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {i}/{len(self.test_materials)}: {material.name}")
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                created_material = await self.materials_service.create_material(material)
                created_materials.append(created_material)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                assert created_material.color == material.color
                assert created_material.normalized_color == material.normalized_color
                assert created_material.normalized_parsed_unit == material.normalized_parsed_unit
                assert created_material.unit_coefficient == material.unit_coefficient
                
                logger.info(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {created_material.id}")
                logger.info(f"   –¶–≤–µ—Ç: {created_material.color} ‚Üí {created_material.normalized_color}")
                logger.info(f"   –ï–¥–∏–Ω–∏—Ü–∞: {created_material.unit} ‚Üí {created_material.normalized_parsed_unit}")
                logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {created_material.unit_coefficient}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.name}: {e}")
                raise
        
        logger.info(f"‚úÖ –í—Å–µ {len(created_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return created_materials
    
    async def test_batch_creation(self):
        """–¢–µ—Å—Ç batch —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch —Å–æ–∑–¥–∞–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è batch —Ç–µ—Å—Ç–∞
        batch_materials = [
            MaterialCreate(
                name="–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 12.5–º–º",
                use_category="–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω",
                unit="–ª–∏—Å—Ç",
                sku="GYP0601",
                description="–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–Ω—ã–π –ª–∏—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
                color="—Å–µ—Ä—ã–π",
                normalized_color="—Å–µ—Ä—ã–π",
                normalized_parsed_unit="–ª–∏—Å—Ç",
                unit_coefficient=1.0
            ),
            MaterialCreate(
                name="–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å –º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞ 50–º–º",
                use_category="–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å",
                unit="–º¬≤",
                sku="INS0701",
                description="–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞ –¥–ª—è —É—Ç–µ–ø–ª–µ–Ω–∏—è",
                color="–∂–µ–ª—Ç—ã–π",
                normalized_color="–∂–µ–ª—Ç—ã–π",
                normalized_parsed_unit="–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π_–º–µ—Ç—Ä",
                unit_coefficient=1.0
            )
        ]
        
        try:
            # –°–æ–∑–¥–∞–µ–º batch
            batch_result = await self.materials_service.create_materials_batch(batch_materials)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert batch_result.success is True
            assert len(batch_result.successful_materials) == len(batch_materials)
            assert len(batch_result.failed_materials) == 0
            
            logger.info(f"‚úÖ Batch —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {batch_result.total_processed} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            for material in batch_result.successful_materials:
                assert material.normalized_color is not None
                assert material.normalized_parsed_unit is not None
                assert material.unit_coefficient is not None
                
            return batch_result.successful_materials
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            raise
    
    async def test_search_with_enhanced_fields(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...")
        
        test_queries = [
            "–∫—Ä–∞—Å–Ω—ã–π –∫–∏—Ä–ø–∏—á",
            "–±–µ–ª—ã–π —Ü–µ–º–µ–Ω—Ç",
            "—Å–µ—Ä–∞—è –ø–ª–∏—Ç–∫–∞",
            "–±–µ–ª–∞—è –∫—Ä–∞—Å–∫–∞",
            "–∂–µ–ª—Ç—ã–π —É—Ç–µ–ø–ª–∏—Ç–µ–ª—å"
        ]
        
        for query in test_queries:
            try:
                logger.info(f"üîé –ü–æ–∏—Å–∫: '{query}'")
                
                results = await self.materials_service.search_materials(query, limit=5)
                
                logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                
                for result in results:
                    logger.info(f"   - {result.name}")
                    logger.info(f"     –¶–≤–µ—Ç: {result.color} ‚Üí {result.normalized_color}")
                    logger.info(f"     –ï–¥–∏–Ω–∏—Ü–∞: {result.unit} ‚Üí {result.normalized_parsed_unit}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        start_time = datetime.now()
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.initialize()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.prepare_test_materials()
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            created_individuals = await self.test_individual_creation()
            
            # –¢–µ—Å—Ç 2: Batch —Å–æ–∑–¥–∞–Ω–∏–µ
            created_batch = await self.test_batch_creation()
            
            # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            await self.test_search_with_enhanced_fields()
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_created = len(created_individuals) + len(created_batch)
            elapsed_time = (datetime.now() - start_time).total_seconds()
            
            logger.info("="*60)
            logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_created}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
            logger.info("="*60)
            
        except Exception as e:
            logger.error(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
            raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test = EnhancedStorageTest()
    await test.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 