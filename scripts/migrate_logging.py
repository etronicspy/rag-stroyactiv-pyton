#!/usr/bin/env python3
"""
üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ 
logging.getLogger(__name__) –Ω–∞ unified logging —Å–∏—Å—Ç–µ–º—É.

–≠–¢–ê–ü 1 –ü–õ–ê–ù–ê: –ú–∞—Å—Å–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import re
import sys
from pathlib import Path
from typing import List, Dict, Tuple
import argparse


class LoggingMigrator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∏–≥—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, dry_run: bool = False, verbose: bool = False):
        self.dry_run = dry_run
        self.verbose = verbose
        self.stats = {
            'files_processed': 0,
            'files_modified': 0,
            'import_replacements': 0,
            'logger_replacements': 0,
            'errors': 0
        }
        
        # –§–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.exclude_files = {
            'core/monitoring/logger.py',  # –≠—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ get_logger
            'core/config/logging.py',     # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
            'scripts/migrate_logging.py', # –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
            'tests/',                    # –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è —Å –Ω–∞—Ç–∏–≤–Ω—ã–º
            'docs/',                     # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            'PLAN_DOCS/',               # –ü–ª–∞–Ω—ã
            '.venv/',                   # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            '__pycache__/'              # –ö–µ—à Python
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
        self.patterns = [
            # –ò–º–ø–æ—Ä—Ç logging
            (
                r'^import logging$',
                'from core.monitoring.logger import get_logger'
            ),
            # logger = logging.getLogger(__name__)
            (
                r'logger = logging\.getLogger\(__name__\)',
                'logger = get_logger(__name__)'
            ),
            # –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
            (
                r'logging\.getLogger\(__name__\)',
                'get_logger(__name__)'
            ),
            # self.logger = logging.getLogger(...)
            (
                r'self\.logger = logging\.getLogger\(([^)]+)\)',
                r'self.logger = get_logger(\1)'
            )
        ]
    
    def should_exclude_file(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        file_path_normalized = file_path.replace('\\', '/')
        
        for exclude_pattern in self.exclude_files:
            if exclude_pattern in file_path_normalized:
                return True
        
        return False
    
    def find_python_files(self, root_dir: str) -> List[str]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
        python_files = []
        
        for root, dirs, files in os.walk(root_dir):
            # –ò—Å–∫–ª—é—á–∞–µ–º .git, .venv –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = os.path.join(root, file)
                    relative_path = os.path.relpath(file_path, root_dir)
                    
                    if not self.should_exclude_file(relative_path):
                        python_files.append(file_path)
        
        return python_files
    
    def analyze_file(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            analysis = {
                'needs_migration': False,
                'has_import_logging': 'import logging' in content,
                'has_getlogger': 'logging.getLogger' in content,
                'async_functions': len(re.findall(r'async def', content)),
                'total_lines': len(content.splitlines())
            }
            
            analysis['needs_migration'] = analysis['has_import_logging'] or analysis['has_getlogger']
            
            return analysis
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
            self.stats['errors'] += 1
            return {'needs_migration': False, 'error': str(e)}
    
    def migrate_file(self, file_path: str) -> bool:
        """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            modified_content = original_content
            changes_made = 0
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã
            for pattern, replacement in self.patterns:
                new_content, replacements = re.subn(pattern, replacement, modified_content, flags=re.MULTILINE)
                if replacements > 0:
                    modified_content = new_content
                    changes_made += replacements
                    
                    if 'import logging' in pattern:
                        self.stats['import_replacements'] += replacements
                    elif 'getLogger' in pattern:
                        self.stats['logger_replacements'] += replacements
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if changes_made > 0:
                if not self.dry_run:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(modified_content)
                
                if self.verbose:
                    print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {file_path} ({changes_made} –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                
                self.stats['files_modified'] += 1
                return True
            
            return False
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {file_path}: {e}")
            self.stats['errors'] += 1
            return False
    
    def run_migration(self, root_dir: str = '.') -> Dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é."""
        print("üîß –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        print(f"{'üîç DRY RUN —Ä–µ–∂–∏–º' if self.dry_run else 'üöÄ –†–µ–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è'}")
        print()
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã
        python_files = self.find_python_files(root_dir)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –∏ –º–∏–≥—Ä–∞—Ü–∏—è
        files_needing_migration = []
        
        for file_path in python_files:
            self.stats['files_processed'] += 1
            
            analysis = self.analyze_file(file_path)
            if analysis.get('needs_migration', False):
                files_needing_migration.append((file_path, analysis))
        
        print(f"üéØ –§–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–∏: {len(files_needing_migration)}")
        print()
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
        if files_needing_migration:
            print("üîÑ –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é...")
            
            for file_path, analysis in files_needing_migration:
                migrated = self.migrate_file(file_path)
                
                if migrated and self.verbose:
                    print(f"  üìù {os.path.relpath(file_path)}")
        
        return self.stats
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"–§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['files_processed']}")
        print(f"–§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {self.stats['files_modified']}")
        print(f"Import –∑–∞–º–µ–Ω–µ–Ω–æ: {self.stats['import_replacements']}")
        print(f"Logger –∑–∞–º–µ–Ω–µ–Ω–æ: {self.stats['logger_replacements']}")
        print(f"–û—à–∏–±–æ–∫: {self.stats['errors']}")
        print()
        
        if self.stats['files_modified'] > 0:
            if self.dry_run:
                print("üîç DRY RUN –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.")
            else:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print()
                print("üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
                print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã: python -c \"from main import *\"")
                print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python -m pytest tests/unit/test_middleware.py")
                print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API: python main.py")
        else:
            print("‚ÑπÔ∏è –§–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
    )
    parser.add_argument(
        '--dry-run', 
        action='store_true', 
        help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"
    )
    parser.add_argument(
        '--root-dir',
        default='.',
        help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)"
    )
    
    args = parser.parse_args()
    
    migrator = LoggingMigrator(dry_run=args.dry_run, verbose=args.verbose)
    
    try:
        stats = migrator.run_migration(args.root_dir)
        migrator.print_summary()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
        if stats['errors'] > 0:
            sys.exit(1)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 