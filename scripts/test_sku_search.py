#!/usr/bin/env python3

"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ SKU
–≠–¢–ê–ü 6: –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–∏—Å–∫ SKU –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""

import asyncio
import time
import logging
from services.sku_search_service import get_sku_search_service
from services.combined_embedding_service import get_combined_embedding_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(name)s - %(message)s')

async def test_sku_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ SKU –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ SKU...")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    sku_service = get_sku_search_service()
    embedding_service = get_combined_embedding_service()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    connection_ok = await sku_service.test_connection()
    
    if not connection_ok:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return
    print("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ SKU
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ SKU...")
    print("=" * 80)
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
    test_cases = [
        {
            "name": "–¶–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π –±–µ–ª—ã–π",
            "unit": "–∫–≥", 
            "color": "–±–µ–ª—ã–π",
            "expected_sku_pattern": "CEM"
        }
    ]
    
    total_tests = len(test_cases)
    successful_tests = 0
    
    for i, test_case in enumerate(test_cases, 1):
        material_name = test_case["name"]
        normalized_unit = test_case["unit"]
        normalized_color = test_case["color"]
        expected_pattern = test_case["expected_sku_pattern"]
        
        print(f"\nüìã –¢–µ—Å—Ç {i}/{total_tests}: {material_name}")
        print(f"   –ï–¥–∏–Ω–∏—Ü–∞: {normalized_unit}")
        print(f"   –¶–≤–µ—Ç: {normalized_color if normalized_color else '–ª—é–±–æ–π'}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π SKU –ø–∞—Ç—Ç–µ—Ä–Ω: {expected_pattern}")
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ SKU
        try:
            result = await sku_service.find_sku_by_material_data(
                material_name=material_name,
                normalized_unit=normalized_unit,
                normalized_color=normalized_color
            )
            
            processing_time = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result.found_sku:
                if expected_pattern and result.found_sku.startswith(expected_pattern):
                    print(f"   ‚úÖ SKU –Ω–∞–π–¥–µ–Ω: {result.found_sku}")
                    successful_tests += 1
                else:
                    print(f"   ‚ö†Ô∏è SKU –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: {result.found_sku} (–æ–∂–∏–¥–∞–ª—Å—è {expected_pattern})")
            else:
                if expected_pattern is None:
                    print(f"   ‚úÖ SKU –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    successful_tests += 1  
                else:
                    print(f"   ‚ùå SKU –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"   üîç –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ü–µ–Ω–µ–Ω–æ: {result.candidates_evaluated}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.3f}s")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            if result.best_match:
                print(f"   üèÜ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç:")
                print(f"      - SKU: {result.best_match.sku}")
                print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {result.best_match.material_name}")
                print(f"      - –ï–¥–∏–Ω–∏—Ü–∞: {result.best_match.normalized_unit}")
                print(f"      - –¶–≤–µ—Ç: {result.best_match.normalized_color}")
                print(f"      - –°—Ö–æ–¥—Å—Ç–≤–æ: {result.best_match.similarity_score:.4f}")
                print(f"      - Unit match: {result.best_match.unit_match}")
                print(f"      - Color match: {result.best_match.color_match}")
                print(f"      - Overall match: {result.best_match.overall_match}")
                
        except Exception as e:
            processing_time = time.time() - start_time
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.3f}s")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
    print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    performance_tests = ["–¶–µ–º–µ–Ω—Ç"]
    
    for material_name in performance_tests:
        start_time = time.time()
        try:
            result = await sku_service.find_sku_by_material_data(
                material_name=material_name,
                normalized_unit="–∫–≥",
                normalized_color=None
            )
            processing_time = time.time() - start_time
            print(f"   ‚è±Ô∏è {material_name}: {processing_time:.3f}s")
        except Exception as e:
            processing_time = time.time() - start_time
            print(f"   ‚ùå {material_name}: {processing_time:.3f}s (–æ—à–∏–±–∫–∞: {e})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    print("\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    cache_stats = sku_service.embedding_service.get_cache_statistics()
    print(f"   üìã –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {cache_stats.get('cache_size', 0)}")
    
    vector_db_health = await sku_service.vector_db.health_check()
    print(f"   üîå Vector DB –¥–æ—Å—Ç—É–ø–Ω–∞: {vector_db_health.get('status') == 'healthy'}")
    
    config = sku_service.config
    print(f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"      - –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {config.similarity_threshold}")
    print(f"      - –ú–∞–∫—Å. –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {config.max_candidates}")
    print(f"      - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {config.reference_collection}")
    
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ SKU –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_sku_search()) 