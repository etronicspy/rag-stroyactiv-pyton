#!/usr/bin/env python3

"""
–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""

import asyncio
import time
from typing import List, Dict, Any
from core.database.factories import DatabaseFactory
from services.combined_embedding_service import CombinedEmbeddingService
from core.schemas.pipeline_models import CombinedEmbeddingRequest

async def regenerate_all_embeddings():
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ"""
    
    print("üîÑ –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –≠–ú–ë–ï–î–î–ò–ù–ì–û–í –°–ü–†–ê–í–û–ß–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        vector_db = DatabaseFactory.create_vector_database()
        embedding_service = CombinedEmbeddingService()
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'materials'...")
        all_records = await vector_db.scroll_all("materials", with_payload=True, with_vectors=False)
        
        if not all_records:
            print("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(all_records)}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        updated_count = 0
        error_count = 0
        batch_size = 10
        start_time = time.time()
        
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        print()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏
        for i in range(0, len(all_records), batch_size):
            batch = all_records[i:i + batch_size]
            batch_start_time = time.time()
            
            print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i//batch_size + 1}/{(len(all_records) + batch_size - 1)//batch_size}")
            print(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {i+1}-{min(i+batch_size, len(all_records))}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∞
            batch_materials = []
            batch_ids = []
            
            for record in batch:
                payload = record.get("payload", {})
                record_id = record.get("id")
                
                # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                material = CombinedEmbeddingRequest(
                    material_name=payload.get("name", ""),
                    normalized_unit=payload.get("unit", ""),
                    normalized_color=None  # –í –Ω–∞—à–µ–π –ë–î –Ω–µ—Ç —Ü–≤–µ—Ç–æ–≤
                )
                
                batch_materials.append(material)
                batch_ids.append(record_id)
            
            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –±–∞—Ç—á–∞
                print(f"   üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(batch_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
                batch_response = await embedding_service.generate_batch_embeddings(batch_materials)
                
                if len(batch_response.results) != len(batch_materials):
                    print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω–æ {len(batch_response.results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {len(batch_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                
                # –û–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant
                print(f"   üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ Qdrant...")
                print(f"   üìà –£—Å–ø–µ—à–Ω–æ: {batch_response.successful_count}, –æ—à–∏–±–æ–∫: {batch_response.failed_count}")
                
                for j, (material, result, record_id) in enumerate(zip(batch_materials, batch_response.results, batch_ids)):
                    try:
                        # –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        original_payload = batch[j].get("payload", {})
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
                        if not result.success or not result.material_embedding:
                            print(f"     ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª {material.material_name}: —ç–º–±–µ–¥–¥–∏–Ω–≥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                            error_count += 1
                            continue
                        
                        # –û–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        await vector_db.upsert(
                            collection_name="materials",
                            vectors=[{
                                "id": record_id,
                                "vector": result.material_embedding,
                                "payload": {
                                    "name": original_payload.get("name", ""),
                                    "sku": original_payload.get("sku", ""),
                                    "unit": original_payload.get("unit", ""),
                                    "description": original_payload.get("description", ""),
                                    "use_category": original_payload.get("use_category", ""),
                                    "created_at": original_payload.get("created_at", ""),
                                    "updated_at": original_payload.get("updated_at", "")
                                }
                            }]
                        )
                        
                        updated_count += 1
                        
                        if (j + 1) % 5 == 0:
                            print(f"     ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {j + 1}/{len(batch_materials)} –≤ —Ç–µ–∫—É—â–µ–º –±–∞—Ç—á–µ")
                        
                    except Exception as e:
                        print(f"     ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.material_name}: {e}")
                        error_count += 1
                
                batch_time = time.time() - batch_start_time
                print(f"   ‚è±Ô∏è  –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {batch_time:.2f} —Å–µ–∫")
                print()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
                error_count += len(batch_materials)
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        
        print("üéâ –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –≠–ú–ë–ï–î–î–ò–ù–ì–û–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_records)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(all_records)/total_time:.2f} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤/—Å–µ–∫")
        print()
        
        if updated_count > 0:
            print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–´–• –≠–ú–ë–ï–î–î–ò–ù–ì–û–í:")
            await test_updated_embeddings(vector_db, embedding_service)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_updated_embeddings(vector_db, embedding_service):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        test_queries = [
            "—Ü–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π",
            "–∞—Ä–º–∞—Ç—É—Ä–∞ 12–º–º",
            "–±–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π",
            "–∫—Ä–∞—Å–∫–∞ –±–µ–ª–∞—è"
        ]
        
        print("üîç –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
        
        for query in test_queries:
            print(f"\n   üîé –ó–∞–ø—Ä–æ—Å: '{query}'")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_result = await embedding_service.generate_material_embedding(
                material_name=query,
                normalized_unit="—à—Ç",
                normalized_color=None
            )
            
            query_embedding = query_result.material_embedding
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            results = await vector_db.search(
                collection_name="materials",
                query_vector=query_embedding,
                limit=3
            )
            
            if results:
                print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
                for i, result in enumerate(results[:3], 1):
                    payload = result.get("payload", {})
                    score = result.get("score", 0)
                    print(f"     {i}. {payload.get('name', 'N/A')} (similarity: {score:.3f})")
            else:
                print("   ‚ùå –ü–æ—Ö–æ–∂–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(regenerate_all_embeddings()) 