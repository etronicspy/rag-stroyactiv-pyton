#!/usr/bin/env python3
"""
üö® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í –ò–ú–ï–ù –§–ê–ô–õ–û–í

–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ 
—Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ Python.

Usage:
    python scripts/check_filename_conflicts.py [--strict] [--fix] [--report]
"""

import os
import sys
import argparse
import json
from pathlib import Path
from typing import List, Dict, Set, Tuple, Optional
import importlib.util
import traceback

# üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –ò–ú–ï–ù–ê –§–ê–ô–õ–û–í
CRITICAL_CONFLICTS = {
    # === CORE PYTHON MODULES ===
    "os.py", "sys.py", "time.py", "json.py", "logging.py", "typing.py", 
    "pathlib.py", "collections.py", "functools.py", "itertools.py", 
    "operator.py", "re.py", "math.py", "datetime.py", "random.py",
    "string.py", "io.py", "csv.py", "sqlite3.py", "urllib.py", "http.py",
    "email.py", "html.py", "xml.py", "multiprocessing.py", "threading.py",
    "asyncio.py", "subprocess.py", "shutil.py", "tempfile.py", "glob.py",
    "pickle.py", "copy.py", "heapq.py", "bisect.py", "array.py", "struct.py",
    "binascii.py", "base64.py", "hashlib.py", "hmac.py", "secrets.py",
    "uuid.py", "decimal.py", "fractions.py", "statistics.py", "socket.py",
    "ssl.py", "select.py", "signal.py", "mmap.py", "ctypes.py", "platform.py",
    "getpass.py", "traceback.py", "warnings.py", "contextlib.py", "abc.py",
    "atexit.py", "weakref.py", "gc.py", "inspect.py", "types.py", "enum.py",
    "dataclasses.py", "keyword.py", "token.py", "tokenize.py", "ast.py",
    
    # === TESTING & DEBUGGING ===
    "unittest.py", "doctest.py", "pdb.py", "profile.py", "pstats.py",
    "timeit.py", "cProfile.py", "trace.py", "test.py",
    
    # === FILE & COMPRESSION ===
    "zipfile.py", "tarfile.py", "gzip.py", "bz2.py", "lzma.py", "zlib.py",
    
    # === CONFIGURATION & ARGS ===
    "configparser.py", "argparse.py", "optparse.py", "getopt.py",
    
    # === TEXT PROCESSING ===
    "formatter.py", "textwrap.py", "unicodedata.py", "stringprep.py",
    "readline.py", "rlcompleter.py",
    
    # === CONCURRENCY ===
    "queue.py", "sched.py", "calendar.py", "locale.py", "gettext.py",
    "codecs.py", "encodings.py",
    
    # === IMPORT SYSTEM ===
    "imp.py", "zipimport.py", "pkgutil.py", "modulefinder.py", "runpy.py",
    "importlib.py", "parser.py", "symbol.py", "compileall.py"
}

# ‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–ü–ê–°–ù–´–ï –ò–ú–ï–ù–ê
POTENTIALLY_DANGEROUS = {
    "config.py": "app_config.py, settings.py, configuration.py",
    "constants.py": "app_constants.py, project_constants.py",
    "exceptions.py": "custom_exceptions.py, app_exceptions.py",
    "utils.py": "helpers.py, utilities.py, common.py",
    "base.py": "base_classes.py, abstract_base.py, foundation.py",
    "helpers.py": "utilities.py, common.py, tools.py",
    "models.py": "data_models.py, domain_models.py, entities.py",
    "views.py": "api_views.py, web_views.py, endpoints.py"
}

# üìÅ –î–ò–†–ï–ö–¢–û–†–ò–ò –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ò–ó –ü–†–û–í–ï–†–ö–ò
EXCLUDED_DIRS = {
    ".git", "__pycache__", ".venv", "venv", ".env", "node_modules",
    ".pytest_cache", ".mypy_cache", ".tox", "build", "dist", 
    ".eggs", "*.egg-info", ".coverage", "htmlcov"
}


class ConflictChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        self.critical_conflicts: List[Tuple[str, str]] = []
        self.potential_conflicts: List[Tuple[str, str, str]] = []
        self.all_python_files: List[Path] = []
        
    def scan_python_files(self) -> List[Path]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
        python_files = []
        
        for root, dirs, files in os.walk(self.project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ EXCLUDED_DIRS
            dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    python_files.append(file_path)
        
        self.all_python_files = python_files
        return python_files
    
    def check_critical_conflicts(self) -> List[Tuple[str, str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω."""
        conflicts = []
        
        for file_path in self.all_python_files:
            filename = file_path.name
            
            if filename in CRITICAL_CONFLICTS:
                relative_path = file_path.relative_to(self.project_root)
                conflicts.append((str(relative_path), filename))
        
        self.critical_conflicts = conflicts
        return conflicts
    
    def check_potential_conflicts(self) -> List[Tuple[str, str, str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω."""
        conflicts = []
        
        for file_path in self.all_python_files:
            filename = file_path.name
            
            if filename in POTENTIALLY_DANGEROUS:
                relative_path = file_path.relative_to(self.project_root)
                alternatives = POTENTIALLY_DANGEROUS[filename]
                conflicts.append((str(relative_path), filename, alternatives))
        
        self.potential_conflicts = conflicts
        return conflicts
    
    def test_import_conflicts(self) -> List[Tuple[str, str, str]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤."""
        import_conflicts = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π sys.path
        original_path = sys.path.copy()
        
        try:
            for file_path in self.all_python_files:
                filename = file_path.name
                module_name = filename[:-3]  # —É–±–∏—Ä–∞–µ–º .py
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –≤ sys.path
                file_dir = str(file_path.parent)
                if file_dir not in sys.path:
                    sys.path.insert(0, file_dir)
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å
                    if module_name in [f[:-3] for f in CRITICAL_CONFLICTS]:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å
                            spec = importlib.util.find_spec(module_name)
                            if spec and spec.origin:
                                # –ï—Å–ª–∏ spec.origin —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—à —Ñ–∞–π–ª, —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
                                if str(file_path) in spec.origin:
                                    relative_path = file_path.relative_to(self.project_root)
                                    import_conflicts.append((
                                        str(relative_path),
                                        module_name,
                                        f"Conflicts with stdlib module {module_name}"
                                    ))
                        except Exception as e:
                            # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –ø–∞–¥–∞–µ—Ç, —ç—Ç–æ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
                            pass
                            
                except Exception:
                    pass
                
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sys.path
            sys.path = original_path
        
        return import_conflicts
    
    def generate_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö."""
        return {
            "project_root": str(self.project_root),
            "total_python_files": len(self.all_python_files),
            "critical_conflicts": {
                "count": len(self.critical_conflicts),
                "files": [{"path": path, "filename": name} for path, name in self.critical_conflicts]
            },
            "potential_conflicts": {
                "count": len(self.potential_conflicts),
                "files": [
                    {"path": path, "filename": name, "alternatives": alt} 
                    for path, name, alt in self.potential_conflicts
                ]
            },
            "recommendations": self._generate_recommendations()
        }
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é."""
        recommendations = []
        
        if self.critical_conflicts:
            recommendations.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏!")
            for path, filename in self.critical_conflicts:
                if filename == "logging.py":
                    recommendations.append(f"  {path} ‚Üí log_config.py –∏–ª–∏ logger_config.py")
                elif filename == "types.py":
                    recommendations.append(f"  {path} ‚Üí type_definitions.py –∏–ª–∏ data_types.py")
                elif filename == "config.py":
                    recommendations.append(f"  {path} ‚Üí app_config.py –∏–ª–∏ settings.py")
                else:
                    recommendations.append(f"  {path} ‚Üí {filename.replace('.py', '_module.py')}")
        
        if self.potential_conflicts:
            recommendations.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            for path, filename, alternatives in self.potential_conflicts:
                recommendations.append(f"  {path} ‚Üí {alternatives}")
        
        if not self.critical_conflicts and not self.potential_conflicts:
            recommendations.append("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        
        return recommendations
    
    def auto_fix_conflicts(self, dry_run: bool = True) -> List[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤ —Ä–µ–∂–∏–º–µ dry-run)."""
        fixes = []
        
        for path, filename in self.critical_conflicts:
            old_path = self.project_root / path
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
            if filename == "logging.py":
                new_filename = "log_config.py"
            elif filename == "types.py":
                new_filename = "type_definitions.py"
            elif filename == "config.py":
                new_filename = "app_config.py"
            else:
                new_filename = filename.replace('.py', '_module.py')
            
            new_path = old_path.parent / new_filename
            
            if dry_run:
                fixes.append(f"WOULD RENAME: {path} ‚Üí {new_path.relative_to(self.project_root)}")
            else:
                try:
                    old_path.rename(new_path)
                    fixes.append(f"RENAMED: {path} ‚Üí {new_path.relative_to(self.project_root)}")
                except Exception as e:
                    fixes.append(f"FAILED: {path} - {str(e)}")
        
        return fixes


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ Python"
    )
    parser.add_argument(
        "--strict", 
        action="store_true", 
        help="–°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"
    )
    parser.add_argument(
        "--fix", 
        action="store_true", 
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã"
    )
    parser.add_argument(
        "--dry-run", 
        action="store_true", 
        help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    )
    parser.add_argument(
        "--report", 
        type=str, 
        help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª"
    )
    parser.add_argument(
        "--project-root", 
        type=str, 
        default=".", 
        help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)"
    )
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä—â–∏–∫
    checker = ConflictChecker(args.project_root)
    
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Ñ–∞–π–ª–æ–≤...")
    python_files = checker.scan_python_files()
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    print("\nüö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
    critical = checker.check_critical_conflicts()
    
    print("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
    potential = checker.check_potential_conflicts()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = checker.generate_report()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –û –ö–û–ù–§–õ–ò–ö–¢–ê–• –ò–ú–ï–ù –§–ê–ô–õ–û–í")
    print("="*60)
    
    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {report['project_root']}")
    print(f"üìÑ –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤: {report['total_python_files']}")
    
    if report['critical_conflicts']['count'] > 0:
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ù–§–õ–ò–ö–¢–´: {report['critical_conflicts']['count']}")
        for file_info in report['critical_conflicts']['files']:
            print(f"   ‚ùå {file_info['path']} (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å {file_info['filename'][:-3]})")
    
    if report['potential_conflicts']['count'] > 0:
        print(f"\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ù–§–õ–ò–ö–¢–´: {report['potential_conflicts']['count']}")
        for file_info in report['potential_conflicts']['files']:
            print(f"   ‚ö†Ô∏è {file_info['path']}")
            print(f"      –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {file_info['alternatives']}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for rec in report['recommendations']:
        print(f"   {rec}")
    
    # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if args.fix or args.dry_run:
        print(f"\nüîß {'–†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê' if args.dry_run else '–ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï'}:")
        fixes = checker.auto_fix_conflicts(dry_run=args.dry_run)
        for fix in fixes:
            print(f"   {fix}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if args.report:
        with open(args.report, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {args.report}")
    
    # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
    if args.strict and (critical or potential):
        print(f"\n‚ùå –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã!")
        sys.exit(1)
    
    if not critical and not potential:
        print(f"\n‚úÖ –û–¢–õ–ò–ß–ù–û: –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        sys.exit(0)
    else:
        print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        sys.exit(1 if critical else 0)


if __name__ == "__main__":
    main() 