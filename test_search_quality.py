#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
"""

import requests
import json
import time
from typing import List, Dict, Any

BASE_URL = "http://localhost:8000/api/v1"

def test_search_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    test_queries = {
        "—Ü–µ–º–µ–Ω—Ç": ["–¶–µ–º–µ–Ω—Ç", "–ë–µ—Ç–æ–Ω"],  # –û–∂–∏–¥–∞–µ–º —Ü–µ–º–µ–Ω—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        "–∞—Ä–º–∞—Ç—É—Ä–∞": ["–ê—Ä–º–∞—Ç—É—Ä–∞", "–ú–µ—Ç–∞–ª–ª"],  # –û–∂–∏–¥–∞–µ–º –∞—Ä–º–∞—Ç—É—Ä—É –∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è
        "–∫–∏—Ä–ø–∏—á": ["–ö–∏—Ä–ø–∏—á", "–ö–∞–º–µ–Ω—å"],  # –û–∂–∏–¥–∞–µ–º –∫–∏—Ä–ø–∏—á –∏ –∫–∞–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        "–±–µ—Ç–æ–Ω": ["–ë–µ—Ç–æ–Ω", "–¶–µ–º–µ–Ω—Ç"],  # –û–∂–∏–¥–∞–µ–º –±–µ—Ç–æ–Ω –∏ —Ü–µ–º–µ–Ω—Ç–Ω—ã–µ —Å–º–µ—Å–∏
        "–º–µ—Ç–∞–ª–ª": ["–ú–µ—Ç–∞–ª–ª", "–ê—Ä–º–∞—Ç—É—Ä–∞"],  # –û–∂–∏–¥–∞–µ–º –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": None,  # –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å - –ª—é–±—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Ö–æ–¥—è—Ç
        "cement": ["–¶–µ–º–µ–Ω—Ç", "–ë–µ—Ç–æ–Ω"],  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        "—Å—Ç–∞–ª—å–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞": ["–ê—Ä–º–∞—Ç—É—Ä–∞", "–ú–µ—Ç–∞–ª–ª"],  # –°–æ—Å—Ç–∞–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ—Å—å": ["–¶–µ–º–µ–Ω—Ç", "–ë–µ—Ç–æ–Ω"],  # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
        "M400": ["–¶–µ–º–µ–Ω—Ç"],  # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ
    }
    
    print("=" * 60)
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    overall_results = {
        "total_queries": len(test_queries),
        "successful_queries": 0,
        "relevant_results": 0,
        "total_results": 0,
        "avg_response_time": 0,
        "embedding_type": "unknown"
    }
    
    response_times = []
    
    for query, expected_categories in test_queries.items():
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: '{query}'")
        
        start_time = time.time()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = requests.get(
                f"{BASE_URL}/search/",
                params={"q": query, "limit": 5},
                timeout=10
            )
            
            response_time = (time.time() - start_time) * 1000
            response_times.append(response_time)
            
            if response.status_code == 200:
                results = response.json()
                overall_results["successful_queries"] += 1
                overall_results["total_results"] += len(results)
                
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms")
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                
                if results:
                    print("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    relevant_count = 0
                    
                    for i, result in enumerate(results, 1):
                        name = result.get("name", "")
                        category = result.get("use_category", "")
                        description = (result.get("description") or "")[:50]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                        is_relevant = False
                        if expected_categories is None:  # –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å
                            is_relevant = True
                        elif any(exp_cat.lower() in category.lower() for exp_cat in expected_categories):
                            is_relevant = True
                        elif any(exp_cat.lower() in name.lower() for exp_cat in expected_categories):
                            is_relevant = True
                        
                        if is_relevant:
                            relevant_count += 1
                            print(f"      ‚úÖ {i}. {name} [{category}] - {description}...")
                        else:
                            print(f"      ‚ùå {i}. {name} [{category}] - {description}...")
                    
                    overall_results["relevant_results"] += relevant_count
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    precision = (relevant_count / len(results)) * 100 if results else 0
                    print(f"   üìà –¢–æ—á–Ω–æ—Å—Ç—å: {precision:.1f}% ({relevant_count}/{len(results)})")
                    
                else:
                    print("   ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    if response_times:
        overall_results["avg_response_time"] = sum(response_times) / len(response_times)
    
    overall_precision = 0
    if overall_results["total_results"] > 0:
        overall_precision = (overall_results["relevant_results"] / overall_results["total_results"]) * 100
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {overall_results['successful_queries']}/{overall_results['total_queries']} "
          f"({(overall_results['successful_queries']/overall_results['total_queries']*100):.1f}%)")
    print(f"üéØ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_precision:.1f}% "
          f"({overall_results['relevant_results']}/{overall_results['total_results']})")
    print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {overall_results['avg_response_time']:.0f}ms")
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    if overall_precision >= 80:
        quality_grade = "–û—Ç–ª–∏—á–Ω–æ–µ"
        quality_emoji = "üåü"
    elif overall_precision >= 60:
        quality_grade = "–•–æ—Ä–æ—à–µ–µ"
        quality_emoji = "üëç"
    elif overall_precision >= 40:
        quality_grade = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
        quality_emoji = "üëå"
    else:
        quality_grade = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
        quality_emoji = "‚ö†Ô∏è"
    
    print(f"{quality_emoji} –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {quality_grade}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    if overall_results["avg_response_time"] > 1000:  # > 1 —Å–µ–∫—É–Ω–¥—ã
        print("üß† –í–µ—Ä–æ—è—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ OpenAI (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)")
    else:
        print("üîß –í–µ—Ä–æ—è—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (–±—ã—Å—Ç—Ä–µ–µ)")
    
    return overall_results

def test_semantic_similarity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å—Ö–æ–∂–µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("üß† –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–•–û–ñ–ï–°–¢–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    similarity_tests = [
        ("—Ü–µ–º–µ–Ω—Ç", "–ø–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç"),
        ("–∞—Ä–º–∞—Ç—É—Ä–∞", "–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞"),
        ("–±–µ—Ç–æ–Ω", "–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω"),
        ("–∫–∏—Ä–ø–∏—á", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–∏—Ä–ø–∏—á"),
        ("cement", "—Ü–µ–º–µ–Ω—Ç"),  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π-—Ä—É—Å—Å–∫–∏–π
    ]
    
    for term1, term2 in similarity_tests:
        print(f"\nüîó –°—Ä–∞–≤–Ω–∏–≤–∞—é: '{term1}' vs '{term2}'")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
            resp1 = requests.get(f"{BASE_URL}/search/", params={"q": term1, "limit": 3})
            resp2 = requests.get(f"{BASE_URL}/search/", params={"q": term2, "limit": 3})
            
            if resp1.status_code == 200 and resp2.status_code == 200:
                results1 = resp1.json()
                results2 = resp2.json()
                
                # –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                names1 = {r.get("name", "") for r in results1}
                names2 = {r.get("name", "") for r in results2}
                
                intersection = names1.intersection(names2)
                union = names1.union(names2)
                
                similarity = len(intersection) / len(union) * 100 if union else 0
                
                print(f"   üìä –°—Ö–æ–∂–µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {similarity:.1f}%")
                if intersection:
                    print(f"   ü§ù –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join(list(intersection)[:3])}")
                else:
                    print("   ‚ùå –û–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{BASE_URL}/health/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
            test_search_quality()
            test_semantic_similarity()
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000") 