# Полный набор правил для мульти-БД RAG Construction Materials API

## Язык и стиль
- Python 3.9+, FastAPI, async/await везде
- PEP 8, type hints, docstrings для всех функций
- Код и идентификаторы: только английский язык
- Документация, комментарии, README: русский и английский
- Pydantic модели: примеры (example, schema_extra) для автодокументации

## Архитектура БД
- Repository pattern для каждого типа БД
- Dependency injection для БД подключений с @lru_cache
- Абстрактные интерфейсы (ABC) для БД операций
- Фабрики клиентов с автоматическим переключением БД
- Поддержка runtime переключения БД через конфигурацию
- Обязательные методы векторных репозиториев: search, upsert, delete, batch_upsert, get_by_id

## Поддерживаемые БД
- PostgreSQL: SQLAlchemy 2.0+ с async, Alembic миграции
- Векторные БД: Qdrant, Weaviate, Pinecone с единым интерфейсом
- Redis: для кеширования и сессий
- Конфигурация: легкое переключение через .env файлы

## API и данные
- Версионирование /api/v1/, pydantic модели
- UTF-8 ответы, обработка ошибок для всех БД
- CSV/Excel: обязательные поля (name, description), ограничение 50MB
- Fallback-стратегия: vector_search → если 0 результатов → SQL LIKE поиск
- Валидация всех входящих данных через Pydantic

## Тестирование и мониторинг
- pytest с фикстурами для каждого типа БД
- Моки для внешних БД в unit тестах
- Интеграционные тесты на реальных БД
- Health checks для всех подключений БД
- Логирование операций с каждой БД

## Безопасность и конфигурация
- .env файлы для каждой среды
- Ротация паролей и ключей БД
- Connection pooling для производительности
- Обработка timeout и retry для всех БД
- Rate limiting через Redis для всех эндпоинтов
- CORS конфигурация для продакшн среды
- Middleware логирования всех входящих запросов
- Ограничение размера запросов и файлов (защита от атак)
- Валидация входящих данных (защита от инъекций)

## Специфичные правила для проекта
- Следовать структуре: api/routes, core/config, services
- Использовать централизованную конфигурацию из core/config
- Все новые эндпоинты должны иметь версионирование (/api/v1/)
- Поддерживать форматы CSV и Excel для прайс-листов
- Использовать UTF-8 для всех ответов API (UTF8JSONResponse)
- Обновлять README.md при добавлении новых функций
- Создавать примеры использования для новых эндпоинтов
- Поддерживать актуальность swagger документации
- Использовать батчинг для загрузки эмбеддингов
- Логировать все операции с векторной БД
- Обязательные примеры в Pydantic схемах
- Health checks с детальной диагностикой всех БД 