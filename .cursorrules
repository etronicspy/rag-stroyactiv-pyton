# Полный набор правил для мульти-БД RAG Construction Materials API

## Язык и стиль
- Python 3.9+, FastAPI, async/await везде
- PEP 8, type hints, docstrings для всех функций
- Код и идентификаторы: только английский язык
- Документация, комментарии, README: русский и английский
- Pydantic модели: примеры (example, schema_extra) для автодокументации

## Архитектура БД
- Repository pattern для каждого типа БД
- Dependency injection для БД подключений с @lru_cache
- Абстрактные интерфейсы (ABC) для БД операций
- Фабрики клиентов с автоматическим переключением БД
- Поддержка runtime переключения БД через конфигурацию
- Обязательные методы векторных репозиториев: search, upsert, delete, batch_upsert, get_by_id

## Поддерживаемые БД
- PostgreSQL: SQLAlchemy 2.0+ с async, Alembic миграции
- Векторные БД: Qdrant, Weaviate, Pinecone с единым интерфейсом
- Redis: для кеширования и сессий
- Конфигурация: легкое переключение через .env файлы

## API и данные
- Версионирование /api/v1/, pydantic модели
- UTF-8 ответы, обработка ошибок для всех БД
- CSV/Excel: обязательные поля (name, description), ограничение 50MB
- Fallback-стратегия: vector_search → если 0 результатов → SQL LIKE поиск
- Валидация всех входящих данных через Pydantic

## Тестирование и мониторинг
- pytest с фикстурами для каждого типа БД
- Моки для внешних БД в unit тестах
- Интеграционные тесты на реальных БД
- Health checks для всех подключений БД
- Логирование операций с каждой БД
- Functional тесты должны использовать mock-клиенты для изоляции от реальных API
- Integration тесты могут использовать реальные API при наличии рабочих ключей
- При ошибках подключения в тестах - переключаться на mock-режим
- Добавлять проверки доступности API перед запуском интеграционных тестов

## Безопасность и конфигурация
- .env файлы для каждой среды
- Ротация паролей и ключей БД
- Connection pooling для производительности
- Обработка timeout и retry для всех БД
- Rate limiting через Redis для всех эндпоинтов
- CORS конфигурация для продакшн среды
- Middleware логирования всех входящих запросов
- Ограничение размера запросов и файлов (защита от атак)
- Валидация входящих данных (защита от инъекций)

## Конфигурация среды разработки
- Файл .env.local существует с рабочими настройками реальных API
- QDRANT_URL, QDRANT_API_KEY, OPENAI_API_KEY настроены на реальные сервисы
- Не создавать новые .env файлы без необходимости - использовать существующий .env.local
- При ошибках подключения проверять логику кода, а не конфигурацию API ключей
- Добавлять timeout и retry настройки для повышения стабильности подключений

## Работа с конфигурационными файлами
- Файл .env.local защищен от редактирования и содержит реальные API ключи
- При необходимости изменить настройки .env.local - вносить изменения в env.example
- После изменений в env.example - остановиться и ждать подтверждения пользователя о ручном переносе изменений в .env.local  
- Не пытаться напрямую редактировать .env.local через инструменты - он заблокирован для безопасности
- Использовать env.example как шаблон для демонстрации необходимых настроек

## Отладка и диагностика
- При ошибках "[Errno 8] nodename nor servname provided" - проверять логику подключения, не конфигурацию
- Использовать LOG_LEVEL=DEBUG для детальной диагностики подключений
- Добавлять дополнительные timeout настройки (QDRANT_TIMEOUT, OPENAI_TIMEOUT)
- Увеличивать OPENAI_MAX_RETRIES при нестабильных подключениях
- Включать ENABLE_FALLBACK_DATABASES для graceful degradation
- Логировать все попытки подключения к внешним API с деталями ошибок

## Документирование разработки
- Обязательные ADR (Architecture Decision Records) для архитектурных изменений
- Документирование интеграций с новыми БД (примеры, особенности)
- README для каждого модуля со сложной логикой
- Inline-комментарии для нетривиальных алгоритмов (особенно векторный поиск)

## Техническая отчётность
- Запрет на детальные отчеты о рутинной очистке/рефакторинге
- Обязательно документировать: изменения производительности БД, миграции данных, изменения алгоритмов поиска
- Использовать git commit messages для мелких улучшений вместо отдельных документов

## Специфичные правила для проекта
- Следовать структуре: api/routes, core/config, services
- Использовать централизованную конфигурацию из core/config
- Все новые эндпоинты должны иметь версионирование (/api/v1/)
- Поддерживать форматы CSV и Excel для прайс-листов
- Использовать UTF-8 для всех ответов API (UTF8JSONResponse)
- Обновлять README.md при добавлении новых функций
- Создавать примеры использования для новых эндпоинтов
- Поддерживать актуальность swagger документации
- Использовать батчинг для загрузки эмбеддингов
- Логировать все операции с векторной БД
- Обязательные примеры в Pydantic схемах
- Health checks с детальной диагностикой всех БД
- Не изменять существующий .env.local без крайней необходимости
- При отладке подключений использовать увеличенные timeout значения
- Реальные API ключи уже настроены - фокусироваться на логике приложения
- Создавать планы отладки (PROJECT_DEBUG_PREPARATION_PLAN.md) для системного анализа проблем 