"""
Body Cache Middleware –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è request body.

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞–≤–∏—Å–∞–Ω–∏–π –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö middleware —á–∏—Ç–∞—Ç—å –æ–¥–∏–Ω request body.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Starlette.
"""

import json
from core.logging import get_logger
from typing import Optional

from starlette.types import ASGIApp, Receive, Scope, Send, Message

logger = get_logger(__name__)


class BodyCacheMiddleware:
    """
    üî• –ü–†–ê–í–ò–õ–¨–ù–´–ô ASGI middleware –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è request body.
    
    –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Starlette:
    https://www.starlette.io/middleware/#inspecting-or-modifying-the-request
    """
    
    def __init__(
        self, 
        app: ASGIApp,
        max_body_size: int = 10 * 1024 * 1024,  # 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        methods_to_cache: list[str] = None
    ):
        self.app = app
        self.max_body_size = max_body_size
        self.methods_to_cache = methods_to_cache or ["POST", "PUT", "PATCH"]
        
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:
        """
        üî• –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ASGI middleware entry point.
        """
        if scope["type"] != "http":
            await self.app(scope, receive, send)
            return
            
        method = scope.get("method", "GET")
        
        # –ö–µ—à–∏—Ä—É–µ–º body —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
        if method in self.methods_to_cache:
            # üî• –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–∞—Ç—Ç–µ—Ä–Ω: wrapping receive callable
            body_size = 0
            cached_body = b""
            
            async def receive_wrapper() -> Message:
                nonlocal body_size, cached_body
                
                message = await receive()
                
                if message["type"] == "http.request":
                    body_part = message.get("body", b"")
                    body_size += len(body_part)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                    if body_size <= self.max_body_size:
                        cached_body += body_part
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π chunk, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ scope
                        if not message.get("more_body", False):
                            scope["_cached_body"] = {
                                "available": True,
                                "bytes": cached_body,
                                "str": cached_body.decode('utf-8', errors='ignore') if cached_body else ""
                            }
                            logger.debug(f"Body cached, size: {len(cached_body)} bytes")
                    else:
                        # Body —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                        if not hasattr(scope, "_cached_body"):
                            scope["_cached_body"] = {
                                "available": False,
                                "bytes": b"",
                                "str": "",
                                "error": "Body too large"
                            }
                            logger.warning(f"Request body too large: {body_size} bytes, limit: {self.max_body_size}")
                
                return message
            
            await self.app(scope, receive_wrapper, send)
        else:
            # –î–ª—è GET –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑ body
            scope["_cached_body"] = {"available": False, "bytes": b"", "str": ""}
            await self.app(scope, receive, send)


def get_cached_body_bytes(request) -> Optional[bytes]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π body –≤ –≤–∏–¥–µ bytes –∏–∑ scope.
    """
    if hasattr(request, "scope") and "_cached_body" in request.scope:
        cache = request.scope["_cached_body"]
        if cache.get("available", False):
            return cache.get("bytes", b"")
    return None


def get_cached_body_str(request) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π body –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ scope.
    """
    if hasattr(request, "scope") and "_cached_body" in request.scope:
        cache = request.scope["_cached_body"]
        if cache.get("available", False):
            return cache.get("str", "")
    return None


async def get_cached_body_json(request) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π body –∫–∞–∫ JSON –∏–∑ scope.
    """
    try:
        body_str = get_cached_body_str(request)
        if body_str:
            return json.loads(body_str)
        return None
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse cached body as JSON: {e}")
        return None 