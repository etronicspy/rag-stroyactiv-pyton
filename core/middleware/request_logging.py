"""
Unified request logging middleware using core monitoring system.
Eliminates code duplication by leveraging core/monitoring/logger.py components.

ARCHITECTURE: Integrated with core.monitoring.logger for consistency
"""

import time
import uuid
import sys
import logging
from typing import Optional, Dict, Any, List, Callable, Union
import traceback
import os
from pathlib import Path

from starlette.types import ASGIApp, Receive, Scope, Send, Message
from starlette.requests import Request
from starlette.responses import Response as StarletteResponse

from core.config import get_settings, Settings
from core.monitoring.unified_manager import get_unified_logging_manager
from core.monitoring.context import CorrelationContext, set_correlation_id
from core.monitoring.performance_optimizer import get_performance_optimizer
from core.monitoring.logger import get_logger
from core.logging.context.correlation import get_correlation_id
from core.logging.managers.unified import UnifiedLoggingManager


def safe_log(logger, level: str, message: str, extra: Optional[Dict[str, Any]] = None, correlation_id: Optional[str] = None):
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï —Å fallback –≤ stderr.
    
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ —Å–±–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞.
    
    Args:
        logger: –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO, ERROR, etc.)
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        extra: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        correlation_id: ID –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(logger, level.lower()):
            log_method = getattr(logger, level.lower())
            if extra:
                log_method(message, extra=extra)
            else:
                log_method(message)
        else:
            logger.log(getattr(logging, level.upper()), message, extra=extra or {})
    except Exception as primary_error:
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FALLBACK: –í—ã–≤–æ–¥ –≤ stderr
        try:
            import json
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
            fallback_data = {
                "timestamp": timestamp,
                "level": level,
                "message": message,
                "correlation_id": correlation_id or "unknown",
                "extra": extra or {},
                "fallback_reason": f"Primary logger failed: {str(primary_error)}"
            }
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ stderr
            sys.stderr.write(f"[FALLBACK-LOG] {json.dumps(fallback_data, ensure_ascii=False)}\n")
            sys.stderr.flush()
        except Exception as fallback_error:
            # üö® –ü–û–°–õ–ï–î–ù–Ø–Ø –õ–ò–ù–ò–Ø –û–ë–û–†–û–ù–´: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ stderr
            try:
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                fallback_message = f"[FALLBACK-LOG] {timestamp} [{level}] {message} (correlation_id: {correlation_id or 'unknown'})\n"
                sys.stderr.write(fallback_message)
                sys.stderr.flush()
            except Exception:
                # –ï—Å–ª–∏ –¥–∞–∂–µ stderr –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å
                pass


def should_exclude_path(path: str) -> bool:
    """
    üõ°Ô∏è –°–£–ü–ï–†-–ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Exact matches: /health
    - Prefix patterns: /docs*  
    - Suffix patterns: */health
    - Wildcard patterns: /api/*/health/*
    - Path segments: health (matches any path containing 'health')
    - Regex patterns: ^/api/v\d+/health$
    
    –ì–ê–†–ê–ù–¢–ò–Ø: –§—É–Ω–∫—Ü–∏—è –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∞–¥–∞–µ—Ç –∏ –Ω–µ –ª–æ–º–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    import sys
    
    # üö® –í–•–û–î–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    try:
        if not path or not isinstance(path, str):
            sys.stderr.write(f"[PATH-FILTER-WARNING] Invalid path type: {type(path)}. Allowing logging.\n")
            sys.stderr.flush()
            return False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        normalized_path = path.strip()
        if not normalized_path:
            sys.stderr.write(f"[PATH-FILTER-WARNING] Empty path after normalization. Allowing logging.\n")
            sys.stderr.flush()
            return False
            
    except Exception as validation_error:
        sys.stderr.write(f"[PATH-FILTER-CRITICAL] Path validation failed: {validation_error}. Allowing logging.\n")
        sys.stderr.flush()
        return False
    
    # üîß –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö: –° –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback
    try:
        from core.config import get_settings
        settings = get_settings()
    except Exception as settings_error:
        sys.stderr.write(f"[PATH-FILTER-ERROR] Settings access failed: {settings_error}. Allowing logging.\n")
        sys.stderr.flush()
        return False
    
    try:
        exclude_paths = getattr(settings, 'LOG_EXCLUDE_PATHS', [])
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º exclude_paths
        if not isinstance(exclude_paths, (list, tuple)):
            sys.stderr.write(f"[PATH-FILTER-WARNING] Invalid exclude_paths type: {type(exclude_paths)}. Using empty list.\n")
            sys.stderr.flush()
            exclude_paths = []
            
    except Exception as exclude_error:
        sys.stderr.write(f"[PATH-FILTER-ERROR] Exclude paths extraction failed: {exclude_error}. Using empty list.\n")
        sys.stderr.flush()
        exclude_paths = []
    
    # üîç –ü–†–û–í–ï–†–ö–ê –ü–ê–¢–¢–ï–†–ù–û–í: –° –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    for i, exclude_pattern in enumerate(exclude_paths):
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            if not exclude_pattern or not isinstance(exclude_pattern, str):
                sys.stderr.write(f"[PATH-FILTER-WARNING] Invalid pattern #{i}: {exclude_pattern}. Skipping.\n")
                sys.stderr.flush()
                continue
            
            exclude_pattern = exclude_pattern.strip()
            if not exclude_pattern:
                continue
            
            # 1. üéØ EXACT MATCH: –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
            try:
                if normalized_path == exclude_pattern:
                    return True
            except Exception as exact_error:
                sys.stderr.write(f"[PATH-FILTER-WARNING] Exact match failed for pattern '{exclude_pattern}': {exact_error}\n")
                sys.stderr.flush()
            
            # 2. üîç PREFIX MATCH: –° –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            try:
                if exclude_pattern.endswith('*'):
                    prefix = exclude_pattern[:-1]
                    if prefix and normalized_path.startswith(prefix):
                        return True
                elif normalized_path.startswith(exclude_pattern):
                    return True
            except Exception as prefix_error:
                sys.stderr.write(f"[PATH-FILTER-WARNING] Prefix match failed for pattern '{exclude_pattern}': {prefix_error}\n")
                sys.stderr.flush()
            
            # 3. üîç SUFFIX MATCH: –° –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            try:
                if exclude_pattern.startswith('*'):
                    suffix = exclude_pattern[1:]
                    if suffix and normalized_path.endswith(suffix):
                        return True
            except Exception as suffix_error:
                sys.stderr.write(f"[PATH-FILTER-WARNING] Suffix match failed for pattern '{exclude_pattern}': {suffix_error}\n")
                sys.stderr.flush()
            
            # 4. üåü WILDCARD PATTERN: –° –∑–∞—â–∏—Ç–æ–π –æ—Ç regex –æ—à–∏–±–æ–∫
            try:
                if '*' in exclude_pattern:
                    import fnmatch
                    if fnmatch.fnmatch(normalized_path, exclude_pattern):
                        return True
            except Exception as wildcard_error:
                sys.stderr.write(f"[PATH-FILTER-WARNING] Wildcard match failed for pattern '{exclude_pattern}': {wildcard_error}\n")
                sys.stderr.flush()
            
            # 5. üîç SEGMENT MATCH: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
            try:
                if '/' not in exclude_pattern and exclude_pattern in normalized_path:
                    return True
            except Exception as segment_error:
                sys.stderr.write(f"[PATH-FILTER-WARNING] Segment match failed for pattern '{exclude_pattern}': {segment_error}\n")
                sys.stderr.flush()
            
            # 6. üöÄ REGEX PATTERN: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            try:
                if exclude_pattern.startswith('^') or exclude_pattern.endswith('$'):
                    import re
                    if re.match(exclude_pattern, normalized_path):
                        return True
            except Exception as regex_error:
                sys.stderr.write(f"[PATH-FILTER-WARNING] Regex match failed for pattern '{exclude_pattern}': {regex_error}\n")
                sys.stderr.flush()
            
        except Exception as pattern_error:
            # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ª–æ–º–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            sys.stderr.write(f"[PATH-FILTER-ERROR] Pattern processing failed for '{exclude_pattern}': {pattern_error}\n")
            sys.stderr.flush()
            continue
    
    # üéØ DEFAULT: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    return False


class InterceptHandler(logging.Handler):
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è uvicorn –ª–æ–≥–æ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def emit(self, record):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å Loguru/–Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
            level = record.levelname
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
            frame = sys._getframe(6)
            depth = 6
            while frame and frame.f_code.co_filename == logging.__file__:
                frame = frame.f_back
                depth += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
            safe_log(level, record.getMessage(), 
                    logger_name=record.name, 
                    extra={'depth': depth})
                    
        except Exception as e:
            # Fallback - –ª–æ–≥–∏—Ä—É–µ–º –≤ stderr
            print(f"[INTERCEPT-ERROR] Failed to intercept log: {e}", file=sys.stderr)
            print(f"[INTERCEPT-FALLBACK] {record.levelname}: {record.getMessage()}", file=sys.stderr)


class LoggingMiddleware:
    """Enhanced ASGI logging middleware with performance optimization."""
    
    def __init__(self, app: ASGIApp):
        """Initialize logging middleware with FastAPI-compatible signature."""
        self.app = app
        self.settings = get_settings()
        
        # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ uvicorn
        self._ensure_logging_initialized()
        
        # üöÄ –≠–¢–ê–ü 4.4: Performance Optimization Integration
        self.enable_performance_optimization = getattr(self.settings, 'ENABLE_PERFORMANCE_OPTIMIZATION', True)
        if self.enable_performance_optimization:
            self.performance_optimizer = get_performance_optimizer()
        
        # Use optimized manager
        self.unified_manager = get_unified_logging_manager()
        self.request_logger = self.unified_manager.get_request_logger()
        
        # Get optimized logger
        if self.enable_performance_optimization:
            self.app_logger = self.unified_manager.get_optimized_logger("middleware.asgi")
        else:
            self.app_logger = get_logger("middleware.asgi")
        
        # Performance settings
        self.enable_batching = getattr(self.settings, 'ENABLE_LOG_BATCHING', True)
        self.log_requests = getattr(self.settings, 'ENABLE_REQUEST_LOGGING', True)
        self.log_request_body = getattr(self.settings, 'LOG_REQUEST_BODY', False)
        self.log_request_headers = getattr(self.settings, 'LOG_REQUEST_HEADERS', True)
        self.log_performance_metrics = getattr(self.settings, 'LOG_PERFORMANCE_METRICS', True)
        
        # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –î–∞–∂–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –ø–∞–¥–∞–µ—Ç
        try:
            self.app_logger.info(
                f"‚úÖ LoggingMiddleware initialized with performance optimization: "
                f"optimization={self.enable_performance_optimization}, "
                f"batching={self.enable_batching}"
            )
        except Exception as init_error:
            safe_log(None, "ERROR", f"LoggingMiddleware initialization logging failed: {init_error}", 
                    correlation_id="init-error")
    
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:
        # RAW DEBUG: This should always print if middleware is hit
        print(f"RAW DEBUG: LoggingMiddleware.__call__ entered for path: {scope.get('path', 'N/A')}")

        if scope["type"] != "http":
            print(f"RAW DEBUG: Not an HTTP request, skipping. Type: {scope['type']}")
            await self.app(scope, receive, send)
            return

        # üîß DEBUG: Log entry point for __call__
        print(f"RAW DEBUG: Processing HTTP request in LoggingMiddleware")
        safe_log(self.app_logger, "DEBUG", f"üî• LoggingMiddleware.__call__ entered for scope type: {scope['type']}")
        
        # üõ°Ô∏è –°–£–ü–ï–†-–ë–ï–ó–û–ü–ê–°–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback
        method = "UNKNOWN"
        path = "/unknown" 
        query_params = ""
        client_ip = "unknown"
        user_agent = ""
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Request –æ–±—ä–µ–∫—Ç–∞
            try:
                print(f"RAW DEBUG: Attempting to create Request object")
                request = Request(scope, receive)
                print(f"RAW DEBUG: Request object created successfully")
            except Exception as request_error:
                print(f"RAW DEBUG: Failed to create Request object: {request_error}")
                safe_log(self.app_logger, "ERROR", f"Failed to create Request object: {request_error}", {"scope_type": scope["type"]})
                await self.app(scope, receive, send)
                return

            print(f"RAW DEBUG: Extracting request details")
            method = request.method
            path = request.url.path
            query_params = str(request.query_params)
            client_ip = self._get_client_ip(request)
            user_agent = request.headers.get("user-agent", "Unknown")
            print(f"RAW DEBUG: Request details: {method} {path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∞—Ç—å –ø—É—Ç—å –∏–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            is_excluded_path = should_exclude_path(path)
            request_excluded_by_config = not self.log_requests or is_excluded_path
            
            print(f"DEBUG: Logging check -> log_requests: {self.log_requests}, is_excluded_path: {is_excluded_path}, request_excluded_by_config: {request_excluded_by_config}")
            
            if not request_excluded_by_config:
                print(f"RAW DEBUG: Request will be logged")
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º –ª–æ–≥–≥–µ—Ä–∞
                    logger_name = getattr(self.app_logger, 'name', 'unknown')
                    logger_propagate = getattr(self.app_logger, 'propagate', 'unknown')
                    print(f"RAW DEBUG: Logger state - Name: {logger_name}, Propagate: {logger_propagate}")
                except Exception as logger_attr_error:
                    print(f"RAW DEBUG: Error accessing logger attributes: {logger_attr_error}")

                request_id = set_correlation_id(str(uuid.uuid4()))
                print(f"RAW DEBUG: Set correlation ID: {request_id}")
                
                # Ensure Correlation ID is always available in logs
                # üîß DEBUG: Log entry point for request started
                try:
                    print(f"RAW DEBUG: Attempting to log request start")
                    # –ü—Ä—è–º–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    with open('logs/http_debug.log', 'a') as f:
                        f.write(f"HTTP Request: {method} {path} at {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                    
                    # üîß –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ app.log –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è safe_log
                    # with open('logs/app.log', 'a') as f:
                    #     timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                    #     f.write(f"{timestamp} - middleware.http - INFO     - HTTP Request started: {method} {path} (request_id: {request_id})\n")
                    
                    safe_log(
                        self.app_logger,
                        "INFO",
                        "HTTP Request started",
                        extra={
                            "request_id": request_id,
                            "method": method,
                            "path": path,
                            "query_params": query_params,
                            "client_ip": client_ip,
                            "user_agent": user_agent,
                            "log_category": "http_request",
                        },
                    )
                    print(f"RAW DEBUG: Request start logged successfully")
                except Exception as log_error:
                    print(f"RAW DEBUG: Error logging request start: {log_error}")

                start_time = time.time()

                async def send_wrapper(message):
                    print(f"RAW DEBUG: send_wrapper called with message type: {message.get('type', 'unknown')}")
                    if message["type"] == "http.response.start":
                        status_code = message["status"]
                        headers = message["headers"]
                        print(f"RAW DEBUG: Response status: {status_code}")
                        
                        # üîß DEBUG: Log entry point for response completed
                        try:
                            print(f"RAW DEBUG: Attempting to log request completion")
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º time.time() –≤–º–µ—Å—Ç–æ time.perf_counter())
                            duration_ms = (time.time() - start_time) * 1000
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RequestLogger –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
                            self.request_logger.log_request(
                                method=method,
                                path=path,
                                status_code=status_code,
                                duration_ms=duration_ms,
                                request_id=CorrelationContext.get_correlation_id(),
                                ip_address=client_ip,
                                user_agent=user_agent
                            )
                            
                            # üîß –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ app.log –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è safe_log
                            # with open('logs/app.log', 'a') as f:
                            #     timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                            #     f.write(f"{timestamp} - middleware.http - INFO     - {method} {path} - {status_code} ({duration_ms:.2f}ms)\n")
                            
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ safe_log
                            safe_log(
                                self.app_logger,
                                "INFO",
                                "HTTP Request completed",
                                extra={
                                    "request_id": CorrelationContext.get_correlation_id(),
                                    "method": method,
                                    "path": path,
                                    "status_code": status_code,
                                    "duration_ms": duration_ms,
                                    "response_headers": {header.decode(): value.decode() for header, value in headers} if self.log_request_headers else "********"
                                },
                            )
                            print(f"RAW DEBUG: Request completion logged successfully")
                        except Exception as log_error:
                            print(f"RAW DEBUG: Error logging request completion: {log_error}")
                    await send(message)
                
                print(f"RAW DEBUG: Calling next middleware with send_wrapper")
                await self.app(scope, receive, send_wrapper)
            else:
                print(f"RAW DEBUG: Request excluded from logging, passing through")
                await self.app(scope, receive, send)

        except Exception as e:
            print(f"RAW DEBUG: Unhandled error in LoggingMiddleware: {e}")
            import traceback
            print(f"RAW DEBUG: Traceback: {traceback.format_exc()}")
            safe_log(self.app_logger, "ERROR", f"Unhandled error in LoggingMiddleware: {e}",
                     {"method": method, "path": path, "traceback": traceback.format_exc()})
            # Re-raise the exception to ensure it's propagated
            raise

    async def _handle_request_fallback(self, scope: Scope, receive: Receive, send: Send, method: str, path: str) -> None:
        """
        üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FALLBACK: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–≥–¥–∞ Request –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–∞–¥–∞–µ—Ç.
        """
        import sys
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º correlation ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            correlation_id = str(uuid.uuid4())
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é
            sys.stderr.write(f"[MIDDLEWARE-FALLBACK] Using emergency request handling: {method} {path} (correlation_id: {correlation_id})\n")
            sys.stderr.flush()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–∞–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ
            try:
                if should_exclude_path(path):
                    sys.stderr.write(f"[MIDDLEWARE-FALLBACK] Path excluded: {path}\n")
                    sys.stderr.flush()
                    await self.app(scope, receive, send)
                    return
            except Exception as exclude_error:
                sys.stderr.write(f"[MIDDLEWARE-FALLBACK] Path exclusion check failed: {exclude_error}\n")
                sys.stderr.flush()
            
            # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            
            try:
                await self.app(scope, receive, send)
                duration_ms = (time.time() - start_time) * 1000
                
                sys.stderr.write(f"[MIDDLEWARE-FALLBACK] Request completed: {method} {path} ({duration_ms:.2f}ms)\n")
                sys.stderr.flush()
                
            except Exception as app_error:
                duration_ms = (time.time() - start_time) * 1000
                
                sys.stderr.write(f"[MIDDLEWARE-FALLBACK] Request failed: {method} {path} - {str(app_error)} ({duration_ms:.2f}ms)\n")
                sys.stderr.flush()
                raise
                
        except Exception as fallback_error:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –æ–±–æ—Ä–æ–Ω—ã - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
            sys.stderr.write(f"[MIDDLEWARE-EMERGENCY] Fallback handler failed: {fallback_error}. Passing request through.\n")
            sys.stderr.flush()
            await self.app(scope, receive, send)

    def _get_client_ip(self, request: Request) -> str:
        """üõ°Ô∏è –°–£–ü–ï–†-–ë–ï–ó–û–ü–ê–°–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ client IP —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback."""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è headers
            try:
                headers = dict(request.scope.get("headers", []))
            except Exception as headers_error:
                safe_log(None, "WARNING", f"Headers extraction failed: {headers_error}")
                return "unknown"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Forwarded-For header
            try:
                forwarded_for = headers.get(b"x-forwarded-for")
                if forwarded_for:
                    decoded = forwarded_for.decode('utf-8', errors='ignore')
                    first_ip = decoded.split(",")[0].strip()
                    if first_ip:
                        return first_ip
            except Exception as forwarded_error:
                safe_log(None, "WARNING", f"X-Forwarded-For processing failed: {forwarded_error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Real-IP header
            try:
                real_ip = headers.get(b"x-real-ip")
                if real_ip:
                    decoded = real_ip.decode('utf-8', errors='ignore')
                    if decoded.strip():
                        return decoded.strip()
            except Exception as real_ip_error:
                safe_log(None, "WARNING", f"X-Real-IP processing failed: {real_ip_error}")
            
            # Fallback –Ω–∞ client info –∏–∑ scope
            try:
                client = request.scope.get("client")
                if client and len(client) > 0:
                    return str(client[0])
            except Exception as client_error:
                safe_log(None, "WARNING", f"Client scope extraction failed: {client_error}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä—è–º–æ –∏–∑ scope
            try:
                scope_client = request.scope.get("client")
                if scope_client:
                    return str(scope_client[0]) if scope_client[0] else "unknown"
            except Exception as scope_error:
                safe_log(None, "WARNING", f"Scope client extraction failed: {scope_error}")
            
            return "unknown"
            
        except Exception as ip_error:
            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FALLBACK: –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º unknown
            import sys
            sys.stderr.write(f"[IP-EXTRACTION-CRITICAL] Complete IP extraction failed: {ip_error}\n")
            sys.stderr.flush()
            return "unknown"

    def _ensure_logging_initialized(self):
        """
        üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ uvicorn,
        –¥–∞–∂–µ –µ—Å–ª–∏ main.py –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞.
        """
        import logging
        import sys
        import os
        
        try:
            # üö® –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            print(f"[MIDDLEWARE-INIT] üîß Starting aggressive logging initialization...", file=sys.stderr)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            root_logger = logging.getLogger()
            print(f"[MIDDLEWARE-INIT] Current root level: {root_logger.level}, handlers: {len(root_logger.handlers)}", file=sys.stderr)
            
            # üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–≤—Å–µ–≥–¥–∞)
            
            # 1. –û—á–∏—Å—Ç–∏–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
            for handler in root_logger.handlers[:]:
                root_logger.removeHandler(handler)
                handler.close()
            
            # –û—á–∏—Å—Ç–∏–º handlers —É –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
            for name in ['middleware', 'middleware.asgi', 'middleware.http', 'services', 'api', 'database']:
                logger = logging.getLogger(name)
                for handler in logger.handlers[:]:
                    logger.removeHandler(handler)
                    handler.close()
            
            print(f"[MIDDLEWARE-INIT] ‚úÖ Cleared all existing handlers", file=sys.stderr)
            
            # 2. –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è root
            root_logger.setLevel(logging.DEBUG)
            print(f"[MIDDLEWARE-INIT] ‚úÖ Set root level to DEBUG", file=sys.stderr)
            
            # 3. –°–æ–∑–¥–∞–¥–∏–º console handler
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(logging.DEBUG)
            console_formatter = logging.Formatter(
                '%(levelname)s     - %(message)s'
            )
            console_handler.setFormatter(console_formatter)
            root_logger.addHandler(console_handler)
            print(f"[MIDDLEWARE-INIT] ‚úÖ Added console handler", file=sys.stderr)
            
            # 4. –°–æ–∑–¥–∞–¥–∏–º file handler –¥–ª—è app.log
            log_file = getattr(self.settings, 'LOG_FILE', 'logs/app.log')
            if log_file:
                try:
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    os.makedirs(os.path.dirname(log_file), exist_ok=True)
                    
                    file_handler = logging.FileHandler(log_file)
                    file_handler.setLevel(logging.DEBUG)
                    file_formatter = logging.Formatter(
                        '%(asctime)s - %(name)s - %(levelname)-8s - %(message)s'
                    )
                    file_handler.setFormatter(file_formatter)
                    root_logger.addHandler(file_handler)
                    
                    print(f"[MIDDLEWARE-INIT] ‚úÖ File handler added: {log_file}", file=sys.stderr)
                    
                except Exception as file_error:
                    print(f"[MIDDLEWARE-INIT] ‚ùå Could not create file handler: {file_error}", file=sys.stderr)
            
            # 5. –ù–∞—Å—Ç—Ä–æ–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_loggers = ['middleware', 'services', 'api', 'database', 'middleware.asgi', 'middleware.http']
            for logger_name in app_loggers:
                logger = logging.getLogger(logger_name)
                logger.setLevel(logging.DEBUG)
                logger.propagate = True
                print(f"[MIDDLEWARE-INIT] ‚úÖ Configured logger: {logger_name}", file=sys.stderr)
            
            # 6. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º self.app_logger
            if hasattr(self, 'app_logger') and hasattr(self.app_logger, 'logger'):
                self.app_logger.logger.setLevel(logging.DEBUG)
                print(f"[MIDDLEWARE-INIT] ‚úÖ Updated self.app_logger level", file=sys.stderr)
            
            print(f"[MIDDLEWARE-INIT] ‚úÖ Aggressive logging initialization completed", file=sys.stderr)
            
            # 7. –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_logger = logging.getLogger('middleware.test')
            test_logger.info("üß™ Test message: Aggressive logging initialization completed")
            
            # 8. –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_root = logging.getLogger()
            print(f"[MIDDLEWARE-INIT] Final state - Level: {final_root.level}, Handlers: {len(final_root.handlers)}", file=sys.stderr)
                
            # 9. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º uvicorn –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
            intercept_handler = InterceptHandler()
            for logger_name in ['uvicorn', 'uvicorn.access', 'uvicorn.error']:
                logger = logging.getLogger(logger_name)
                logger.handlers = [intercept_handler]
                logger.propagate = False
                print(f"[MIDDLEWARE-INIT] ‚úÖ Added intercept handler to: {logger_name}", file=sys.stderr)
                
        except Exception as init_error:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback
            print(f"[MIDDLEWARE-INIT] ‚ùå Failed to initialize logging: {init_error}", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)


# üîß ELIMINATED: LoggingMiddlewareAdapter removed - single unified LoggingMiddleware only
# FastAPI can use ASGI middleware directly without adapter pattern 