"""
Unified logging configuration for RAG Construction Materials API.
All logging-related settings in one place for better maintainability.
"""

from enum import Enum
from typing import List, Optional
from pydantic_settings import BaseSettings
from pydantic import Field, field_validator
import json


class LogLevel(str, Enum):
    """Log level enumeration."""
    DEBUG = "DEBUG"
    INFO = "INFO" 
    WARNING = "WARNING"
    ERROR = "ERROR"
    CRITICAL = "CRITICAL"


class LogTimestampFormat(str, Enum):
    """Log timestamp format options."""
    ISO8601 = "ISO8601"
    RFC3339 = "RFC3339"
    TIMESTAMP = "timestamp"


class LoggingConfig(BaseSettings):
    """
    üîß UNIFIED LOGGING CONFIGURATION
    
    All logging settings from env.example in typed, validated form.
    """
    
    # === –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
    LOG_LEVEL: LogLevel = Field(default=LogLevel.INFO, description="–û—Å–Ω–æ–≤–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    ENABLE_STRUCTURED_LOGGING: bool = Field(default=False, description="JSON –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
    LOG_FILE: Optional[str] = Field(default=None, description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤")
    LOG_COLORS: bool = Field(default=True, description="–¶–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏")
    LOG_THIRD_PARTY_LEVEL: LogLevel = Field(default=LogLevel.WARNING, description="–£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
    
    # === HTTP –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï (MIDDLEWARE) ===  
    ENABLE_REQUEST_LOGGING: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
    LOG_REQUEST_BODY: bool = Field(default=False, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
    LOG_RESPONSE_BODY: bool = Field(default=False, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    LOG_REQUEST_HEADERS: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–æ–≥–∏")
    LOG_MASK_SENSITIVE_HEADERS: bool = Field(default=True, description="–ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    LOG_MAX_BODY_SIZE: int = Field(default=65536, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–∞–π—Ç)")
    
    # === CORRELATION ID –ò –¢–†–ê–°–°–ò–†–û–í–ö–ê ===
    LOG_CORRELATION_ID: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å correlation ID")
    LOG_CORRELATION_ID_HEADER: str = Field(default="X-Correlation-ID", description="–ò–º—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è correlation ID")
    
    # === –ë–ê–ó–ê –î–ê–ù–ù–´–• –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
    LOG_DATABASE_OPERATIONS: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î")
    LOG_SQL_QUERIES: bool = Field(default=False, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã")
    LOG_SQL_PARAMETERS: bool = Field(default=False, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SQL")
    LOG_VECTOR_OPERATIONS: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –ë–î")
    LOG_CACHE_OPERATIONS: bool = Field(default=False, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º")
    
    # === PERFORMANCE –ú–ï–¢–†–ò–ö–ò ===
    LOG_PERFORMANCE_METRICS: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    LOG_TIMING_DETAILS: bool = Field(default=True, description="–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
    LOG_SLOW_OPERATION_THRESHOLD_MS: int = Field(default=1000, description="–ü–æ—Ä–æ–≥ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–º—Å)")
    
    # === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
    LOG_SECURITY_EVENTS: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    LOG_BLOCKED_REQUESTS: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    LOG_SECURITY_INCIDENTS: bool = Field(default=True, description="–õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –∞—Ç–∞–∫")
    
    # === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–û–í ===
    LOG_TIMESTAMP_FORMAT: LogTimestampFormat = Field(default=LogTimestampFormat.ISO8601, description="–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫")
    LOG_SOURCE_INFO: bool = Field(default=True, description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –∏ —Å—Ç—Ä–æ–∫–µ")
    LOG_STACK_TRACE: bool = Field(default=True, description="Stack trace –¥–ª—è –æ—à–∏–±–æ–∫")
    
    # === –ü–†–û–î–í–ò–ù–£–¢–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
    LOG_FILE_ROTATION: bool = Field(default=True, description="–†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤")
    LOG_FILE_MAX_SIZE_MB: int = Field(default=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ (–ú–ë)")
    LOG_FILE_BACKUP_COUNT: int = Field(default=5, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤")
    LOG_ASYNC_LOGGING: bool = Field(default=False, description="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    LOG_BUFFER_SIZE: int = Field(default=100, description="–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤")
    LOG_FLUSH_INTERVAL: int = Field(default=5, description="–ò–Ω—Ç–µ—Ä–≤–∞–ª flush –±—É—Ñ–µ—Ä–∞ (—Å–µ–∫)")
    
    # === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –õ–û–ì–ì–ï–†–´ ===
    LOG_MIDDLEWARE_LEVEL: LogLevel = Field(default=LogLevel.INFO, description="–£—Ä–æ–≤–µ–Ω—å –¥–ª—è middleware")
    LOG_SERVICES_LEVEL: LogLevel = Field(default=LogLevel.INFO, description="–£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤")
    LOG_API_LEVEL: LogLevel = Field(default=LogLevel.INFO, description="–£—Ä–æ–≤–µ–Ω—å –¥–ª—è API endpoints")
    LOG_DATABASE_LEVEL: LogLevel = Field(default=LogLevel.INFO, description="–£—Ä–æ–≤–µ–Ω—å –¥–ª—è database operations")
    
    # === EXCLUDE PATTERNS ===
    LOG_EXCLUDE_PATHS: List[str] = Field(
        default=["/docs", "/openapi.json", "/favicon.ico", "/static", "/health"], 
        description="–ü—É—Ç–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    LOG_EXCLUDE_HEADERS: List[str] = Field(
        default=["user-agent", "accept-encoding", "accept-language"],
        description="–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    
    @field_validator('LOG_EXCLUDE_PATHS', mode='before')
    @classmethod
    def parse_exclude_paths(cls, v):
        """Parse JSON string or return list as-is."""
        if isinstance(v, str):
            try:
                return json.loads(v)
            except json.JSONDecodeError:
                return v.split(',')
        return v if isinstance(v, list) else []
    
    @field_validator('LOG_EXCLUDE_HEADERS', mode='before')
    @classmethod
    def parse_exclude_headers(cls, v):
        """Parse JSON string or return list as-is."""
        if isinstance(v, str):
            try:
                return json.loads(v)
            except json.JSONDecodeError:
                return v.split(',')
        return v if isinstance(v, list) else []
    
    class Config:
        env_file = [
            ".env.local",
            ".env.development",
            ".env.production",
            ".env"
        ]
        env_file_encoding = "utf-8"
        extra = "ignore"
        case_sensitive = True


# ‚úÖ UNIFIED LOG FORMAT STANDARD
UNIFIED_LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)-8s - %(message)s"
UNIFIED_LOG_DATE_FORMAT = "%Y-%m-%d %H:%M:%S"


def get_unified_log_format() -> str:
    """
    üéØ –ï–î–ò–ù–´–ô –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –§–û–†–ú–ê–¢ –õ–û–ì–û–í
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
    - Timestamp —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏: 2025-06-20 19:31:04,468
    - Logger name: middleware.test, services.ssh_tunnel, etc.
    - Level (8 chars): INFO    , ERROR   , WARNING , DEBUG   
    - Message: –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    –§–æ—Ä–º–∞—Ç: "YYYY-MM-DD HH:MM:SS,mmm - logger.name - LEVEL    - message"
    –ü—Ä–∏–º–µ—Ä: "2025-06-20 19:31:04,468 - middleware.test - INFO     - ‚úÖ Test completed"
    """
    return UNIFIED_LOG_FORMAT


def get_unified_date_format() -> str:
    """
    üïê –ï–î–ò–ù–´–ô –§–û–†–ú–ê–¢ –î–ê–¢–´ –ò –í–†–ï–ú–ï–ù–ò
    
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Python logging –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    return UNIFIED_LOG_DATE_FORMAT


def create_unified_formatter() -> 'logging.Formatter':
    """
    üîß –°–û–ó–î–ê–ù–ò–ï –ï–î–ò–ù–û–ì–û –§–û–†–ú–ê–¢–¢–ï–†–ê
    
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.
    """
    import logging
    return logging.Formatter(
        fmt=get_unified_log_format(),
        datefmt=get_unified_date_format()
    ) 