"""
üéØ Correlation ID Context Management System

Provides thread-safe, async-safe correlation ID propagation through the entire application.
–≠–¢–ê–ü 3: –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ correlation ID –¥–ª—è 100% —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏.

Correlation context management for request tracing with enhanced error handling.
Provides safe correlation ID handling with multiple fallback mechanisms.
"""

import uuid
import sys
from contextvars import ContextVar
from typing import Optional, Callable, Any, Dict
from functools import wraps
import asyncio
import logging

# Context variable for correlation ID with safe default
_correlation_id: ContextVar[Optional[str]] = ContextVar('correlation_id', default=None)

# Context variable for request metadata with safe default  
_request_metadata: ContextVar[Dict[str, Any]] = ContextVar('request_metadata', default={})

# Emergency fallback storage for critical cases
_emergency_correlation_storage: Dict[str, str] = {}

# üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ContextVar –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
correlation_id: ContextVar[Optional[str]] = ContextVar('correlation_id', default=None)
request_metadata: ContextVar[Dict[str, Any]] = ContextVar('request_metadata', default={})


def safe_generate_correlation_id() -> str:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø correlation ID —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏.
    
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ correlation ID –¥–∞–∂–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
    """
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± - UUID4
        return str(uuid.uuid4())
    except Exception as uuid_error:
        try:
            # Fallback 1: –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            import time
            import random
            timestamp = int(time.time() * 1000000)  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            random_part = random.randint(1000, 9999)
            fallback_id = f"fallback-{timestamp}-{random_part}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É –≤ stderr
            sys.stderr.write(f"[CORRELATION-WARNING] UUID generation failed: {uuid_error}. Using fallback: {fallback_id}\n")
            sys.stderr.flush()
            
            return fallback_id
            
        except Exception as fallback_error:
            # Fallback 2: –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID —Å —Å—á–µ—Ç—á–∏–∫–æ–º
            try:
                import time
                static_id = f"emergency-{int(time.time())}"
                
                sys.stderr.write(f"[CORRELATION-CRITICAL] All ID generation failed. Using static: {static_id}\n")
                sys.stderr.flush()
                
                return static_id
                
            except Exception:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –æ–±–æ—Ä–æ–Ω—ã - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π ID
                return "critical-fallback-id"


def set_correlation_id(correlation_id: Optional[str] = None) -> str:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê correlation ID —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback.
    
    Args:
        correlation_id: ID –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ None - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤—ã–π)
        
    Returns:
        str: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π correlation ID
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if correlation_id is None:
            correlation_id = safe_generate_correlation_id()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID
        if not correlation_id or not isinstance(correlation_id, str):
            correlation_id = safe_generate_correlation_id()
            sys.stderr.write(f"[CORRELATION-WARNING] Invalid correlation_id provided, generated new: {correlation_id}\n")
            sys.stderr.flush()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ ContextVar
        try:
            _correlation_id.set(correlation_id)
            return correlation_id
            
        except Exception as context_error:
            # Fallback 1: –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            try:
                import threading
                thread_id = str(threading.get_ident())
                _emergency_correlation_storage[thread_id] = correlation_id
                
                sys.stderr.write(f"[CORRELATION-FALLBACK] ContextVar failed: {context_error}. Using emergency storage.\n")
                sys.stderr.flush()
                
                return correlation_id
                
            except Exception as emergency_error:
                # Fallback 2: –•–æ—Ç—è –±—ã –≤–µ—Ä–Ω–µ–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                sys.stderr.write(f"[CORRELATION-CRITICAL] All storage failed: {emergency_error}. ID available but not stored.\n")
                sys.stderr.flush()
                
                return correlation_id
                
    except Exception as general_error:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π ID
        try:
            emergency_id = safe_generate_correlation_id()
            sys.stderr.write(f"[CORRELATION-EMERGENCY] Complete failure: {general_error}. Using emergency ID: {emergency_id}\n")
            sys.stderr.flush()
            return emergency_id
            
        except Exception:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –æ–±–æ—Ä–æ–Ω—ã
            return "total-failure-id"


def get_correlation_id() -> Optional[str]:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï correlation ID —Å fallback –ø–æ–∏—Å–∫–æ–º.
    
    Returns:
        Optional[str]: Correlation ID –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–∑ ContextVar
        correlation_id = _correlation_id.get()
        if correlation_id:
            return correlation_id
            
        # Fallback 1: –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        try:
            import threading
            thread_id = str(threading.get_ident())
            emergency_id = _emergency_correlation_storage.get(thread_id)
            if emergency_id:
                return emergency_id
                
        except Exception as emergency_error:
            sys.stderr.write(f"[CORRELATION-FALLBACK] Emergency storage access failed: {emergency_error}\n")
            sys.stderr.flush()
        
        # Fallback 2: –í–æ–∑–≤—Ä–∞—â–∞–µ–º None - ID –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
        
    except Exception as general_error:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback
        sys.stderr.write(f"[CORRELATION-CRITICAL] Get correlation ID failed: {general_error}\n")
        sys.stderr.flush()
        return None


def set_request_metadata(metadata: Dict[str, Any]) -> bool:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.
    
    Args:
        metadata: –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    """
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if not isinstance(metadata, dict):
            sys.stderr.write(f"[METADATA-WARNING] Invalid metadata type: {type(metadata)}. Using empty dict.\n")
            sys.stderr.flush()
            metadata = {}
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            _request_metadata.set(metadata)
            return True
            
        except Exception as context_error:
            # Fallback: –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            try:
                import threading
                thread_id = str(threading.get_ident())
                storage_key = f"metadata_{thread_id}"
                _emergency_correlation_storage[storage_key] = str(metadata)  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                
                sys.stderr.write(f"[METADATA-FALLBACK] ContextVar failed: {context_error}. Using emergency storage.\n")
                sys.stderr.flush()
                
                return True
                
            except Exception as emergency_error:
                sys.stderr.write(f"[METADATA-CRITICAL] All metadata storage failed: {emergency_error}\n")
                sys.stderr.flush()
                return False
                
    except Exception as general_error:
        sys.stderr.write(f"[METADATA-EMERGENCY] Complete metadata failure: {general_error}\n")
        sys.stderr.flush()
        return False


def get_request_metadata() -> Dict[str, Any]:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.
    
    Returns:
        Dict[str, Any]: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    """
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–∑ ContextVar
        metadata = _request_metadata.get()
        if metadata and isinstance(metadata, dict):
            return metadata
            
        # Fallback 1: –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        try:
            import threading
            thread_id = str(threading.get_ident())
            storage_key = f"metadata_{thread_id}"
            emergency_metadata = _emergency_correlation_storage.get(storage_key)
            
            if emergency_metadata:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏
                try:
                    import ast
                    return ast.literal_eval(emergency_metadata)
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    return {"emergency_metadata": emergency_metadata}
                    
        except Exception as emergency_error:
            sys.stderr.write(f"[METADATA-FALLBACK] Emergency metadata access failed: {emergency_error}\n")
            sys.stderr.flush()
        
        # Fallback 2: –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return {}
        
    except Exception as general_error:
        sys.stderr.write(f"[METADATA-CRITICAL] Get metadata failed: {general_error}\n")
        sys.stderr.flush()
        return {}


def clear_correlation_context() -> bool:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê correlation context.
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
    """
    success = True
    
    try:
        # –û—á–∏—â–∞–µ–º ContextVar
        try:
            _correlation_id.set(None)
        except Exception as context_error:
            sys.stderr.write(f"[CONTEXT-CLEAR] ContextVar correlation clear failed: {context_error}\n")
            sys.stderr.flush()
            success = False
            
        try:
            _request_metadata.set({})
        except Exception as metadata_error:
            sys.stderr.write(f"[CONTEXT-CLEAR] ContextVar metadata clear failed: {metadata_error}\n")
            sys.stderr.flush()
            success = False
        
        # –û—á–∏—â–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        try:
            import threading
            thread_id = str(threading.get_ident())
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
            keys_to_remove = [key for key in _emergency_correlation_storage.keys() 
                            if key == thread_id or key == f"metadata_{thread_id}"]
            
            for key in keys_to_remove:
                _emergency_correlation_storage.pop(key, None)
                
        except Exception as emergency_error:
            sys.stderr.write(f"[CONTEXT-CLEAR] Emergency storage clear failed: {emergency_error}\n")
            sys.stderr.flush()
            success = False
        
        return success
        
    except Exception as general_error:
        sys.stderr.write(f"[CONTEXT-CLEAR] Complete clear failure: {general_error}\n")
        sys.stderr.flush()
        return False


def get_correlation_context_info() -> Dict[str, Any]:
    """
    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ context.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å correlation context.
    
    Returns:
        Dict[str, Any]: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    try:
        info = {
            "correlation_id": None,
            "metadata": {},
            "context_var_status": "unknown",
            "emergency_storage_status": "unknown",
            "thread_id": None,
            "emergency_keys": []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º correlation ID
        try:
            info["correlation_id"] = get_correlation_id()
            info["context_var_status"] = "accessible"
        except Exception as corr_error:
            info["context_var_status"] = f"error: {corr_error}"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        try:
            info["metadata"] = get_request_metadata()
        except Exception as meta_error:
            info["metadata"] = {"error": str(meta_error)}
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–µ
        try:
            import threading
            info["thread_id"] = str(threading.get_ident())
        except Exception:
            info["thread_id"] = "unknown"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        try:
            info["emergency_keys"] = list(_emergency_correlation_storage.keys())
            info["emergency_storage_status"] = "accessible"
        except Exception as emergency_error:
            info["emergency_storage_status"] = f"error: {emergency_error}"
        
        return info
        
    except Exception as general_error:
        return {
            "error": f"Complete diagnostic failure: {general_error}",
            "correlation_id": None,
            "metadata": {},
            "status": "critical_failure"
        }


# –ö–ª–∞—Å—Å –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
class CorrelationContext:
    """
    üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –ö–õ–ê–°–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å correlation context.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.
    """
    
    @staticmethod
    def create(correlation_id: Optional[str] = None) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π correlation context."""
        return set_correlation_id(correlation_id)
    
    @staticmethod
    def get() -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π correlation ID."""
        return get_correlation_id()
    
    @staticmethod
    def set_metadata(metadata: Dict[str, Any]) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞."""
        return set_request_metadata(metadata)
    
    @staticmethod
    def get_metadata() -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞."""
        return get_request_metadata()
    
    @staticmethod
    def clear() -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å correlation context."""
        return clear_correlation_context()
    
    @staticmethod
    def diagnose() -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        return get_correlation_context_info()


class CorrelationContext:
    """
    üéØ Correlation ID context manager and utilities.
    
    Provides:
    - Automatic correlation ID generation
    - Context propagation through async/sync calls
    - Integration with logging system
    - Request metadata management
    """
    
    @staticmethod
    def get_correlation_id() -> Optional[str]:
        """
        Get current correlation ID from context.
        
        Returns:
            Current correlation ID or None if not set
        """
        try:
            return correlation_id.get()
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to get correlation ID: {e}\n")
            sys.stderr.flush()
            return None
    
    @staticmethod
    def set_correlation_id(corr_id: str) -> None:
        """
        Set correlation ID in current context.
        
        Args:
            corr_id: Correlation ID to set
        """
        try:
            correlation_id.set(corr_id)
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to set correlation ID: {e}\n")
            sys.stderr.flush()
    
    @staticmethod
    def generate_correlation_id() -> str:
        """
        Generate new correlation ID and set it in context.
        
        Returns:
            Generated correlation ID
        """
        try:
            new_id = str(uuid.uuid4())
            correlation_id.set(new_id)
            return new_id
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to generate correlation ID: {e}\n")
            sys.stderr.flush()
            return safe_generate_correlation_id()
    
    @staticmethod
    def get_or_generate_correlation_id() -> str:
        """
        Get current correlation ID or generate new one if not exists.
        
        Returns:
            Correlation ID (existing or newly generated)
        """
        try:
            current_id = correlation_id.get()
            if current_id is None:
                current_id = CorrelationContext.generate_correlation_id()
            return current_id
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to get or generate correlation ID: {e}\n")
            sys.stderr.flush()
            return safe_generate_correlation_id()
    
    @staticmethod
    def get_request_metadata() -> Dict[str, Any]:
        """
        Get current request metadata.
        
        Returns:
            Current request metadata dictionary
        """
        try:
            metadata = request_metadata.get()
            return metadata if metadata else {}
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to get request metadata: {e}\n")
            sys.stderr.flush()
            return {}
    
    @staticmethod
    def set_request_metadata(metadata: Dict[str, Any]) -> None:
        """
        Set request metadata in current context.
        
        Args:
            metadata: Metadata dictionary to set
        """
        try:
            request_metadata.set(metadata.copy())
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to set request metadata: {e}\n")
            sys.stderr.flush()
    
    @staticmethod
    def update_request_metadata(key: str, value: Any) -> None:
        """
        Update single key in request metadata.
        
        Args:
            key: Metadata key
            value: Metadata value
        """
        try:
            current_metadata = request_metadata.get({})
            current_metadata[key] = value
            request_metadata.set(current_metadata)
        except Exception as e:
            sys.stderr.write(f"[CONTEXT-ERROR] Failed to update request metadata: {e}\n")
            sys.stderr.flush()
    
    @classmethod
    def with_correlation_id(cls, corr_id: Optional[str] = None):
        """
        Context manager to set correlation ID for a block of operations.
        
        Args:
            corr_id: Correlation ID to use (generates new if None)
            
        Usage:
            with CorrelationContext.with_correlation_id():
                # All operations here will have the same correlation ID
                logger.info("This log will have correlation ID")
        """
        class CorrelationContextManager:
            def __init__(self, correlation_id_value: Optional[str]):
                self.correlation_id_value = correlation_id_value or str(uuid.uuid4())
                self.token = None
            
            def __enter__(self):
                try:
                    self.token = correlation_id.set(self.correlation_id_value)
                    return self.correlation_id_value
                except Exception as e:
                    sys.stderr.write(f"[CONTEXT-MANAGER-ERROR] Failed to enter correlation context: {e}\n")
                    sys.stderr.flush()
                    return self.correlation_id_value
            
            def __exit__(self, exc_type, exc_val, exc_tb):
                try:
                    if self.token is not None:
                        correlation_id.reset(self.token)
                except Exception as e:
                    sys.stderr.write(f"[CONTEXT-MANAGER-ERROR] Failed to exit correlation context: {e}\n")
                    sys.stderr.flush()
        
        return CorrelationContextManager(corr_id)
    
    @classmethod
    def with_request_context(cls, corr_id: Optional[str] = None, 
                           metadata: Optional[Dict[str, Any]] = None):
        """
        Context manager to set full request context.
        
        Args:
            corr_id: Correlation ID to use
            metadata: Request metadata to set
            
        Usage:
            with CorrelationContext.with_request_context(
                corr_id="12345", 
                metadata={"user_id": "user123", "ip": "1.2.3.4"}
            ):
                # All operations here will have correlation ID and metadata
                pass
        """
        class RequestContextManager:
            def __init__(self, correlation_id_value: Optional[str], 
                        metadata_value: Optional[Dict[str, Any]]):
                self.correlation_id_value = correlation_id_value or str(uuid.uuid4())
                self.metadata_value = metadata_value or {}
                self.corr_token = None
                self.meta_token = None
            
            def __enter__(self):
                try:
                    self.corr_token = correlation_id.set(self.correlation_id_value)
                    self.meta_token = request_metadata.set(self.metadata_value.copy())
                    return self.correlation_id_value
                except Exception as e:
                    sys.stderr.write(f"[REQUEST-CONTEXT-ERROR] Failed to enter request context: {e}\n")
                    sys.stderr.flush()
                    return self.correlation_id_value
            
            def __exit__(self, exc_type, exc_val, exc_tb):
                try:
                    if self.corr_token is not None:
                        correlation_id.reset(self.corr_token)
                    if self.meta_token is not None:
                        request_metadata.reset(self.meta_token)
                except Exception as e:
                    sys.stderr.write(f"[REQUEST-CONTEXT-ERROR] Failed to exit request context: {e}\n")
                    sys.stderr.flush()
        
        return RequestContextManager(corr_id, metadata)


def with_correlation_context(func: Callable) -> Callable:
    """
    Decorator to ensure function runs with correlation ID context.
    
    If correlation ID doesn't exist, generates new one.
    Preserves existing correlation ID if present.
    
    Args:
        func: Function to decorate
        
    Returns:
        Decorated function with correlation context
        
    Usage:
        @with_correlation_context
        async def my_function():
            # This function will always have correlation ID available
            corr_id = CorrelationContext.get_correlation_id()
            logger.info(f"Processing with correlation ID: {corr_id}")
    """
    try:
        if asyncio.iscoroutinefunction(func):
            @wraps(func)
            async def async_wrapper(*args, **kwargs):
                try:
                    # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ correlation ID
                    correlation_id = CorrelationContext.get_or_generate_correlation_id()
                    return await func(*args, **kwargs)
                    
                except Exception as func_error:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å correlation ID
                    try:
                        correlation_id = CorrelationContext.get_correlation_id() or "unknown"
                        sys.stderr.write(f"[DECORATOR-ERROR] Async function {func.__name__} failed (correlation_id: {correlation_id}): {func_error}\n")
                        sys.stderr.flush()
                    except Exception:
                        sys.stderr.write(f"[DECORATOR-CRITICAL] Async function {func.__name__} failed and logging failed: {func_error}\n")
                        sys.stderr.flush()
                    raise
                    
            return async_wrapper
        else:
            @wraps(func)
            def sync_wrapper(*args, **kwargs):
                try:
                    # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ correlation ID
                    correlation_id = CorrelationContext.get_or_generate_correlation_id()
                    return func(*args, **kwargs)
                    
                except Exception as func_error:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å correlation ID
                    try:
                        correlation_id = CorrelationContext.get_correlation_id() or "unknown"
                        sys.stderr.write(f"[DECORATOR-ERROR] Sync function {func.__name__} failed (correlation_id: {correlation_id}): {func_error}\n")
                        sys.stderr.flush()
                    except Exception:
                        sys.stderr.write(f"[DECORATOR-CRITICAL] Sync function {func.__name__} failed and logging failed: {func_error}\n")
                        sys.stderr.flush()
                    raise
                    
            return sync_wrapper
            
    except Exception as decorator_error:
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FALLBACK - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            sys.stderr.write(f"[DECORATOR-CRITICAL] Decorator setup failed for {func.__name__}: {decorator_error}. Using original function.\n")
            sys.stderr.flush()
        except Exception:
            pass
        return func


def log_with_correlation(logger_func: Callable) -> Callable:
    """
    Decorator to automatically add correlation ID to log messages.
    
    Args:
        logger_func: Logger function (logger.info, logger.error, etc.)
        
    Returns:
        Enhanced logger function with correlation ID
        
    Usage:
        @log_with_correlation
        def enhanced_info(message, *args, **kwargs):
            return logger.info(message, *args, **kwargs)
    """
    @wraps(logger_func)
    def wrapper(message: str, *args, **kwargs):
        corr_id = CorrelationContext.get_correlation_id()
        if corr_id:
            # Add correlation ID to extra fields
            extra = kwargs.get('extra', {})
            extra['correlation_id'] = corr_id
            kwargs['extra'] = extra
            
            # Prefix message with correlation ID for easy reading
            if not message.startswith('['):
                message = f"[{corr_id}] {message}"
        
        return logger_func(message, *args, **kwargs)
    return wrapper


class CorrelationLoggingAdapter(logging.LoggerAdapter):
    """
    Logging adapter that automatically adds correlation ID to all log records.
    
    Usage:
        logger = logging.getLogger(__name__)
        corr_logger = CorrelationLoggingAdapter(logger)
        corr_logger.info("This message will have correlation ID")
    """
    
    def process(self, msg, kwargs):
        """üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ correlation ID –∫ log record."""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º correlation ID
            try:
                corr_id = CorrelationContext.get_correlation_id()
            except Exception as corr_error:
                sys.stderr.write(f"[ADAPTER-WARNING] Failed to get correlation ID: {corr_error}\n")
                sys.stderr.flush()
                corr_id = None
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            try:
                metadata = CorrelationContext.get_request_metadata()
            except Exception as meta_error:
                sys.stderr.write(f"[ADAPTER-WARNING] Failed to get metadata: {meta_error}\n")
                sys.stderr.flush()
                metadata = {}
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º extra –ø–æ–ª—è
            try:
                extra = kwargs.get('extra', {})
                if not isinstance(extra, dict):
                    extra = {}
                
                # –î–æ–±–∞–≤–ª—è–µ–º correlation ID
                if corr_id:
                    extra['correlation_id'] = corr_id
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                for key, value in metadata.items():
                    if key not in extra:  # –ù–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                        try:
                            extra[key] = value
                        except Exception as field_error:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            sys.stderr.write(f"[ADAPTER-WARNING] Failed to add metadata field {key}: {field_error}\n")
                            sys.stderr.flush()
                
                if extra:
                    kwargs['extra'] = extra
                    
            except Exception as extra_error:
                sys.stderr.write(f"[ADAPTER-ERROR] Failed to process extra fields: {extra_error}\n")
                sys.stderr.flush()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            try:
                if corr_id and not str(msg).startswith('['):
                    msg = f"[{corr_id}] {msg}"
            except Exception as prefix_error:
                sys.stderr.write(f"[ADAPTER-WARNING] Failed to add correlation prefix: {prefix_error}\n")
                sys.stderr.flush()
            
            return msg, kwargs
            
        except Exception as general_error:
            # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FALLBACK - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            try:
                sys.stderr.write(f"[ADAPTER-CRITICAL] Complete process failure: {general_error}\n")
                sys.stderr.flush()
            except Exception:
                pass
            return msg, kwargs


# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï Convenience functions –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞

def get_correlation_id_safe() -> Optional[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ correlation ID."""
    return get_correlation_id()

def set_correlation_id_safe(corr_id: Optional[str] = None) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ correlation ID."""
    return set_correlation_id(corr_id)

def generate_correlation_id_safe() -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è correlation ID."""
    return safe_generate_correlation_id()

def get_or_generate_correlation_id_safe() -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è correlation ID."""
    current_id = get_correlation_id()
    if current_id is None:
        current_id = set_correlation_id()
    return current_id

# üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_or_generate_correlation_id() -> str:
    """
    üõ°Ô∏è –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è correlation ID.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ performance_optimizer.py
    """
    try:
        return CorrelationContext.get_or_generate_correlation_id()
    except Exception as e:
        sys.stderr.write(f"[COMPATIBILITY-ERROR] get_or_generate_correlation_id failed: {e}\n")
        sys.stderr.flush()
        return safe_generate_correlation_id()

def generate_correlation_id() -> str:
    """
    üõ°Ô∏è –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è correlation ID.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    """
    try:
        return CorrelationContext.generate_correlation_id()
    except Exception as e:
        sys.stderr.write(f"[COMPATIBILITY-ERROR] generate_correlation_id failed: {e}\n")
        sys.stderr.flush()
        return safe_generate_correlation_id()

# –ê–ª–∏–∞—Å—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
set_correlation_id_compat = set_correlation_id
get_correlation_id_compat = get_correlation_id

# üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
def get_request_metadata_compat() -> Dict[str, Any]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è get_request_metadata."""
    try:
        return CorrelationContext.get_request_metadata()
    except Exception as e:
        sys.stderr.write(f"[COMPATIBILITY-ERROR] get_request_metadata_compat failed: {e}\n")
        sys.stderr.flush()
        return {}

def set_request_metadata_compat(metadata: Dict[str, Any]) -> None:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è set_request_metadata."""
    try:
        CorrelationContext.set_request_metadata(metadata)
    except Exception as e:
        sys.stderr.write(f"[COMPATIBILITY-ERROR] set_request_metadata_compat failed: {e}\n")
        sys.stderr.flush()

def clear_correlation_context_compat() -> bool:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è clear_correlation_context."""
    try:
        return clear_correlation_context()
    except Exception as e:
        sys.stderr.write(f"[COMPATIBILITY-ERROR] clear_correlation_context_compat failed: {e}\n")
        sys.stderr.flush()
        return False

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'get_correlation_id',
    'set_correlation_id', 
    'generate_correlation_id',
    'get_or_generate_correlation_id',
    'get_request_metadata',
    'set_request_metadata',
    'clear_correlation_context',
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'safe_generate_correlation_id',
    'get_correlation_context_info',
    # –ö–ª–∞—Å—Å—ã
    'CorrelationContext',
    'CorrelationLoggingAdapter',
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    'with_correlation_context',
    'log_with_correlation',
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    'get_correlation_id_compat',
    'set_correlation_id_compat',
    'get_request_metadata_compat',
    'set_request_metadata_compat',
    'clear_correlation_context_compat'
] 