"""
RAG Construction Materials API

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è API —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å RAG.
"""

import os
from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi.openapi.utils import get_openapi
from fastapi.responses import JSONResponse, HTMLResponse

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from core.logging import get_logger
from core.logging.base.loggers import setup_structured_logging
from core.logging.metrics.collectors import get_metrics_collector
from core.logging.context import CorrelationContext, with_correlation_context

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ middleware
from api.routes import (
    health_router, search_router, materials_router, prices_router, reference_router,
    advanced_search_router, tunnel_router
)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from core.config.base import settings
from core.middleware.factory import create_middleware_stack
from core.dependencies.tunnel import get_ssh_tunnel_service

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = get_logger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG",
    docs_url=None,
    redoc_url=None,
    openapi_url=None,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
if settings.BACKEND_CORS_ORIGINS:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.BACKEND_CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ middleware
create_middleware_stack(app)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(health_router, prefix=settings.API_V1_STR, tags=["health"])
app.include_router(search_router, prefix=settings.API_V1_STR, tags=["search"])
app.include_router(materials_router, prefix=settings.API_V1_STR, tags=["materials"])
app.include_router(prices_router, prefix=settings.API_V1_STR, tags=["prices"])
app.include_router(reference_router, prefix=settings.API_V1_STR, tags=["reference"])
app.include_router(advanced_search_router, prefix=settings.API_V1_STR, tags=["advanced-search"])
app.include_router(tunnel_router, prefix=settings.API_V1_STR, tags=["tunnel"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if os.getenv("ENABLE_STRUCTURED_LOGGING", "").lower() in ("true", "1", "yes", "y"):
    setup_structured_logging()


@app.on_event("startup")
async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    metrics = get_metrics_collector()
    metrics.increment_counter("app_starts")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è
    if settings.ENABLE_SSH_TUNNEL:
        try:
            tunnel_service = get_ssh_tunnel_service()
            await tunnel_service.start()
            logger.info("SSH —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ SSH —Ç—É–Ω–Ω–µ–ª—è: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª—è
    if settings.ENABLE_SSH_TUNNEL:
        try:
            tunnel_service = get_ssh_tunnel_service()
            await tunnel_service.stop()
            logger.info("SSH —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ SSH —Ç—É–Ω–Ω–µ–ª—è: {e}")


@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html(request: Request) -> HTMLResponse:
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Swagger UI."""
    return get_swagger_ui_html(
        openapi_url=f"{settings.API_V1_STR}/openapi.json",
        title=f"{settings.PROJECT_NAME} - Swagger UI",
        oauth2_redirect_url=f"{settings.API_V1_STR}/docs/oauth2-redirect",
        swagger_js_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js",
        swagger_css_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css",
    )


@app.get(f"{settings.API_V1_STR}/openapi.json", include_in_schema=False)
@with_correlation_context
async def get_openapi_endpoint():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è OpenAPI —Å—Ö–µ–º—ã."""
    with CorrelationContext.with_correlation_id():
        return JSONResponse(
            get_openapi(
                title=settings.PROJECT_NAME,
                version=settings.VERSION,
                description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG",
                routes=app.routes,
            )
        )


@app.get("/", include_in_schema=False)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é."""
    return HTMLResponse(
        """
        <html>
            <head>
                <title>RAG Construction Materials API</title>
                <meta http-equiv="refresh" content="0;url=/docs" />
            </head>
            <body>
                <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ <a href="/docs">–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é</a>...</p>
            </body>
        </html>
        """
    ) 