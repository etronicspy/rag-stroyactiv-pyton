"""
Monitoring endpoints for system health and performance metrics.

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import asyncio
import logging
from typing import Dict, Any
from fastapi import APIRouter
from fastapi.responses import JSONResponse
from datetime import datetime
import time

from core.database.pool_manager import get_pool_manager
from core.config import get_settings

logger = logging.getLogger(__name__)
router = APIRouter()


@router.get("/health", summary="üîç System Health Check - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
async def health_check():
    """
    üè• **System Health Check** - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã, –≤–∫–ª—é—á–∞—è 
    –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º.
    
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—É–ª–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
    - ‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    - üö® –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
    - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - üéØ –ú—É–ª—å—Ç–∏—Å—Ç–∞—Ç—É—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    
    **–°—Ç–∞—Ç—É—Å—ã —Å–∏—Å—Ç–µ–º—ã:**
    - `healthy` - –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    - `degraded` - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    - `unhealthy` - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    - `error` - –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
    
    **Response Status Codes:**
    - **200 OK**: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    - **207 Multi-Status**: –ß–∞—Å—Ç–∏—á–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
    - **503 Service Unavailable**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω—ã
    
    **Example Response (Healthy):**
    ```json
    {
        "status": "healthy",
        "timestamp": "2025-06-16T19:08:36.074112Z",
        "version": "1.0.0",
        "environment": "production",
        "checks": {
            "qdrant_pool": {
                "status": "healthy",
                "response_time_ms": 45
            },
            "postgresql_pool": {
                "status": "healthy", 
                "response_time_ms": 12
            },
            "redis_pool": {
                "status": "healthy",
                "response_time_ms": 8
            }
        }
    }
    ```
    
    **Example Response (Degraded):**
    ```json
    {
        "status": "degraded",
        "timestamp": "2025-06-16T19:08:36.074112Z",
        "version": "1.0.0",
        "environment": "production",
        "checks": {
            "qdrant_pool": {
                "status": "healthy",
                "response_time_ms": 45
            },
            "postgresql_pool": {
                "status": "timeout",
                "error": "Health check timed out"
            },
            "redis_pool": {
                "status": "error",
                "error": "Connection refused"
            }
        }
    }
    ```
    
    **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
    - üèóÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ production
    - üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    - üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
    - üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - ‚öñÔ∏è Load balancer health checks
    - üê≥ Kubernetes liveness/readiness probes
    - üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Prometheus, Grafana)
    
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
    - –í—ã–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–µ 30-60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã `degraded` –∏ `unhealthy`
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ `response_time_ms` –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    settings = get_settings()
    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "checks": {}
    }
    
    pool_manager = get_pool_manager()
    
    try:
        # Check all registered pools
        for pool_name in pool_manager.pools.keys():
            pool = pool_manager.pools[pool_name]
            try:
                start_time = time.time()
                is_healthy = await asyncio.wait_for(pool.health_check(), timeout=5.0)
                response_time = round((time.time() - start_time) * 1000, 2)
                
                health_status["checks"][pool_name] = {
                    "status": "healthy" if is_healthy else "unhealthy",
                    "response_time_ms": response_time
                }
                
                if not is_healthy:
                    health_status["status"] = "degraded"
                    
            except asyncio.TimeoutError:
                health_status["checks"][pool_name] = {
                    "status": "timeout",
                    "error": "Health check timed out",
                    "response_time_ms": 5000  # Timeout threshold
                }
                health_status["status"] = "degraded"
                
            except Exception as e:
                health_status["checks"][pool_name] = {
                    "status": "error",
                    "error": str(e),
                    "response_time_ms": None
                }
                health_status["status"] = "unhealthy"
    
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        health_status["status"] = "error"
        health_status["error"] = str(e)
    
    # Return appropriate HTTP status
    status_code = 200
    if health_status["status"] == "degraded":
        status_code = 207  # Multi-status
    elif health_status["status"] in ["unhealthy", "error"]:
        status_code = 503  # Service unavailable
    
    return JSONResponse(content=health_status, status_code=status_code) 