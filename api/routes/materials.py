"""Refactored Materials API routes using new multi-database architecture.

–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ API —Ä–æ—É—Ç—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –Ω–æ–≤–æ–π –º—É–ª—å—Ç–∏-–ë–î –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends
from datetime import datetime

from core.logging import get_logger
from core.schemas.materials import (
    MaterialCreate, MaterialUpdate, Material, MaterialSearchQuery, 
    MaterialBatchCreate, MaterialBatchResponse, MaterialImportRequest
)
from core.schemas.response_models import ERROR_RESPONSES
from core.database.interfaces import IVectorDatabase
from core.dependencies.database import get_vector_db_dependency, get_ai_client_dependency
from core.database.exceptions import DatabaseError
from services.materials import MaterialsService


logger = get_logger(__name__)
router = APIRouter(responses=ERROR_RESPONSES)


def get_materials_service(
    vector_db: IVectorDatabase = Depends(get_vector_db_dependency),
    ai_client = Depends(get_ai_client_dependency)
) -> MaterialsService:
    """Get MaterialsService with dependency injection (Qdrant-only mode).
    
    Args:
        vector_db: Vector database client (injected)
        ai_client: AI client for embeddings (injected)
        
    Returns:
        Configured MaterialsService instance
    """
    try:
        return MaterialsService(vector_db=vector_db, ai_client=ai_client)
    except Exception as e:
        logger.error(f"Failed to initialize MaterialsService: {e}")
        # For now, return None to trigger fallback behavior
        return None


@router.get(
    "/health",
    summary="Materials Health ‚Äì –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    response_description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
)
async def health_check(
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üîç **Materials Service Health Check** - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ Qdrant-only –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    - üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
    - ‚ö° –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    - üéØ –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    **Response Status Codes:**
    - **200 OK**: –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    - **206 Partial Content**: –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    - **503 Service Unavailable**: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    
    **Example Response:**
    ```json
    {
        "status": "healthy",
        "service": "MaterialsService",
        "mode": "qdrant-only",
        "service_status": "operational",
        "vector_database": {
            "status": "healthy",
            "database_type": "Qdrant",
            "collections_count": 3,
            "total_vectors": 15420,
            "response_time_ms": 156.3
        },
        "available_endpoints": {
            "search": "POST /api/v1/materials/search",
            "batch": "POST /api/v1/materials/batch",
            "import": "POST /api/v1/materials/import",
            "list": "GET /api/v1/materials/",
            "get_by_id": "GET /api/v1/materials/{id}",
            "create": "POST /api/v1/materials/",
            "update": "PUT /api/v1/materials/{id}",
            "delete": "DELETE /api/v1/materials/{id}"
        }
    }
    ```
    
    **Use Cases:**
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints
    """
    health_status = {
        "status": "healthy",
        "service": "MaterialsService",
        "mode": "qdrant-only",
        "available_endpoints": {
            "search": "POST /api/v1/materials/search",
            "batch": "POST /api/v1/materials/batch", 
            "import": "POST /api/v1/materials/import",
            "list": "GET /api/v1/materials/",
            "get_by_id": "GET /api/v1/materials/{id}",
            "create": "POST /api/v1/materials/",
            "update": "PUT /api/v1/materials/{id}",
            "delete": "DELETE /api/v1/materials/{id}"
        }
    }
    
    # Try to check service health
    if service is None:
        health_status.update({
            "status": "degraded",
            "service_status": "initialization_failed",
            "message": "MaterialsService failed to initialize, running in fallback mode"
        })
    else:
        try:
            # Try to check vector database health
            vector_health = await service.vector_db.health_check()
            health_status.update({
                "vector_database": vector_health,
                "service_status": "operational"
            })
        except Exception as e:
            health_status.update({
                "status": "degraded",
                "service_status": "vector_db_error",
                "vector_db_error": str(e),
                "message": "Vector database connection issues detected"
            })
    
    return health_status


@router.post(
    "/",
    response_model=Material,
    responses=ERROR_RESPONSES,
    summary="‚ûï Create Material ‚Äì –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
    response_description="–°–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
)
async def create_material(
    material: MaterialCreate,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    ‚ûï **Create Material** - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ embedding
    –¥–ª—è –ø–æ–∏—Å–∫–∞. –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üß† –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è 1536-–º–µ—Ä–Ω–æ–≥–æ embedding (OpenAI)
    - üîç –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    - ‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ UUID
    - üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    - ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    
    **Required Fields:**
    - `name`: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (2-200 —Å–∏–º–≤–æ–ª–æ–≤)
    - `use_category`: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    - `unit`: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    
    **Optional Fields:**
    - `sku`: –ê—Ä—Ç–∏–∫—É–ª/–∫–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (3-50 —Å–∏–º–≤–æ–ª–æ–≤)
    - `description`: –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    
    **Request Body Example:**
    ```json
    {
        "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
        "use_category": "–¶–µ–º–µ–Ω—Ç",
        "unit": "–º–µ—à–æ–∫",
        "sku": "CEM500-001",
        "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞ –±–µ–∑ –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫"
    }
    ```
    
    **Response Example:**
    ```json
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
        "use_category": "–¶–µ–º–µ–Ω—Ç",
        "unit": "–º–µ—à–æ–∫",
        "sku": "CEM500-001",
        "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞ –±–µ–∑ –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫",
        "embedding": [0.023, -0.156, 0.789, ...], // 1536 dimensions
        "created_at": "2025-06-16T16:46:29.421964Z",
        "updated_at": "2025-06-16T16:46:29.421964Z"
    }
    ```
    
    **Response Status Codes:**
    - **201 Created**: –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
    - **400 Bad Request**: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embedding –∏–ª–∏ –ë–î
    
    **Use Cases:**
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥
    - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    """
    try:
        logger.info(f"Creating material: {material.name}")
        result = await service.create_material(material)
        logger.info(f"Material created successfully: {result.id}")
        return result
    except DatabaseError as e:
        logger.error(f"Database error creating material: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error creating material: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.get(
    "/{material_id}",
    response_model=Material,
    responses=ERROR_RESPONSES,
    summary="üîç Get Material ‚Äì –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ ID",
    response_description="–î–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
)
async def get_material(
    material_id: str,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üîç **Get Material by ID** - –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –≤–∫–ª—é—á–∞—è embedding –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ UUID –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    **Path Parameters:**
    - `material_id`: UUID –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID4
    
    **Response Example:**
    ```json
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
        "use_category": "–¶–µ–º–µ–Ω—Ç",
        "unit": "–º–µ—à–æ–∫",
        "sku": "CEM500-001",
        "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞",
        "embedding": [0.023, -0.156, 0.789, ...], // 1536 dimensions
        "created_at": "2025-06-16T16:46:29.421964Z",
        "updated_at": "2025-06-16T16:46:29.421964Z"
    }
    ```
    
    **Response Status Codes:**
    - **200 OK**: –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω
    - **404 Not Found**: –ú–∞—Ç–µ—Ä–∏–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω
    - **400 Bad Request**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î
    
    **Use Cases:**
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
    - –ê–Ω–∞–ª–∏–∑ embedding –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    try:
        logger.debug(f"Getting material: {material_id}")
        material = await service.get_material(material_id)
        if not material:
            logger.warning(f"Material not found: {material_id}")
            raise HTTPException(status_code=404, detail="Material not found")
        return material
    except HTTPException:
        raise  # Re-raise HTTP exceptions
    except DatabaseError as e:
        logger.error(f"Database error getting material: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error getting material: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.post(
    "/search",
    response_model=List[Material],
    responses=ERROR_RESPONSES,
    summary="üîé Search Materials ‚Äì –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    response_description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
)
async def search_materials(
    query: MaterialSearchQuery,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üîç **Semantic Material Search** - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 
    –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö embeddings –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fallback-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    
    **üîÑ Fallback Strategy:**
    1. **Vector Search**: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ embedding
    2. **SQL LIKE Search**: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    3. **Fuzzy Matching**: –ü–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üß† AI-powered —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    - üîç –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    - üìä –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    - ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ (< 300ms)
    - üõ°Ô∏è Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    **Request Body Example:**
    ```json
    {
        "query": "—Ü–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏",
        "limit": 20
    }
    ```
    
    **Response Example:**
    ```json
    [
        {
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
            "use_category": "–¶–µ–º–µ–Ω—Ç",
            "unit": "–º–µ—à–æ–∫",
            "sku": "CEM500-001",
            "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞",
            "embedding": null, // Hidden in search results
            "created_at": "2025-06-16T16:46:29.421964Z",
            "updated_at": "2025-06-16T16:46:29.421964Z"
        },
        {
            "id": "550e8400-e29b-41d4-a716-446655440001",
            "name": "–¶–µ–º–µ–Ω—Ç –ú400 –±—ã—Å—Ç—Ä–æ—Ç–≤–µ—Ä–¥–µ—é—â–∏–π",
            "use_category": "–¶–µ–º–µ–Ω—Ç",
            "unit": "—Ç",
            "sku": "CEM400-BT",
            "description": "–ë—ã—Å—Ç—Ä–æ—Ç–≤–µ—Ä–¥–µ—é—â–∏–π –ø–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç",
            "embedding": null,
            "created_at": "2025-06-16T16:46:29.421964Z",
            "updated_at": "2025-06-16T16:46:29.421964Z"
        }
    ]
    ```
    
    **Query Parameters:**
    - `query`: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (min: 1 —Å–∏–º–≤–æ–ª, max: 500 —Å–∏–º–≤–æ–ª–æ–≤)
    - `limit`: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-100, default: 10)
    
    **Response Status Codes:**
    - **200 OK**: –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
    - **400 Bad Request**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    
    **Search Examples:**
    - `"—Ü–µ–º–µ–Ω—Ç –ú500"` ‚Üí –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Ü–µ–º–µ–Ω—Ç—ã –º–∞—Ä–∫–∏ –ú500
    - `"–∞—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è"` ‚Üí –Ω–∞–π–¥–µ—Ç —Å—Ç–∞–ª—å–Ω—É—é –∞—Ä–º–∞—Ç—É—Ä—É –≤—Å–µ—Ö –≤–∏–¥–æ–≤
    - `"—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π"` ‚Üí –Ω–∞–π–¥–µ—Ç –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ —É—Ç–µ–ø–ª–∏—Ç–µ–ª–∏
    - `"–∫–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π"` ‚Üí –Ω–∞–π–¥–µ—Ç –ª–∏—Ü–µ–≤–æ–π –∫—Ä–∞—Å–Ω—ã–π –∫–∏—Ä–ø–∏—á
    
    **Use Cases:**
    - –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    - –ü–æ–¥–±–æ—Ä –∞–Ω–∞–ª–æ–≥–æ–≤ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ–ª–µ–π
    - –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ —Å–º–µ—Ç
    - API –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    try:
        # Check if service initialization failed
        if service is None:
            logger.warning("MaterialsService initialization failed, returning mock response")
            return [{
                "id": "fallback-1",
                "name": f"Fallback result for '{query.query}'",
                "sku": "FB-001",
                "description": f"Fallback search result for query: {query.query} (service unavailable)",
                "use_category": "Fallback",
                "unit": "—à—Ç",
                "embedding": None,
                "created_at": None,
                "updated_at": None
            }]
        
        logger.info(f"Searching materials: '{query.query}' (limit: {query.limit})")
        results = await service.search_materials(query.query, query.limit)
        logger.info(f"Search returned {len(results)} results")
        return results
        
    except DatabaseError as e:
        logger.error(f"Database error searching materials: {e}")
        # Return fallback instead of HTTP error
        return [{
            "id": "error-fallback-1",
            "name": f"Search temporarily unavailable for '{query.query}'",
            "sku": "ERR-001", 
            "description": f"Database error occurred, please try again later",
            "use_category": "System",
            "unit": "—à—Ç",
            "embedding": None,
            "created_at": None,
            "updated_at": None
        }]
    except Exception as e:
        logger.error(f"Unexpected error searching materials: {e}")
        # Return fallback instead of HTTP error for better UX
        return [{
            "id": "exception-fallback-1",
            "name": f"Search error for '{query.query}'",
            "sku": "EXC-001",
            "description": f"An error occurred during search, please try again",
            "use_category": "System", 
            "unit": "—à—Ç",
            "embedding": None,
            "created_at": None,
            "updated_at": None
        }]


@router.get(
    "/",
    response_model=List[Material],
    summary="üìã List Materials ‚Äì –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    response_description="–°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
)
async def get_materials(
    skip: int = 0, 
    limit: int = 10, 
    category: Optional[str] = None,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üìã **List Materials** - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
    
    **Query Parameters:**
    - `skip`: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (offset) - default: 0
    - `limit`: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π - default: 10, max: 100
    - `category`: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    **Response Example:**
    ```json
    [
        {
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
            "use_category": "–¶–µ–º–µ–Ω—Ç",
            "unit": "–º–µ—à–æ–∫",
            "sku": "CEM500-001",
            "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞",
            "embedding": null, // Hidden in list view
            "created_at": "2025-06-16T16:46:29.421964Z",
            "updated_at": "2025-06-16T16:46:29.421964Z"
        }
    ]
    ```
    
    **Response Status Codes:**
    - **200 OK**: –°–ø–∏—Å–æ–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    - **400 Bad Request**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    **Pagination Examples:**
    - `GET /materials/?limit=20` ‚Üí –ø–µ—Ä–≤—ã–µ 20 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - `GET /materials/?skip=20&limit=20` ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª—ã 21-40
    - `GET /materials/?category=–¶–µ–º–µ–Ω—Ç&limit=50` ‚Üí —Ü–µ–º–µ–Ω—Ç—ã (–¥–æ 50 —à—Ç.)
    
    **Use Cases:**
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    """
    try:
        logger.debug(f"Getting materials: skip={skip}, limit={limit}, category={category}")
        results = await service.get_materials(skip=skip, limit=limit, category=category)
        logger.info(f"Retrieved {len(results)} materials")
        return results
    except DatabaseError as e:
        logger.error(f"Database error getting materials: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error getting materials: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.put(
    "/{material_id}",
    response_model=Material,
    summary="‚úèÔ∏è Update Material ‚Äì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
    response_description="–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
)
async def update_material(
    material_id: str,
    material: MaterialUpdate,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    ‚úèÔ∏è **Update Material** - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ embedding –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π (name, description). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç embedding –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
    - üìù –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
    - ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ updated_at
    - ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    
    **Path Parameters:**
    - `material_id`: UUID –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    **Updateable Fields:**
    - `name`: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Ç—Ä–∏–≥–≥–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç embedding)
    - `use_category`: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
    - `unit`: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    - `sku`: –ê—Ä—Ç–∏–∫—É–ª/–∫–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    - `description`: –û–ø–∏—Å–∞–Ω–∏–µ (—Ç—Ä–∏–≥–≥–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç embedding)
    
    **Request Body Example:**
    ```json
    {
        "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0 (—É–ª—É—á—à–µ–Ω–Ω—ã–π)",
        "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏",
        "sku": "CEM500-001-V2"
    }
    ```
    
    **Response Example:**
    ```json
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0 (—É–ª—É—á—à–µ–Ω–Ω—ã–π)",
        "use_category": "–¶–µ–º–µ–Ω—Ç",
        "unit": "–º–µ—à–æ–∫",
        "sku": "CEM500-001-V2",
        "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏",
        "embedding": [0.021, -0.134, 0.756, ...], // Updated embedding
        "created_at": "2025-06-16T16:46:29.421964Z",
        "updated_at": "2025-06-16T17:30:15.123456Z" // Updated timestamp
    }
    ```
    
    **Response Status Codes:**
    - **200 OK**: –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
    - **404 Not Found**: –ú–∞—Ç–µ—Ä–∏–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω
    - **400 Bad Request**: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ embedding
    
    **Use Cases:**
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    - –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    """
    try:
        logger.info(f"Updating material: {material_id}")
        result = await service.update_material(material_id, material)
        if not result:
            logger.warning(f"Material not found for update: {material_id}")
            raise HTTPException(status_code=404, detail="Material not found")
        logger.info(f"Material updated successfully: {material_id}")
        return result
    except HTTPException:
        raise  # Re-raise HTTP exceptions
    except DatabaseError as e:
        logger.error(f"Database error updating material: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error updating material: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.delete(
    "/{material_id}",
    summary="üóëÔ∏è Delete Material ‚Äì –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
    response_description="–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è"
)
async def delete_material(
    material_id: str,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üóëÔ∏è **Delete Material** - –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    
    –£–¥–∞–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ UUID. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è,
    –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.
    
    **‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è!**
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üî• –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    - üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    - üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–∏—Å–∫–∞
    - ‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    - üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    
    **Path Parameters:**
    - `material_id`: UUID –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    **Response Example:**
    ```json
    {
        "success": true,
        "message": "Material deleted successfully",
        "deleted_id": "550e8400-e29b-41d4-a716-446655440000",
        "timestamp": "2025-06-16T17:30:15.123456Z"
    }
    ```
    
    **Response Status Codes:**
    - **200 OK**: –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
    - **404 Not Found**: –ú–∞—Ç–µ—Ä–∏–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω
    - **400 Bad Request**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    
    **Use Cases:**
    - –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    - –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    
    **‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
    - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
    - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    """
    try:
        logger.info(f"Deleting material: {material_id}")
        success = await service.delete_material(material_id)
        if not success:
            logger.warning(f"Material not found for deletion: {material_id}")
            raise HTTPException(status_code=404, detail="Material not found")
        logger.info(f"Material deleted successfully: {material_id}")
        return {
            "success": True,
            "message": "Material deleted successfully",
            "deleted_id": material_id,
            "timestamp": datetime.utcnow().isoformat()
        }
    except HTTPException:
        raise  # Re-raise HTTP exceptions
    except DatabaseError as e:
        logger.error(f"Database error deleting material: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error deleting material: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.post(
    "/batch",
    response_model=MaterialBatchResponse,
    summary="üì¶ Batch Create Materials ‚Äì –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    response_description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
)
async def create_materials_batch(
    batch_data: MaterialBatchCreate,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üì¶ **Batch Create Materials** - –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - —á–∞—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ embedding'–æ–≤
    - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - üîÑ Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    - üõ°Ô∏è Graceful handling –æ—à–∏–±–æ–∫
    - üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–∫–∏–Ω–≥
    
    **–õ–∏–º–∏—Ç—ã:**
    - **–ú–∏–Ω–∏–º—É–º**: 1 –º–∞—Ç–µ—Ä–∏–∞–ª
    - **–ú–∞–∫—Å–∏–º—É–º**: 1000 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
    - **Batch size**: 100 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
    - **Timeout**: 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
    
    **Request Body Example:**
    ```json
    {
        "materials": [
            {
                "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500",
                "use_category": "–¶–µ–º–µ–Ω—Ç",
                "unit": "–º–µ—à–æ–∫",
                "sku": "CEM500-001",
                "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç"
            },
            {
                "name": "–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π",
                "use_category": "–ö–∏—Ä–ø–∏—á",
                "unit": "—à—Ç",
                "sku": "BRICK-001",
                "description": "–ü–æ–ª–Ω–æ—Ç–µ–ª—ã–π –∫–∏—Ä–ø–∏—á"
            }
        ],
        "batch_size": 100
    }
    ```
    
    **Response Example:**
    ```json
    {
        "success": true,
        "total_processed": 2,
        "successful_materials": [
            {
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500",
                "use_category": "–¶–µ–º–µ–Ω—Ç",
                "unit": "–º–µ—à–æ–∫",
                "sku": "CEM500-001",
                "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç",
                "embedding": [...],
                "created_at": "2025-06-16T17:30:15.123456Z",
                "updated_at": "2025-06-16T17:30:15.123456Z"
            }
        ],
        "failed_materials": [
            {
                "index": 1,
                "material": {...},
                "error": "Duplicate SKU: BRICK-001"
            }
        ],
        "processing_time_seconds": 45.6,
        "successful_count": 1,
        "failed_count": 1,
        "success_rate": 50.0,
        "errors": []
    }
    ```
    
    **Response Status Codes:**
    - **200 OK**: Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ success_rate)
    - **400 Bad Request**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ batch
    - **413 Payload Too Large**: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - **500 Internal Server Error**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    **Use Cases:**
    - –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
    - –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å ERP —Å–∏—Å—Ç–µ–º–∞–º–∏
    """
    try:
        logger.info(f"Processing batch create: {len(batch_data.materials)} materials")
        result = await service.create_materials_batch(batch_data.materials, batch_data.batch_size)
        logger.info(f"Batch create completed: {result.successful_count}/{result.total_processed} successful")
        return result
    except ValueError as e:
        logger.error(f"Invalid batch data: {e}")
        raise HTTPException(status_code=400, detail=f"Invalid batch data: {str(e)}")
    except DatabaseError as e:
        logger.error(f"Database error in batch create: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error in batch create: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


@router.post(
    "/import",
    response_model=MaterialBatchResponse,
    summary="üì• Import Materials ‚Äì –ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON/CSV",
    response_description="–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
)
async def import_materials_from_json(
    import_data: MaterialImportRequest,
    service: MaterialsService = Depends(get_materials_service)
):
    """
    üì• **Import Materials from JSON** - –ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
    
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON —Ñ–æ—Ä–º–∞—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
    –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - üìÑ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ SKU + name)
    - üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    - üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    - üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    - ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    
    **Automatic Defaults:**
    - `use_category`: "–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã" (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
    - `unit`: "—à—Ç" (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
    - `description`: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ name
    - `embedding`: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
    
    **Request Body Example:**
    ```json
    {
        "materials": [
            {
                "sku": "CEM500-001",
                "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0"
            },
            {
                "sku": "BRICK-001", 
                "name": "–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–ª–Ω–æ—Ç–µ–ª—ã–π"
            }
        ],
        "default_use_category": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "default_unit": "–µ–¥–∏–Ω–∏—Ü–∞",
        "batch_size": 100
    }
    ```
    
    **Response Example:**
    ```json
    {
        "success": true,
        "total_processed": 2,
        "successful_materials": [
            {
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
                "use_category": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                "unit": "–µ–¥–∏–Ω–∏—Ü–∞",
                "sku": "CEM500-001",
                "description": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
                "embedding": [...],
                "created_at": "2025-06-16T17:30:15.123456Z",
                "updated_at": "2025-06-16T17:30:15.123456Z"
            }
        ],
        "failed_materials": [],
        "processing_time_seconds": 32.1,
        "successful_count": 2,
        "failed_count": 0,
        "success_rate": 100.0,
        "errors": []
    }
    ```
    
    **Response Status Codes:**
    - **200 OK**: –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ success_rate)
    - **400 Bad Request**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    - **413 Payload Too Large**: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–º–ø–æ—Ä—Ç–∞
    - **500 Internal Server Error**: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    
    **Supported Formats:**
    - Simple JSON —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    - Bulk import –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    - Export/Import –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
    - –ü—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    
    **Use Cases:**
    - –ò–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    - –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
    """
    try:
        logger.info(f"Importing materials from JSON: {len(import_data.materials)} items")
        
        # Convert import format to standard MaterialCreate format
        materials = []
        for item in import_data.materials:
            material = MaterialCreate(
                name=item.name,
                use_category=import_data.default_use_category,
                unit=import_data.default_unit,
                sku=item.sku,
                description=item.name  # Use name as description by default
            )
            materials.append(material)
        
        result = await service.create_materials_batch(materials, import_data.batch_size)
        logger.info(f"JSON import completed: {result.successful_count}/{result.total_processed} successful")
        return result
        
    except ValueError as e:
        logger.error(f"Invalid import data: {e}")
        raise HTTPException(status_code=400, detail=f"Invalid import data: {str(e)}")
    except DatabaseError as e:
        logger.error(f"Database error in import: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error in import: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

 