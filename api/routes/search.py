from fastapi import APIRouter, Query
from typing import List

from core.logging import get_logger
from core.config import get_settings
from core.schemas.materials import Material
from services.materials import MaterialsService  # for test patching
from core.schemas.response_models import ERROR_RESPONSES

router = APIRouter(responses=ERROR_RESPONSES)
logger = get_logger(__name__)
settings = get_settings()

@router.get("/search", response_model=List[Material], responses=ERROR_RESPONSES, summary="üîé Material Search ‚Äì –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", response_description="–°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É")
async def search_materials(
    q: str = Query(..., description="Search query string", alias="q"),
    limit: int = Query(10, ge=1, le=100, description="Maximum number of results to return"),
):
    """Search construction materials by text query using semantic vector search.

    –î–µ–ª–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π (vector) –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç :class:`services.materials.MaterialsService` —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (Qdrant/Weaviate/Pinecone)
    –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Args:
        q (str): User search query.
        limit (int): Upper bound for the amount of materials returned (1-100).

    Returns:
        List[Material]: Sorted list of materials matching the query ordered by similarity score.

    Raises:
        HTTPException: 500 if underlying service raises an exception.

    Example:
        ```shell
        curl -X GET "https://api.example.com/api/v1/search?q=—Ü–µ–º–µ–Ω—Ç+–ú500&limit=20"
        ```

        Example response (HTTP 200):
        ```json
        [
          {
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500 –î0",
            "use_category": "–¶–µ–º–µ–Ω—Ç",
            "unit": "–º–µ—à–æ–∫",
            "sku": "CEM500-001",
            "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ—á–Ω—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞",
            "embedding": null,
            "created_at": "2025-06-16T16:46:29.421964Z",
            "updated_at": "2025-06-16T16:46:29.421964Z"
          },
          {
            "id": "550e8400-e29b-41d4-a716-446655440001",
            "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú400",
            "use_category": "–¶–µ–º–µ–Ω—Ç",
            "unit": "–º–µ—à–æ–∫",
            "sku": "CEM400-007",
            "description": "–¶–µ–º–µ–Ω—Ç –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
            "embedding": null,
            "created_at": "2025-06-16T16:46:29.421964Z",
            "updated_at": "2025-06-16T16:46:29.421964Z"
          }
        ]
        ```

    Response Codes:
        200: Successful search.
        400: Validation error (e.g., empty query, invalid limit).
        500: Internal server error / search backend failure.
    """
    logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {q}, –ª–∏–º–∏—Ç: {limit}")
    service = MaterialsService()
    try:
        results = await service.search_materials(query=q, limit=limit)
    except Exception as e:
        logger.error(f"Search service error: {e}")
        from fastapi import HTTPException
        raise HTTPException(status_code=500, detail=str(e))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (via MaterialsService)")
    return results

# Trailing slash variant for legacy clients
@router.get("/search/", response_model=List[Material], responses=ERROR_RESPONSES, include_in_schema=False)
async def search_materials_trailing(
    q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    limit: int = Query(10, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
):
    """Legacy endpoint with trailing slash kept for backward-compatibility.

    –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤/—Å–∫—Ä–∏–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∫ "/search/" —Å
    –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Å–ª—ç—à–µ–º. –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
    :func:`search_materials` –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏.

    Args:
        q (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        limit (int): –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Returns:
        List[Material]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∏–¥–µ–Ω—Ç–∏—á–µ–Ω `/search`).
    """
    return await search_materials(q=q, limit=limit)

# Alias endpoint for backward compatibility with older tests
@router.get("/search/materials", response_model=List[Material], responses=ERROR_RESPONSES, include_in_schema=False)
async def search_materials_alias(
    query: str = Query(..., description="Search query", alias="query"),
    limit: int = Query(10, description="Maximum number of results"),
):
    """Alias for material search kept for backward-compatibility.

    This mirrors the logic of MaterialsService.search_materials used in legacy tests.
    """
    logger.info(f"[alias] Searching materials: '{query}', limit={limit}")
    # Lazy import to avoid circular dependency in tests
    from services.materials import MaterialsService

    service = MaterialsService()
    results = await service.search_materials(query=query, limit=limit)
    return results

# Root endpoint variant for unit tests (prefix handled externally)
@router.get("", response_model=List[Material], responses=ERROR_RESPONSES, include_in_schema=False)
async def search_materials_root(
    q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    limit: int = Query(10, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
):
    """Root-level alias (`/`) used mainly in unit tests.

    Args:
        q (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        limit (int): –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Returns:
        List[Material]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.
    """
    return await search_materials(q=q, limit=limit)

# Trailing slash root variant
@router.get("/", response_model=List[Material], responses=ERROR_RESPONSES, include_in_schema=False)
async def search_materials_root_slash(
    q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    limit: int = Query(10, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
):
    """Root-level alias with trailing slash (`/`).

    –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç
    —Å–ª—ç—à –ø–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏. –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ :func:`search_materials`.
    """
    return await search_materials(q=q, limit=limit) 