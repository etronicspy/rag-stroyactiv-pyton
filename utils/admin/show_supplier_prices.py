#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∞–π—Å–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
"""

import requests
import json
import sys
import os
from typing import Dict, List, Any
from collections import Counter

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def format_price(price: float, currency: str = "RUB") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if price is None:
        return "N/A"
    currency_symbol = {"RUB": "‚ÇΩ", "USD": "$", "EUR": "‚Ç¨"}.get(currency, currency)
    return f"{price:.2f} {currency_symbol}"

def truncate_text(text: str, max_length: int = 30) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
    if not text or len(text) <= max_length:
        return text or ""
    return text[:max_length-3] + "..."

def show_supplier_prices(supplier_id: str, api_url: str = "http://localhost:8000"):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∞–π—Å–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    
    print("=" * 80)
    print(f"üìã –°–¢–†–£–ö–¢–£–†–ê –ü–†–ê–ô–°–û–í –ü–û–°–¢–ê–í–©–ò–ö–ê: {supplier_id}")
    print("=" * 80)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        response = requests.get(f"{api_url}/api/v1/prices/{supplier_id}/all")
        
        if response.status_code == 404:
            print(f"‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ '{supplier_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤")
            return
        elif response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return
            
        data = response.json()
        
        if data["total_price_lists"] == 0:
            print(f"üì≠ –£ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ '{supplier_id}' –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤")
            return
        
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤: {data['total_price_lists']}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É
        for i, price_list in enumerate(data["price_lists"], 1):
            print(f"üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç #{i}")
            print(f"   üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {price_list['upload_date']}")
            print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {price_list['materials_count']}")
            
            materials = price_list["materials"]
            if not materials:
                print("   üì≠ –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                continue
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            analyze_materials_structure(materials)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            print(f"\n   üì¶ –ü–†–ò–ú–ï–†–´ –ú–ê–¢–ï–†–ò–ê–õ–û–í (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 5):")
            show_materials_sample(materials[:5])
            
            print("-" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞–º
        all_materials = []
        for price_list in data["price_lists"]:
            all_materials.extend(price_list["materials"])
        
        if all_materials:
            print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(all_materials)}):")
            show_overall_statistics(all_materials)
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def analyze_materials_structure(materials: List[Dict[str, Any]]):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    if not materials:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    sample_material = materials[0]
    
    # –ù–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if any(key in sample_material for key in ["sku", "unit_price", "calc_unit", "pricelistid"]):
        print("   üÜï –§–æ—Ä–º–∞—Ç: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (–Ω–æ–≤—ã–π)")
        analyze_extended_format(materials)
    else:
        print("   üìù –§–æ—Ä–º–∞—Ç: –ë–∞–∑–æ–≤—ã–π (legacy)")
        analyze_legacy_format(materials)

def analyze_extended_format(materials: List[Dict[str, Any]]):
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—è–º
    field_stats = {}
    price_types = ["unit_price", "unit_calc_price", "buy_price", "sale_price"]
    
    for material in materials:
        for field in material.keys():
            if field not in field_stats:
                field_stats[field] = {"total": 0, "filled": 0}
            field_stats[field]["total"] += 1
            if material[field] is not None and material[field] != "":
                field_stats[field]["filled"] += 1
    
    print("   üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π:")
    key_fields = ["name", "sku", "use_category", "calc_unit"] + price_types
    for field in key_fields:
        if field in field_stats:
            filled = field_stats[field]["filled"]
            total = field_stats[field]["total"]
            percentage = (filled / total * 100) if total > 0 else 0
            print(f"      ‚Ä¢ {field}: {filled}/{total} ({percentage:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
    print("   üí∞ –¢–∏–ø—ã —Ü–µ–Ω:")
    for price_type in price_types:
        prices = [m.get(price_type) for m in materials if m.get(price_type) is not None]
        if prices:
            avg_price = sum(prices) / len(prices)
            min_price = min(prices)
            max_price = max(prices)
            currency = materials[0].get(f"{price_type}_currency", "RUB")
            print(f"      ‚Ä¢ {price_type}: {len(prices)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Å—Ä. {format_price(avg_price, currency)}, –º–∏–Ω-–º–∞–∫—Å: {format_price(min_price, currency)}-{format_price(max_price, currency)}")

def analyze_legacy_format(materials: List[Dict[str, Any]]):
    """–ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = [m.get("use_category") for m in materials if m.get("use_category")]
    category_counts = Counter(categories)
    
    print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(category_counts)}):")
    for category, count in category_counts.most_common(5):
        print(f"      ‚Ä¢ {category}: {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    units = [m.get("unit") for m in materials if m.get("unit")]
    unit_counts = Counter(units)
    
    print(f"   üìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è ({len(unit_counts)}):")
    for unit, count in unit_counts.most_common(5):
        print(f"      ‚Ä¢ {unit}: {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    # –¶–µ–Ω—ã
    prices = [m.get("price") for m in materials if m.get("price") is not None]
    if prices:
        avg_price = sum(prices) / len(prices)
        min_price = min(prices)
        max_price = max(prices)
        print(f"   üí∞ –¶–µ–Ω—ã: —Å—Ä. {format_price(avg_price)}, –º–∏–Ω-–º–∞–∫—Å: {format_price(min_price)}-{format_price(max_price)}")

def show_materials_sample(materials: List[Dict[str, Any]]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    if not materials:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
    sample_material = materials[0]
    
    if any(key in sample_material for key in ["sku", "unit_price", "calc_unit"]):
        show_extended_materials_table(materials)
    else:
        show_legacy_materials_table(materials)

def show_extended_materials_table(materials: List[Dict[str, Any]]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    print(f"      {'‚Ññ':<2} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<25} {'SKU':<12} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–ï–¥.':<8} {'–¶–µ–Ω–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è)':<15}")
    print("      " + "-" * 82)
    
    for i, material in enumerate(materials, 1):
        name = truncate_text(material.get("name", ""), 25)
        sku = truncate_text(material.get("sku", ""), 12)
        category = truncate_text(material.get("use_category", ""), 15)
        unit = truncate_text(material.get("calc_unit", ""), 8)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–Ω: unit_price > sale_price > buy_price > unit_calc_price
        price = None
        currency = "RUB"
        for price_field in ["unit_price", "sale_price", "buy_price", "unit_calc_price"]:
            if material.get(price_field) is not None:
                price = material[price_field]
                currency = material.get(f"{price_field}_currency", "RUB")
                break
        
        price_str = format_price(price, currency) if price is not None else "N/A"
        
        print(f"      {i:<2} {name:<25} {sku:<12} {category:<15} {unit:<8} {price_str:<15}")

def show_legacy_materials_table(materials: List[Dict[str, Any]]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –±–∞–∑–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    print(f"      {'‚Ññ':<2} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<20} {'–ï–¥.':<8} {'–¶–µ–Ω–∞':<12}")
    print("      " + "-" * 75)
    
    for i, material in enumerate(materials, 1):
        name = truncate_text(material.get("name", ""), 30)
        category = truncate_text(material.get("use_category", ""), 20)
        unit = truncate_text(material.get("unit", ""), 8)
        price = material.get("price")
        price_str = format_price(price) if price is not None else "N/A"
        
        print(f"      {i:<2} {name:<30} {category:<20} {unit:<8} {price_str:<12}")

def show_overall_statistics(all_materials: List[Dict[str, Any]]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = set(m.get("use_category") for m in all_materials if m.get("use_category"))
    print(f"   üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    units = set()
    for m in all_materials:
        if m.get("unit"):
            units.add(m.get("unit"))
        if m.get("calc_unit"):
            units.add(m.get("calc_unit"))
    print(f"   üìè –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è: {len(units)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
    all_prices = []
    for m in all_materials:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–¥—ã —Ü–µ–Ω
        for price_field in ["price", "unit_price", "sale_price", "buy_price", "unit_calc_price"]:
            price = m.get(price_field)
            if price is not None:
                all_prices.append(price)
    
    if all_prices:
        print(f"   üí∞ –í—Å–µ–≥–æ —Ü–µ–Ω: {len(all_prices)}")
        print(f"   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {format_price(min(all_prices))} - {format_price(max(all_prices))}")
        print(f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {format_price(sum(all_prices) / len(all_prices))}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python utils/show_supplier_prices.py <supplier_id>")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python utils/show_supplier_prices.py –ü–æ—Å—Ç–∞–≤—â–∏–∫_–°—Ç—Ä–æ–π_–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        print("  python utils/show_supplier_prices.py supplier_1")
        return
    
    supplier_id = sys.argv[1]
    show_supplier_prices(supplier_id)

if __name__ == "__main__":
    main() 