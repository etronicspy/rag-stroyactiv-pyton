"""Demo script for PostgreSQL adapter and hybrid search capabilities.

–î–µ–º–æ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PostgreSQL –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
"""

import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Any
import sys
import os

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from core.database.adapters.postgresql_adapter import PostgreSQLDatabase
from core.database.adapters.qdrant_adapter import QdrantVectorDatabase
from core.repositories.hybrid_materials import HybridMaterialsRepository
from core.database.factories import DatabaseFactory, AIClientFactory
from core.schemas.materials import MaterialCreate
from core.config import settings

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class PostgreSQLHybridDemo:
    """Demo class for PostgreSQL and hybrid search capabilities."""
    
    def __init__(self):
        """Initialize demo with database connections."""
        self.postgresql_db = None
        self.vector_db = None
        self.hybrid_repo = None
        self.ai_client = None
    
    async def setup(self):
        """Setup database connections and repositories."""
        try:
            logger.info("üîß Setting up PostgreSQL and hybrid search demo...")
            
            # Create database clients
            self.postgresql_db = DatabaseFactory.create_relational_database()
            self.vector_db = DatabaseFactory.create_vector_database()
            self.ai_client = AIClientFactory.create_ai_client()
            
            # Create hybrid repository
            self.hybrid_repo = HybridMaterialsRepository(
                vector_db=self.vector_db,
                relational_db=self.postgresql_db,
                ai_client=self.ai_client
            )
            
            # Create PostgreSQL tables
            await self.postgresql_db.create_tables()
            
            # Ensure vector collection exists
            await self.vector_db.create_collection(
                collection_name="materials",
                vector_size=1536,
                distance="cosine"
            )
            
            logger.info("‚úÖ Setup completed successfully!")
            
        except Exception as e:
            logger.error(f"‚ùå Setup failed: {e}")
            raise
    
    async def demo_postgresql_features(self):
        """Demonstrate PostgreSQL adapter features."""
        logger.info("\nüêò === PostgreSQL Adapter Features Demo ===")
        
        try:
            # 1. Health check
            logger.info("1Ô∏è‚É£ Testing PostgreSQL health check...")
            health = await self.postgresql_db.health_check()
            logger.info(f"   Health status: {health['status']}")
            logger.info(f"   Connection pool: {health.get('connection_pool', {})}")
            logger.info(f"   Statistics: {health.get('statistics', {})}")
            
            # 2. Create test materials directly in PostgreSQL
            logger.info("\n2Ô∏è‚É£ Creating materials directly in PostgreSQL...")
            
            test_materials = [
                {
                    "name": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –ú500",
                    "use_category": "–¶–µ–º–µ–Ω—Ç",
                    "unit": "–º–µ—à–æ–∫",
                    "sku": "CEM500",
                    "description": "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –º–∞—Ä–∫–∏ –ú500 –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    "embedding": [0.1, 0.2, 0.3, 0.4, 0.5] * 307 + [0.1]  # 1536 dimensions
                },
                {
                    "name": "–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π",
                    "use_category": "–ö–∏—Ä–ø–∏—á",
                    "unit": "—à—Ç",
                    "sku": "BRICK001",
                    "description": "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞–¥–∫–∏ —Å—Ç–µ–Ω",
                    "embedding": [0.2, 0.3, 0.4, 0.5, 0.6] * 307 + [0.2]  # 1536 dimensions
                },
                {
                    "name": "–ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è –ê500–°",
                    "use_category": "–ê—Ä–º–∞—Ç—É—Ä–∞",
                    "unit": "–º",
                    "sku": "ARM500",
                    "description": "–°—Ç–∞–ª—å–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞ –ê500–° –¥–ª—è –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                    "embedding": [0.3, 0.4, 0.5, 0.6, 0.7] * 307 + [0.3]  # 1536 dimensions
                }
            ]
            
            created_materials = []
            for material_data in test_materials:
                created = await self.postgresql_db.create_material(material_data)
                created_materials.append(created)
                logger.info(f"   ‚úÖ Created: {created['name']} (ID: {created['id'][:8]}...)")
            
            # 3. Test hybrid search in PostgreSQL
            logger.info("\n3Ô∏è‚É£ Testing PostgreSQL hybrid search...")
            
            search_queries = ["—Ü–µ–º–µ–Ω—Ç", "–∫–∏—Ä–ø–∏—á", "–∞—Ä–º–∞—Ç—É—Ä–∞", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"]
            
            for query in search_queries:
                results = await self.postgresql_db.search_materials_hybrid(query, limit=5)
                logger.info(f"   üîç Query: '{query}' ‚Üí {len(results)} results")
                
                for result in results[:2]:  # Show top 2 results
                    similarity = result.get('similarity_score', 0)
                    logger.info(f"      ‚Ä¢ {result['name']} (similarity: {similarity:.3f})")
            
            # 4. Test pagination
            logger.info("\n4Ô∏è‚É£ Testing pagination...")
            
            all_materials = await self.postgresql_db.get_materials(skip=0, limit=10)
            logger.info(f"   üìÑ Retrieved {len(all_materials)} materials with pagination")
            
            # Filter by category
            cement_materials = await self.postgresql_db.get_materials(skip=0, limit=10, category="–¶–µ–º–µ–Ω—Ç")
            logger.info(f"   üè∑Ô∏è Found {len(cement_materials)} materials in '–¶–µ–º–µ–Ω—Ç' category")
            
            # 5. Test raw SQL queries
            logger.info("\n5Ô∏è‚É£ Testing raw SQL queries...")
            
            # Count materials by category
            category_stats = await self.postgresql_db.execute_query("""
                SELECT use_category, COUNT(*) as count 
                FROM materials 
                GROUP BY use_category 
                ORDER BY count DESC
            """)
            
            logger.info("   üìä Materials by category:")
            for stat in category_stats:
                logger.info(f"      ‚Ä¢ {stat['use_category']}: {stat['count']}")
            
            # 6. Test transactions
            logger.info("\n6Ô∏è‚É£ Testing transactions...")
            
            try:
                async with self.postgresql_db.begin_transaction() as transaction:
                    # This would be a real transaction in production
                    # Transaction will be automatically committed on successful exit
                    logger.info("   ‚úÖ Transaction completed successfully")
            except Exception as e:
                logger.error(f"   ‚ùå Transaction rolled back: {e}")
            
            return created_materials
            
        except Exception as e:
            logger.error(f"‚ùå PostgreSQL demo failed: {e}")
            raise
    
    async def demo_hybrid_repository(self, existing_materials: List[Dict[str, Any]]):
        """Demonstrate hybrid repository capabilities."""
        logger.info("\nüîÑ === Hybrid Repository Demo ===")
        
        try:
            # 1. Create materials using hybrid repository
            logger.info("1Ô∏è‚É£ Creating materials using hybrid repository...")
            
            hybrid_materials = [
                MaterialCreate(
                    name="–ë–µ—Ç–æ–Ω –ú300",
                    use_category="–ë–µ—Ç–æ–Ω",
                    unit="–º¬≥",
                    sku="BET300",
                    description="–¢–æ–≤–∞—Ä–Ω—ã–π –±–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú300 –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π"
                ),
                MaterialCreate(
                    name="–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π",
                    use_category="–ü–µ—Å–æ–∫",
                    unit="–º¬≥",
                    sku="SAND001",
                    description="–†–µ—á–Ω–æ–π –ø–µ—Å–æ–∫ —Å—Ä–µ–¥–Ω–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç"
                )
            ]
            
            created_hybrid = []
            for material in hybrid_materials:
                created = await self.hybrid_repo.create_material(material)
                created_hybrid.append(created)
                logger.info(f"   ‚úÖ Created in both DBs: {created.name} (ID: {created.id[:8]}...)")
            
            # 2. Test hybrid search with fallback strategy
            logger.info("\n2Ô∏è‚É£ Testing hybrid search with fallback strategy...")
            
            search_tests = [
                ("—Ü–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π", "Should find in vector DB"),
                ("—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "Should combine vector + SQL results"),
                ("—Ä–µ–¥–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª xyz", "Should fallback to SQL search"),
                ("–±–µ—Ç–æ–Ω", "Should find newly created materials")
            ]
            
            for query, description in search_tests:
                logger.info(f"   üîç Testing: {query} ({description})")
                
                # Test regular search (with fallback)
                results = await self.hybrid_repo.search_materials(query, limit=5)
                logger.info(f"      Regular search: {len(results)} results")
                
                # Test advanced hybrid search
                hybrid_results = await self.hybrid_repo.search_materials_hybrid(
                    query, 
                    limit=5,
                    vector_weight=0.7,
                    sql_weight=0.3
                )
                logger.info(f"      Hybrid search: {len(hybrid_results)} results")
                
                # Show top result
                if results:
                    top_result = results[0]
                    logger.info(f"      Top result: {top_result.name}")
            
            # 3. Test CRUD operations
            logger.info("\n3Ô∏è‚É£ Testing CRUD operations...")
            
            if created_hybrid:
                test_material = created_hybrid[0]
                
                # Read
                retrieved = await self.hybrid_repo.get_material_by_id(test_material.id)
                logger.info(f"   üìñ Retrieved: {retrieved.name if retrieved else 'Not found'}")
                
                # Update
                from core.schemas.materials import MaterialUpdate
                update_data = MaterialUpdate(
                    description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞ –ú300"
                )
                updated = await self.hybrid_repo.update_material(test_material.id, update_data)
                logger.info(f"   ‚úèÔ∏è Updated: {updated.name if updated else 'Not found'}")
                
                # List with pagination
                all_materials = await self.hybrid_repo.get_materials(skip=0, limit=10)
                logger.info(f"   üìã Listed: {len(all_materials)} materials")
            
            # 4. Test health check
            logger.info("\n4Ô∏è‚É£ Testing hybrid repository health check...")
            
            health = await self.hybrid_repo.health_check()
            logger.info(f"   üè• Overall status: {health['status']}")
            logger.info(f"   üîç Vector DB: {health['vector_database']['status']}")
            logger.info(f"   üêò PostgreSQL: {health['relational_database']['status']}")
            
            # 5. Performance comparison
            logger.info("\n5Ô∏è‚É£ Performance comparison...")
            
            import time
            
            # Vector search timing
            start_time = time.time()
            vector_results = await self.hybrid_repo._search_vector_db("—Ü–µ–º–µ–Ω—Ç", 10)
            vector_time = time.time() - start_time
            
            # SQL search timing
            start_time = time.time()
            sql_results = await self.hybrid_repo._search_relational_db("—Ü–µ–º–µ–Ω—Ç", 10)
            sql_time = time.time() - start_time
            
            # Hybrid search timing
            start_time = time.time()
            hybrid_results = await self.hybrid_repo.search_materials_hybrid("—Ü–µ–º–µ–Ω—Ç", 10)
            hybrid_time = time.time() - start_time
            
            logger.info(f"   ‚ö° Vector search: {vector_time:.3f}s ({len(vector_results)} results)")
            logger.info(f"   ‚ö° SQL search: {sql_time:.3f}s ({len(sql_results)} results)")
            logger.info(f"   ‚ö° Hybrid search: {hybrid_time:.3f}s ({len(hybrid_results)} results)")
            
        except Exception as e:
            logger.error(f"‚ùå Hybrid repository demo failed: {e}")
            raise
    
    async def demo_advanced_features(self):
        """Demonstrate advanced PostgreSQL and hybrid features."""
        logger.info("\nüöÄ === Advanced Features Demo ===")
        
        try:
            # 1. Full-text search with trigram similarity
            logger.info("1Ô∏è‚É£ Testing trigram similarity search...")
            
            # Test fuzzy matching
            fuzzy_queries = [
                "—Ü–µ–º–Ω—Ç",  # Typo in "—Ü–µ–º–µ–Ω—Ç"
                "–∫–∏—Ä–ø—á",  # Typo in "–∫–∏—Ä–ø–∏—á"
                "–∞—Ä–º–∞—Ç—Ä"  # Partial word
            ]
            
            for query in fuzzy_queries:
                results = await self.postgresql_db.search_materials_hybrid(
                    query, 
                    limit=3, 
                    similarity_threshold=0.2  # Lower threshold for fuzzy matching
                )
                logger.info(f"   üî§ Fuzzy query '{query}': {len(results)} results")
                
                for result in results[:1]:  # Show top result
                    similarity = result.get('similarity_score', 0)
                    logger.info(f"      ‚Ä¢ {result['name']} (similarity: {similarity:.3f})")
            
            # 2. Complex SQL queries with aggregations
            logger.info("\n2Ô∏è‚É£ Testing complex SQL aggregations...")
            
            # Materials statistics
            stats_query = """
                SELECT 
                    use_category,
                    COUNT(*) as total_materials,
                    COUNT(DISTINCT unit) as unique_units,
                    AVG(array_length(embedding, 1)) as avg_embedding_size
                FROM materials 
                WHERE embedding IS NOT NULL
                GROUP BY use_category
                ORDER BY total_materials DESC
            """
            
            stats = await self.postgresql_db.execute_query(stats_query)
            logger.info("   üìà Materials statistics:")
            for stat in stats:
                logger.info(
                    f"      ‚Ä¢ {stat['use_category']}: "
                    f"{stat['total_materials']} materials, "
                    f"{stat['unique_units']} units, "
                    f"avg embedding size: {stat['avg_embedding_size']:.0f}"
                )
            
            # 3. Concurrent operations test
            logger.info("\n3Ô∏è‚É£ Testing concurrent operations...")
            
            async def create_test_material(index: int):
                material = MaterialCreate(
                    name=f"–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª {index}",
                    use_category="–¢–µ—Å—Ç",
                    unit="—à—Ç",
                    sku=f"TEST{index:03d}",
                    description=f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–æ–º–µ—Ä {index}"
                )
                return await self.hybrid_repo.create_material(material)
            
            # Create 5 materials concurrently
            start_time = time.time()
            concurrent_tasks = [create_test_material(i) for i in range(5)]
            concurrent_results = await asyncio.gather(*concurrent_tasks)
            concurrent_time = time.time() - start_time
            
            logger.info(f"   ‚ö° Created {len(concurrent_results)} materials concurrently in {concurrent_time:.3f}s")
            
            # 4. Database size and performance metrics
            logger.info("\n4Ô∏è‚É£ Database metrics...")
            
            # PostgreSQL metrics
            pg_health = await self.postgresql_db.health_check()
            pg_stats = pg_health.get('statistics', {})
            
            logger.info("   üêò PostgreSQL metrics:")
            logger.info(f"      ‚Ä¢ Materials count: {pg_stats.get('materials_count', 0)}")
            logger.info(f"      ‚Ä¢ Raw products count: {pg_stats.get('raw_products_count', 0)}")
            logger.info(f"      ‚Ä¢ Database size: {pg_stats.get('database_size_mb', 0)} MB")
            
            # Vector DB metrics
            vector_health = await self.vector_db.health_check()
            logger.info("   üîç Vector DB metrics:")
            logger.info(f"      ‚Ä¢ Status: {vector_health.get('status', 'unknown')}")
            logger.info(f"      ‚Ä¢ Collections: {vector_health.get('collections_count', 0)}")
            
        except Exception as e:
            logger.error(f"‚ùå Advanced features demo failed: {e}")
            raise
    
    async def cleanup(self):
        """Cleanup demo data and close connections."""
        logger.info("\nüßπ Cleaning up demo data...")
        
        try:
            # Delete test materials
            test_materials = await self.postgresql_db.execute_query(
                "SELECT id FROM materials WHERE sku LIKE 'TEST%' OR use_category = '–¢–µ—Å—Ç'"
            )
            
            for material in test_materials:
                await self.hybrid_repo.delete_material(material['id'])
            
            logger.info(f"   üóëÔ∏è Deleted {len(test_materials)} test materials")
            
            # Close connections
            if self.postgresql_db:
                await self.postgresql_db.close()
            
            logger.info("   ‚úÖ Cleanup completed")
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup failed: {e}")
    
    async def run_full_demo(self):
        """Run the complete demo."""
        logger.info("üé¨ Starting PostgreSQL and Hybrid Search Demo")
        logger.info("=" * 60)
        
        try:
            # Setup
            await self.setup()
            
            # Run demos
            created_materials = await self.demo_postgresql_features()
            await self.demo_hybrid_repository(created_materials)
            await self.demo_advanced_features()
            
            logger.info("\nüéâ Demo completed successfully!")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå Demo failed: {e}")
            raise
        finally:
            # Always cleanup
            await self.cleanup()


async def main():
    """Main demo function."""
    demo = PostgreSQLHybridDemo()
    await demo.run_full_demo()


if __name__ == "__main__":
    # Check if required environment variables are set
    required_vars = ["POSTGRESQL_URL", "QDRANT_URL", "OPENAI_API_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Missing required environment variables: {missing_vars}")
        logger.info("Please set the following environment variables:")
        logger.info("  POSTGRESQL_URL=postgresql+asyncpg://user:password@localhost:5432/dbname")
        logger.info("  QDRANT_URL=https://your-cluster.qdrant.io")
        logger.info("  OPENAI_API_KEY=your-openai-api-key")
        sys.exit(1)
    
    # Run demo
    asyncio.run(main()) 