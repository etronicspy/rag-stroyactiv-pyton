"""
Utility for loading materials from JSON file to database
"""
import json
import asyncio
import aiohttp
from typing import List, Dict, Any
from pathlib import Path

class MaterialsLoader:
    """Utility class for loading materials from JSON files"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api/v1/materials"
    
    async def load_from_json_file(self, file_path: str, batch_size: int = 100) -> Dict[str, Any]:
        """Load materials from JSON file using the import API"""
        try:
            # Read JSON file
            with open(file_path, 'r', encoding='utf-8') as f:
                materials_data = json.load(f)
            
            print(f"Loaded {len(materials_data)} materials from {file_path}")
            
            # Prepare import request
            import_request = {
                "materials": materials_data,
                "default_category": "–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                "default_unit": "—à—Ç",
                "batch_size": batch_size
            }
            
            # Make API request
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_url}/import",
                    json=import_request,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"‚úÖ Import successful!")
                        print(f"Total processed: {result['total_processed']}")
                        print(f"Successful creates: {result['successful_creates']}")
                        print(f"Failed creates: {result['failed_creates']}")
                        print(f"Processing time: {result['processing_time_seconds']}s")
                        
                        if result['errors']:
                            print(f"‚ùå Errors ({len(result['errors'])}):")
                            for error in result['errors'][:5]:  # Show first 5 errors
                                print(f"  - {error}")
                        
                        return result
                    else:
                        error_text = await response.text()
                        print(f"‚ùå Import failed with status {response.status}: {error_text}")
                        return {"success": False, "error": error_text}
                        
        except Exception as e:
            print(f"‚ùå Error loading materials: {e}")
            return {"success": False, "error": str(e)}
    
    async def load_using_batch_api(self, materials: List[Dict[str, Any]], batch_size: int = 100) -> Dict[str, Any]:
        """Load materials using the batch API directly"""
        try:
            # Prepare batch request
            batch_request = {
                "materials": materials,
                "batch_size": batch_size
            }
            
            # Make API request
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_url}/batch",
                    json=batch_request,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"‚úÖ Batch creation successful!")
                        print(f"Total processed: {result['total_processed']}")
                        print(f"Successful creates: {result['successful_creates']}")
                        print(f"Failed creates: {result['failed_creates']}")
                        print(f"Processing time: {result['processing_time_seconds']}s")
                        
                        if result['errors']:
                            print(f"‚ùå Errors ({len(result['errors'])}):")
                            for error in result['errors'][:5]:  # Show first 5 errors
                                print(f"  - {error}")
                        
                        return result
                    else:
                        error_text = await response.text()
                        print(f"‚ùå Batch creation failed with status {response.status}: {error_text}")
                        return {"success": False, "error": error_text}
                        
        except Exception as e:
            print(f"‚ùå Error in batch creation: {e}")
            return {"success": False, "error": str(e)}
    
    async def check_api_status(self) -> bool:
        """Check if API is available"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/api/v1/health/") as response:
                    return response.status == 200
        except Exception:
            return False
    
    def convert_json_format(self, materials_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Convert JSON format from {article, name} to MaterialCreate format"""
        converted = []
        for item in materials_data:
            # Auto-categorize based on name
            category = self._infer_category(item['name'])
            unit = self._infer_unit(item['name'])
            
            converted.append({
                "name": item['name'],
                "category": category,
                "unit": unit,
                "article": item['article'],
                "description": None
            })
        return converted
    
    def _infer_category(self, name: str) -> str:
        """Infer category from material name"""
        name_lower = name.lower()
        
        category_keywords = {
            "—Ü–µ–º–µ–Ω—Ç": "–¶–µ–º–µ–Ω—Ç",
            "–±–µ—Ç–æ–Ω": "–ë–µ—Ç–æ–Ω", 
            "–∫–∏—Ä–ø–∏—á": "–ö–∏—Ä–ø–∏—á",
            "–±–ª–æ–∫": "–ë–ª–æ–∫–∏",
            "–ø–µ—Å–æ–∫": "–ü–µ—Å–æ–∫",
            "—â–µ–±–µ–Ω—å": "–©–µ–±–µ–Ω—å",
            "–∞—Ä–º–∞—Ç—É—Ä–∞": "–ê—Ä–º–∞—Ç—É—Ä–∞",
            "–º–µ—Ç–∞–ª–ª": "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç",
            "–¥–æ—Å–∫–∞": "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–±—Ä—É—Å": "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "—Ñ–∞–Ω–µ—Ä–∞": "–õ–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω": "–õ–∏—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–ø–ª–∏—Ç–∫–∞": "–ü–ª–∏—Ç–∫–∞",
            "–∫—Ä–∞—Å–∫–∞": "–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "—ç–º–∞–ª—å": "–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "—à–ø–∞—Ç–ª–µ–≤–∫–∞": "–°—É—Ö–∏–µ —Å–º–µ—Å–∏",
            "—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞": "–°—É—Ö–∏–µ —Å–º–µ—Å–∏",
            "—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å": "–¢–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è",
            "—á–µ—Ä–µ–ø–∏—Ü–∞": "–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª": "–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "—Ç—Ä—É–±–∞": "–¢—Ä—É–±—ã –∏ —Ñ–∏—Ç–∏–Ω–≥–∏",
            "–∫–∞–±–µ–ª—å": "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞",
            "–ø—Ä–æ–≤–æ–¥": "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞",
            "–æ–∫–Ω–æ": "–û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏",
            "–¥–≤–µ—Ä—å": "–û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏",
            "—Å–∞–º–æ—Ä–µ–∑": "–ö—Ä–µ–ø–µ–∂",
            "–≥–≤–æ–∑–¥—å": "–ö—Ä–µ–ø–µ–∂",
            "–±–æ–ª—Ç": "–ö—Ä–µ–ø–µ–∂"
        }
        
        for keyword, category in category_keywords.items():
            if keyword in name_lower:
                return category
        
        return "–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã"
    
    def _infer_unit(self, name: str) -> str:
        """Infer unit from material name"""
        name_lower = name.lower()
        
        unit_keywords = {
            "—Ü–µ–º–µ–Ω—Ç": "–∫–≥",
            "–ø–µ—Å–æ–∫": "–º¬≥",
            "—â–µ–±–µ–Ω—å": "–º¬≥",
            "–±–µ—Ç–æ–Ω": "–º¬≥",
            "–¥–æ—Å–∫–∞": "–º¬≥",
            "–±—Ä—É—Å": "–º¬≥",
            "–∫–∏—Ä–ø–∏—á": "—à—Ç",
            "–±–ª–æ–∫": "—à—Ç",
            "–ø–ª–∏—Ç–∫–∞": "–º¬≤",
            "–∫—Ä–∞—Å–∫–∞": "–∫–≥",
            "—ç–º–∞–ª—å": "–∫–≥",
            "–ª–∏—Å—Ç": "–º¬≤",
            "—Ä—É–ª–æ–Ω": "–º¬≤",
            "—Ç—Ä—É–±–∞": "–º",
            "–∫–∞–±–µ–ª—å": "–º",
            "–ø—Ä–æ–≤–æ–¥": "–º"
        }
        
        for keyword, unit in unit_keywords.items():
            if keyword in name_lower:
                return unit
        
        return "—à—Ç"

async def main():
    """Main function for command line usage"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Load materials from JSON file to the API")
    parser.add_argument("json_file", help="Path to JSON file with materials")
    parser.add_argument("--batch-size", type=int, default=100, help="Batch size for processing (default: 100)")
    parser.add_argument("--base-url", default="http://localhost:8000", help="Base URL of the API (default: http://localhost:8000)")
    
    args = parser.parse_args()
    
    file_path = args.json_file
    batch_size = args.batch_size
    base_url = args.base_url
    
    if not Path(file_path).exists():
        print(f"‚ùå File not found: {file_path}")
        sys.exit(1)
    
    loader = MaterialsLoader(base_url)
    
    # Check API availability
    print("Checking API availability...")
    if not await loader.check_api_status():
        print(f"‚ùå API is not available at {base_url}")
        sys.exit(1)
    
    print(f"‚úÖ API is available at {base_url}")
    
    # Load materials
    print(f"Loading materials from {file_path}...")
    result = await loader.load_from_json_file(file_path, batch_size)
    
    if result.get("success"):
        print("üéâ Materials loaded successfully!")
    else:
        print("‚ùå Failed to load materials")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 