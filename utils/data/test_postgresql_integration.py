#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç PostgreSQL.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ SSH —Ç—É–Ω–Ω–µ–ª—å –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
"""
import asyncio
import asyncpg
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from core.config import get_settings


async def get_postgresql_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        settings = get_settings()
        return await asyncpg.connect(
            host='localhost',
            port=5435,
            user='superadmin',
            password=settings.POSTGRESQL_PASSWORD,
            database='stbr_rag1'
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise


async def test_postgresql_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL —á–µ—Ä–µ–∑ SSH —Ç—É–Ω–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        conn = await get_postgresql_connection()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
        result = await conn.fetchrow("""
            SELECT 
                version() as version,
                current_database() as database,
                current_user as user,
                pg_database_size(current_database()) as db_size_bytes,
                now() as timestamp
        """)
        
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚îî‚îÄ –í–µ—Ä—Å–∏—è: {result['version']}")
        print(f"   ‚îî‚îÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {result['database']}")
        print(f"   ‚îî‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result['user']}")
        print(f"   ‚îî‚îÄ –†–∞–∑–º–µ—Ä –ë–î: {result['db_size_bytes']:,} –±–∞–π—Ç")
        print(f"   ‚îî‚îÄ –í—Ä–µ–º—è: {result['timestamp']}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False


async def test_postgresql_tables():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü PostgreSQL."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü PostgreSQL...")
    
    try:
        conn = await get_postgresql_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name, table_type
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"   ‚úÖ {table['table_name']} ({table['table_type']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        try:
            migration = await conn.fetchrow("SELECT version_num FROM alembic_version LIMIT 1")
            if migration:
                print(f"üîÑ –¢–µ–∫—É—â–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {migration['version_num']}")
            else:
                print("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


async def test_postgresql_extensions():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL...")
    
    try:
        conn = await get_postgresql_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        extensions = await conn.fetch("""
            SELECT extname, extversion 
            FROM pg_extension 
            ORDER BY extname
        """)
        
        print(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ({len(extensions)}):")
        for ext in extensions:
            print(f"   ‚úÖ {ext['extname']} v{ext['extversion']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        critical_extensions = ['pg_trgm', 'btree_gin', 'uuid-ossp']
        installed_names = [ext['extname'] for ext in extensions]
        
        for critical_ext in critical_extensions:
            if critical_ext in installed_names:
                print(f"   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {critical_ext} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {critical_ext} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {e}")
        return False


async def test_postgresql_materials_table():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π materials."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã materials...")
    
    try:
        conn = await get_postgresql_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã materials
        columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'materials' AND table_schema = 'public'
            ORDER BY ordinal_position
        """)
        
        if columns:
            print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã materials ({len(columns)} –∫–æ–ª–æ–Ω–æ–∫):")
            for col in columns:
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
                print(f"   ‚îî‚îÄ {col['column_name']}: {col['data_type']} {nullable}{default}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            count_result = await conn.fetchrow("SELECT COUNT(*) as count FROM materials")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –ë–î: {count_result['count']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            if count_result['count'] > 0:
                samples = await conn.fetch("SELECT id, name, description FROM materials LIMIT 3")
                print("üìù –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
                for sample in samples:
                    print(f"   ‚îî‚îÄ [{sample['id']}] {sample['name']}")
                    if sample['description']:
                        print(f"      {sample['description'][:100]}...")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ materials –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
        
        await conn.close()  
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π materials: {e}")
        return False


async def test_postgresql_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL...")
    
    try:
        conn = await get_postgresql_connection()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        start_time = datetime.now()
        
        result = await conn.fetchrow("""
            SELECT 
                COUNT(*) as total_materials,
                COUNT(DISTINCT name) as unique_names,
                AVG(LENGTH(description)) as avg_description_length
            FROM materials
        """)
        
        end_time = datetime.now()
        response_time = (end_time - start_time).total_seconds() * 1000
        
        print(f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"   ‚îî‚îÄ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}ms")
        print(f"   ‚îî‚îÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result['total_materials']}")
        print(f"   ‚îî‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: {result['unique_names']}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ avg_description_length –º–æ–∂–µ—Ç –±—ã—Ç—å None
        avg_length = result['avg_description_length']
        if avg_length is not None:
            print(f"   ‚îî‚îÄ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"   ‚îî‚îÄ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if response_time < 100:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif response_time < 500:
            print("   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif response_time < 1000:
            print("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("   ‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ PostgreSQL Integration Test")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Connection Test", test_postgresql_connection),
        ("Tables Test", test_postgresql_tables),
        ("Extensions Test", test_postgresql_extensions),
        ("Materials Table Test", test_postgresql_materials_table),
        ("Performance Test", test_postgresql_performance)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = await test_func()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test_name} failed: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    successful = sum(1 for result in results.values() if result)
    total = len(results)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} {test_name}")
    
    if successful == total:
        print("\nüéâ PostgreSQL –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif successful >= total * 0.7:
        print(f"\n‚ö†Ô∏è PostgreSQL —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤ ({successful}/{total})")
        print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        print(f"\n‚ùå PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ({successful}/{total})")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    return successful == total


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 