#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SSH —Ç—É–Ω–Ω–µ–ª—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º.

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª—è 
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import asyncio
import sys
import os
import time
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from core.config import get_settings
from utils.ssh_tunnel import SSHTunnel
from utils.data.postgresql_diagnostic import PostgreSQLDiagnostic

class SSHTunnelIntegrationTest:
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SSH —Ç—É–Ω–Ω–µ–ª—è."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞."""
        self.settings = get_settings()
        self.tunnel: Optional[SSHTunnel] = None
        
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
    
    def print_step(self, step: str):
        """–ü–µ—á–∞—Ç—å —à–∞–≥–∞."""
        print(f"\nüìã {step}")
        print("-" * 40)
    
    def test_ssh_configuration(self) -> bool:
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH —Ç—É–Ω–Ω–µ–ª—è."""
        self.print_step("SSH Tunnel Configuration Test")
        
        try:
            config = self.settings.get_ssh_tunnel_config()
            
            print(f"‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å enabled: {config['enabled']}")
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {config['local_port']}")
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç: {config['remote_host']}")
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config['remote_user']}")
            print(f"‚úÖ SSH –∫–ª—é—á: {config['key_path']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–æ–ª—è (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ)
            if config['key_passphrase']:
                print(f"‚úÖ –ü–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω ({len(config['key_passphrase'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print(f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SSH –∫–ª—é—á–∞
            key_path = Path(config['key_path']).expanduser()
            if key_path.exists():
                print(f"‚úÖ SSH –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {key_path}")
            else:
                print(f"‚ùå SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH: {e}")
            return False
    
    def test_tunnel_creation(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è."""
        self.print_step("SSH Tunnel Creation Test")
        
        try:
            self.tunnel = SSHTunnel()
            
            print("üîó –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
            success = self.tunnel.create_tunnel()
            
            if success:
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É–Ω–Ω–µ–ª—è
                if self.tunnel.is_tunnel_active():
                    print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É–Ω–Ω–µ–ª–µ
                    info = self.tunnel.get_tunnel_info()
                    print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É–Ω–Ω–µ–ª–µ:")
                    for key, value in info.items():
                        if key != "ssh_key":  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∫–ª—é—á—É
                            print(f"   {key}: {value}")
                    
                    return True
                else:
                    print("‚ùå SSH —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è: {e}")
            return False
    
    async def test_postgresql_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å."""
        self.print_step("PostgreSQL Connection Test")
        
        try:
            # –î–∞–µ–º —Ç—É–Ω–Ω–µ–ª—é –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É–Ω–Ω–µ–ª—è...")
            time.sleep(5)
            
            async with PostgreSQLDiagnostic() as diagnostic:
                print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                config_ok = await diagnostic.check_configuration()
                connection_ok = await diagnostic.check_connection()
                
                if config_ok and connection_ok:
                    print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSH —Ç—É–Ω–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    try:
                        query = "SELECT current_database(), current_user, version()"
                        result = await diagnostic.adapter.execute_query(query)
                        if result:
                            row = result[0]
                            print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {row.get('current_database', 'N/A')}")
                            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {row.get('current_user', 'N/A')}")
                            postgres_version = row.get('version', 'N/A')
                            if postgres_version != 'N/A':
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –≤–µ—Ä—Å–∏–∏
                                version_short = postgres_version.split(',')[0] if ',' in postgres_version else postgres_version
                                print(f"üìä –í–µ—Ä—Å–∏—è: {version_short}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    
                    return True
                else:
                    print("‚ùå PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL: {e}")
            return False
    
    def cleanup_tunnel(self):
        """–û—á–∏—Å—Ç–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª—è."""
        if self.tunnel:
            try:
                print("\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
                self.tunnel.close_tunnel()
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—É–Ω–Ω–µ–ª—è: {e}")
    
    async def run_full_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        self.print_header("SSH Tunnel Integration Test")
        
        try:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            tests = [
                ("Configuration", self.test_ssh_configuration),
                ("Tunnel Creation", self.test_tunnel_creation),
                ("PostgreSQL Connection", self.test_postgresql_connection)
            ]
            
            results = {}
            
            for test_name, test_func in tests:
                try:
                    if asyncio.iscoroutinefunction(test_func):
                        result = await test_func()
                    else:
                        result = test_func()
                    results[test_name] = result
                except Exception as e:
                    print(f"‚ùå –¢–µ—Å—Ç {test_name} failed: {e}")
                    results[test_name] = False
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.print_step("Integration Test Summary")
            
            successful = sum(1 for result in results.values() if result)
            total = len(results)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            
            for test_name, result in results.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {test_name}")
            
            if successful == total:
                print("\nüéâ SSH —Ç—É–Ω–Ω–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–µ–∫—Ç–æ–º!")
                print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º SSH —Ç—É–Ω–Ω–µ–ª–µ–º")
                return True
            elif successful >= total * 0.5:
                print("\n‚ö†Ô∏è SSH —Ç—É–Ω–Ω–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
                return False
            else:
                print("\n‚ùå SSH —Ç—É–Ω–Ω–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                return False
                
        finally:
            # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
            self.cleanup_tunnel()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞."""
    test = SSHTunnelIntegrationTest()
    success = await test.run_full_test()
    
    if success:
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞ –≤ .env.local:")
        print("      SSH_TUNNEL_KEY_PASSPHRASE=your_actual_passphrase")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py")
        print("   3. SSH —Ç—É–Ω–Ω–µ–ª—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        sys.exit(0)
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH –∫–ª—é—á –∏ –ø–∞—Ä–æ–ª—å")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env.local")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 