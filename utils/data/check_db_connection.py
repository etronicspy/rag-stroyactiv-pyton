#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.local
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from qdrant_client import QdrantClient
from core.config import settings
import time

def check_qdrant_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant...")
    try:
        client = QdrantClient(
            url=settings.QDRANT_URL,
            api_key=settings.QDRANT_API_KEY,
            timeout=10
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        collections = client.get_collections()
        
        print(f"‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä URL: {settings.QDRANT_URL}")
        print(f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")
        
        if collections.collections:
            print("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
            for collection in collections.collections:
                try:
                    info = client.get_collection(collection.name)
                    print(f"  ‚Ä¢ {collection.name}: {info.points_count} —Ç–æ—á–µ–∫")
                except Exception as e:
                    print(f"  ‚Ä¢ {collection.name}: (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
        else:
            print("üìã –ö–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        return False

def check_openai_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ OpenAI"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ OpenAI...")
    
    if settings.OPENAI_API_KEY:
        key_preview = settings.OPENAI_API_KEY[:20] + "..." + settings.OPENAI_API_KEY[-10:]
        print(f"‚úÖ OpenAI –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {key_preview}")
        return True
    else:
        print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑: {os.path.abspath('.env.local')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    results = []
    
    # Qdrant
    results.append(check_qdrant_connection())
    
    # OpenAI
    results.append(check_openai_key())
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    
    services = ["Qdrant", "OpenAI"]
    for i, (service, result) in enumerate(zip(services, results)):
        status = "‚úÖ –ì–æ—Ç–æ–≤" if result else "‚ùå –ü—Ä–æ–±–ª–µ–º–∞"
        print(f"  {service}: {status}")
    
    all_good = all(results)
    if all_good:
        print("\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
    return 0 if all_good else 1

if __name__ == "__main__":
    sys.exit(main()) 