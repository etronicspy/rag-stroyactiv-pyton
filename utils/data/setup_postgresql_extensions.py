#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö PostgreSQL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π.

–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pg_trgm, btree_gin, uuid-ossp –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""
import asyncio
import asyncpg
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from core.config import get_settings


async def create_extensions():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ PostgreSQL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."""
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...")
    
    settings = get_settings()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL —á–µ—Ä–µ–∑ SSH —Ç—É–Ω–Ω–µ–ª—å
        conn = await asyncpg.connect(
            host='localhost',
            port=5435,
            user='superadmin',
            password=settings.POSTGRESQL_PASSWORD,
            database='stbr_rag1'
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        extensions = [
            ('pg_trgm', 'Trigram similarity for fuzzy search'),
            ('btree_gin', 'GIN btree support for indexes'),
            ('uuid-ossp', 'UUID generation functions')
        ]
        
        success_count = 0
        
        for ext_name, description in extensions:
            try:
                await conn.execute(f'CREATE EXTENSION IF NOT EXISTS "{ext_name}";')
                print(f'‚úÖ Extension {ext_name} created/enabled - {description}')
                success_count += 1
            except Exception as e:
                print(f'‚ö†Ô∏è Extension {ext_name} failed: {e}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        extensions_query = """
        SELECT extname, extversion 
        FROM pg_extension 
        WHERE extname IN ('pg_trgm', 'btree_gin', 'uuid-ossp')
        ORDER BY extname;
        """
        
        installed_extensions = await conn.fetch(extensions_query)
        
        print(f"\nüìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ({len(installed_extensions)} –∏–∑ {len(extensions)}):")
        for ext in installed_extensions:
            print(f"   ‚úÖ {ext['extname']} v{ext['extversion']}")
        
        await conn.close()
        
        if success_count == len(extensions):
            print('\nüéâ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!')
            return True
        else:
            print(f'\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(extensions)} —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π')
            return False
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {e}')
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ PostgreSQL Extensions Setup")
    print("=" * 50)
    
    success = await create_extensions()
    
    if success:
        print("\n‚úÖ PostgreSQL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL")
        return False


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 