#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio

from .material_matcher import MaterialMatcher
from .common_utils import truncate_text, format_price

async def show_material_matches(supplier_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    print("üîç –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("="*60)
    print(f"üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_id}")
    print("="*60)
    
    matcher = MaterialMatcher()
    
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        matches = await matcher.match_materials_with_vector_search(supplier_id, top_k=5)
        
        if not matches:
            print("‚ùå –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        high_conf = [m for m in matches if m.match_confidence == "high"]
        medium_conf = [m for m in matches if m.match_confidence == "medium"] 
        low_conf = [m for m in matches if m.match_confidence == "low"]
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø—Ä–∞–π—Å–µ: {len(matches)}")
        print(f"   ‚úÖ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {len(high_conf)} ({len(high_conf)/len(matches)*100:.1f}%)")
        print(f"   üü° –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {len(medium_conf)} ({len(medium_conf)/len(matches)*100:.1f}%)")
        print(f"   üî¥ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {len(low_conf)} ({len(low_conf)/len(matches)*100:.1f}%)")
        
        avg_score = sum(m.combined_score for m in matches) / len(matches)
        print(f"   üìà –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä —Å—Ö–æ–¥—Å—Ç–≤–∞: {avg_score:.3f}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        print(f"\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-"*120)
        print(f"{'‚Ññ':>2} {'–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø—Ä–∞–π—Å–∞':<30} {'‚Üí':<2} {'–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':<30} {'–°–∫–æ—Ä':>6} {'–£–≤-—Ç—å':>8} {'–¶–µ–Ω–∞':>10}")
        print("-"*120)
        
        for i, match in enumerate(matches, 1):
            confidence_icon = {"high": "üü¢", "medium": "üü°", "low": "üî¥"}[match.match_confidence]
            
            price_name = truncate_text(match.price_item_name, 30)
            ref_name = truncate_text(match.reference_name, 30)
            price_formatted = format_price(match.price_item_price)
            
            print(f"{i:>2} {price_name:<30} ‚Üí {ref_name:<30} {match.combined_score:>6.3f} {confidence_icon}{match.match_confidence:>7} {price_formatted:>10}")
        
        # –ê–Ω–∞–ª–∏–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        print(f"\nüìè –ê–ù–ê–õ–ò–ó –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø:")
        unit_matches = {}
        for match in matches:
            unit_pair = (match.price_item_unit, match.reference_unit)
            if unit_pair not in unit_matches:
                unit_matches[unit_pair] = []
            unit_matches[unit_pair].append(match.unit_similarity)
        
        for (price_unit, ref_unit), similarities in unit_matches.items():
            avg_sim = sum(similarities) / len(similarities)
            match_icon = "‚úÖ" if price_unit == ref_unit else "‚ö†Ô∏è"
            print(f"   {match_icon} {price_unit} ‚Üí {ref_unit}: {avg_sim:.3f} —Å—Ö–æ–¥—Å—Ç–≤–æ ({len(similarities)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        print(f"\nüìÇ –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô:")
        category_matches = {}
        for match in matches:
            cat_pair = (match.price_item_category, match.reference_category)
            if cat_pair not in category_matches:
                category_matches[cat_pair] = 0
            category_matches[cat_pair] += 1
        
        for (price_cat, ref_cat), count in category_matches.items():
            match_icon = "‚úÖ" if price_cat == ref_cat else "‚ö†Ô∏è"
            print(f"   {match_icon} {price_cat} ‚Üí {ref_cat}: {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    supplier_id = "–ü–æ—Å—Ç–∞–≤—â–∏–∫_–°—Ç—Ä–æ–π_–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
    await show_material_matches(supplier_id)

if __name__ == "__main__":
    asyncio.run(main()) 