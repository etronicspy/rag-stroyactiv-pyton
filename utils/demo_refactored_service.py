"""Demo script for refactored MaterialsService with new multi-database architecture.

–î–µ–º–æ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ MaterialsService —Å –Ω–æ–≤–æ–π –º—É–ª—å—Ç–∏-–ë–î –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

import asyncio
import logging
from typing import List

from core.schemas.materials import MaterialCreate, MaterialImportItem
from core.dependencies.database import get_vector_db_dependency, get_ai_client_dependency
from services.materials_new import MaterialsService
from core.database.exceptions import DatabaseError


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def demo_refactored_service():
    """Demonstrate refactored MaterialsService functionality."""
    
    print("üöÄ Demo: Refactored MaterialsService with New Architecture")
    print("=" * 60)
    
    try:
        # Initialize service with dependency injection
        print("\n1. Initializing MaterialsService with dependency injection...")
        vector_db = get_vector_db_dependency()
        ai_client = get_ai_client_dependency()
        service = MaterialsService(vector_db=vector_db, ai_client=ai_client)
        
        await service.initialize()
        print("‚úÖ Service initialized successfully")
        
        # Test health check
        print("\n2. Testing health check...")
        health = await service.vector_db.health_check()
        print(f"‚úÖ Database health: {health.get('status', 'unknown')}")
        
        # Create test materials
        print("\n3. Creating test materials...")
        test_materials = [
            MaterialCreate(
                name="–¶–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π –ú400",
                use_category="–¶–µ–º–µ–Ω—Ç",
                unit="–∫–≥",
                sku="CEM400",
                description="–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç"
            ),
            MaterialCreate(
                name="–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π",
                use_category="–ö–∏—Ä–ø–∏—á",
                unit="—à—Ç",
                sku="BRICK001",
                description="–ü–æ–ª–Ω–æ—Ç–µ–ª—ã–π –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫–∏—Ä–ø–∏—á"
            ),
            MaterialCreate(
                name="–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π –º—ã—Ç—ã–π",
                use_category="–ü–µ—Å–æ–∫",
                unit="–º¬≥",
                sku="SAND001",
                description="–ß–∏—Å—Ç—ã–π —Ä–µ—á–Ω–æ–π –ø–µ—Å–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"
            )
        ]
        
        created_materials = []
        for material_data in test_materials:
            try:
                material = await service.create_material(material_data)
                created_materials.append(material)
                print(f"‚úÖ Created: {material.name} (ID: {material.id[:8]}...)")
            except DatabaseError as e:
                print(f"‚ùå Failed to create {material_data.name}: {e.message}")
        
        # Test search functionality
        print("\n4. Testing semantic search...")
        search_queries = ["—Ü–µ–º–µ–Ω—Ç", "–∫–∏—Ä–ø–∏—á", "–ø–µ—Å–æ–∫ –¥–ª—è –±–µ—Ç–æ–Ω–∞"]
        
        for query in search_queries:
            try:
                results = await service.search_materials(query, limit=5)
                print(f"üîç Search '{query}': {len(results)} results")
                for result in results[:2]:  # Show first 2 results
                    print(f"   - {result.name} ({result.use_category})")
            except DatabaseError as e:
                print(f"‚ùå Search failed for '{query}': {e.message}")
        
        # Test batch import
        print("\n5. Testing batch import from JSON...")
        import_items = [
            MaterialImportItem(name="–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–° 12–º–º", sku="ARM12"),
            MaterialImportItem(name="–î–æ—Å–∫–∞ –æ–±—Ä–µ–∑–Ω–∞—è 50x150x6000", sku="BOARD001"),
            MaterialImportItem(name="–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω –ö–ù–ê–£–§ 12.5–º–º", sku="GKL125"),
            MaterialImportItem(name="–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è –±–µ–ª–∞—è", sku="PAINT001"),
            MaterialImportItem(name="–¢—Ä—É–±–∞ –ü–í–• 110–º–º", sku="PIPE110")
        ]
        
        try:
            batch_result = await service.import_materials_from_json(
                import_items,
                default_category="–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                default_unit="—à—Ç",
                batch_size=3
            )
            
            print(f"‚úÖ Batch import completed:")
            print(f"   - Total processed: {batch_result.total_processed}")
            print(f"   - Successful: {batch_result.successful_creates}")
            print(f"   - Failed: {batch_result.failed_creates}")
            print(f"   - Processing time: {batch_result.processing_time_seconds}s")
            
            if batch_result.errors:
                print("   - Errors:")
                for error in batch_result.errors[:3]:  # Show first 3 errors
                    print(f"     * {error}")
                    
        except DatabaseError as e:
            print(f"‚ùå Batch import failed: {e.message}")
        
        # Test material retrieval
        print("\n6. Testing material retrieval...")
        if created_materials:
            material_id = created_materials[0].id
            try:
                retrieved = await service.get_material(material_id)
                if retrieved:
                    print(f"‚úÖ Retrieved: {retrieved.name}")
                    print(f"   - Category: {retrieved.use_category}")
                    print(f"   - Unit: {retrieved.unit}")
                    print(f"   - SKU: {retrieved.sku}")
                else:
                    print(f"‚ùå Material not found: {material_id}")
            except DatabaseError as e:
                print(f"‚ùå Retrieval failed: {e.message}")
        
        # Test material listing
        print("\n7. Testing material listing...")
        try:
            all_materials = await service.get_materials(skip=0, limit=10)
            print(f"‚úÖ Retrieved {len(all_materials)} materials")
            
            # Group by category
            categories = {}
            for material in all_materials:
                category = material.use_category
                if category not in categories:
                    categories[category] = 0
                categories[category] += 1
            
            print("   - By category:")
            for category, count in categories.items():
                print(f"     * {category}: {count}")
                
        except DatabaseError as e:
            print(f"‚ùå Listing failed: {e.message}")
        
        # Test fallback search (should return empty for now)
        print("\n8. Testing fallback search...")
        try:
            fallback_results = await service.search_materials("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª", limit=5)
            print(f"üîç Fallback search: {len(fallback_results)} results")
            if len(fallback_results) == 0:
                print("   ‚ÑπÔ∏è  Fallback to SQL search not yet implemented (–≠—Ç–∞–ø 3)")
        except DatabaseError as e:
            print(f"‚ùå Fallback search failed: {e.message}")
        
        # Cleanup (optional)
        print("\n9. Cleanup (deleting test materials)...")
        deleted_count = 0
        for material in created_materials:
            try:
                success = await service.delete_material(material.id)
                if success:
                    deleted_count += 1
            except DatabaseError as e:
                print(f"‚ùå Failed to delete {material.id}: {e.message}")
        
        print(f"‚úÖ Deleted {deleted_count} test materials")
        
        print("\n" + "=" * 60)
        print("üéâ Demo completed successfully!")
        print("\nüìä Architecture Benefits Demonstrated:")
        print("   ‚úÖ Dependency injection with @lru_cache")
        print("   ‚úÖ Structured error handling")
        print("   ‚úÖ Semantic search with fallback strategy")
        print("   ‚úÖ Batch processing with performance metrics")
        print("   ‚úÖ Health checks and monitoring")
        print("   ‚úÖ Category and unit inference")
        print("   ‚úÖ Proper logging throughout")
        
    except Exception as e:
        print(f"\n‚ùå Demo failed with unexpected error: {e}")
        logger.exception("Demo failed")


async def demo_architecture_features():
    """Demonstrate specific architecture features."""
    
    print("\nüèóÔ∏è  Architecture Features Demo")
    print("=" * 40)
    
    try:
        # Show dependency injection caching
        print("\n1. Dependency Injection Caching:")
        
        # First call - should create new instances
        vector_db1 = get_vector_db_dependency()
        ai_client1 = get_ai_client_dependency()
        
        # Second call - should return cached instances
        vector_db2 = get_vector_db_dependency()
        ai_client2 = get_ai_client_dependency()
        
        print(f"   Vector DB instances same: {vector_db1 is vector_db2}")
        print(f"   AI Client instances same: {ai_client1 is ai_client2}")
        
        # Show factory cache info
        from core.database.factories import DatabaseFactory, AIClientFactory
        
        db_cache_info = DatabaseFactory.get_cache_info()
        ai_cache_info = AIClientFactory.get_cache_info()
        
        print(f"\n2. Factory Cache Statistics:")
        print(f"   Database Factory:")
        for cache_name, info in db_cache_info.items():
            print(f"     - {cache_name}: hits={info['hits']}, misses={info['misses']}")
        
        print(f"   AI Client Factory:")
        for cache_name, info in ai_cache_info.items():
            print(f"     - {cache_name}: hits={info['hits']}, misses={info['misses']}")
        
        # Show runtime database switching capability
        print(f"\n3. Runtime Database Switching:")
        print("   ‚ÑπÔ∏è  Can switch between Qdrant Cloud/Local, Weaviate, Pinecone")
        print("   ‚ÑπÔ∏è  Configuration override support")
        print("   ‚ÑπÔ∏è  Cache clearing for testing")
        
        print(f"\n4. Error Handling Hierarchy:")
        print("   ‚úÖ DatabaseError (base)")
        print("   ‚úÖ ConnectionError (database-specific)")
        print("   ‚úÖ QueryError (operation-specific)")
        print("   ‚úÖ ConfigurationError (setup-specific)")
        
    except Exception as e:
        print(f"‚ùå Architecture demo failed: {e}")


if __name__ == "__main__":
    print("üîß RAG Construction Materials API - Refactored Service Demo")
    print("Using new multi-database architecture with dependency injection")
    
    asyncio.run(demo_refactored_service())
    asyncio.run(demo_architecture_features()) 