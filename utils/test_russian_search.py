#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
"""
import asyncio
import requests
import json
from typing import List, Dict
import sys

def test_search_api(query: str, limit: int = 3) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–æ–∏—Å–∫–∞ —Å —Ä—É—Å—Å–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    url = "http://localhost:8000/api/v1/search/"
    params = {"q": query, "limit": limit}
    
    print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    
    try:
        response = requests.get(url, params=params, timeout=30)
        print(f"Status: {response.status_code}")
        print(f"Content-Type: {response.headers.get('content-type', 'Not specified')}")
        print(f"Encoding: {response.encoding}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(data)}")
            
            for i, item in enumerate(data[:3], 1):
                print(f"\n  {i}. {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"     –ï–¥–∏–Ω–∏—Ü–∞: {item.get('unit', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")

def test_create_material(name: str, category: str, unit: str, description: str) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
    url = "http://localhost:8000/api/v1/materials/"
    data = {
        "name": name,
        "category": category,
        "unit": unit,
        "description": description
    }
    
    print(f"\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: '{name}'")
    
    try:
        response = requests.post(url, json=data, timeout=30)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω —Å ID: {result.get('id')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://localhost:8000/api/v1/health/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python3 -m uvicorn main:app --port 8000")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    test_materials = [
        ("–¶–µ–º–µ–Ω—Ç –ú400 (–±–µ–ª—ã–π)", "–¶–µ–º–µ–Ω—Ç", "–∫–≥", "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–µ–ª—ã–π —Ü–µ–º–µ–Ω—Ç –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç"),
        ("–ë–µ—Ç–æ–Ω –ú300", "–ë–µ—Ç–æ–Ω", "–º¬≥", "–ì–æ—Ç–æ–≤—ã–π –±–µ—Ç–æ–Ω —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤"),
        ("–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–°", "–ú–µ—Ç–∞–ª–ª", "–º", "–°—Ç–∞–ª—å–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞ –¥–ª—è –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"),
        ("–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π", "–ö–∏—Ä–ø–∏—á", "—à—Ç", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–∏—Ä–ø–∏—á –∏–∑ –≥–ª–∏–Ω—ã"),
        ("–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π –º—ã—Ç—ã–π", "–ü–µ—Å–æ–∫", "—Ç", "–û—á–∏—â–µ–Ω–Ω—ã–π —Ä–µ—á–Ω–æ–π –ø–µ—Å–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç")
    ]
    
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
    for name, category, unit, description in test_materials:
        test_create_material(name, category, unit, description)
        
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "—Ü–µ–º–µ–Ω—Ç",
        "–±–µ–ª—ã–π —Ü–µ–º–µ–Ω—Ç",
        "–±–µ—Ç–æ–Ω –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞",
        "–∞—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è",
        "–∫–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π",
        "–ø–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π",
        "–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
        "–ø—Ä–æ—á–Ω—ã–π –±–µ—Ç–æ–Ω –ú300",
        "–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–º–µ–Ω—Ç",
        "–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω"
    ]
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ ({len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
    for query in test_queries:
        test_search_api(query)
        
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ Unicode
    print(f"\nüåè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
    unicode_queries = [
        "—Ü–µ–º–µ–Ω—Ç –ú-400 (–ø—Ä–æ—á–Ω—ã–π)",
        "–±–µ—Ç–æ–Ω ‚òÖ –ø—Ä–µ–º–∏—É–º",
        "–º–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ1",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã 2024"
    ]
    
    for query in unicode_queries:
        test_search_api(query)
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)

if __name__ == "__main__":
    main() 