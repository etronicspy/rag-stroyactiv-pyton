#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
"""

import asyncio
import json
from datetime import datetime

from .material_matcher import MaterialMatcher
from .common import qdrant_service, embedding_service, generate_unique_id, format_price, truncate_text
from qdrant_client.models import PointStruct

async def save_and_view_matches(supplier_id: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    print("üíæ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
    print("="*60)
    
    matcher = MaterialMatcher()
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print(f"üîç –í—ã–ø–æ–ª–Ω—è—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_id}")
    matches = await matcher.match_materials_with_vector_search(supplier_id, top_k=5)
    
    if not matches:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    match_texts = []
    for match in matches:
        match_text = f"{match.reference_name} {match.price_item_name} {match.reference_use_category} {match.price_item_use_category}"
        match_texts.append(match_text)
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    print("üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –±–∞—Ç—á–µ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º...")
    match_embeddings = await embedding_service.get_embeddings_batch(match_texts)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    points = []
    for i, (match, embedding) in enumerate(zip(matches, match_embeddings)):
        point_id = generate_unique_id(match_texts[i], f"{supplier_id}_")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å payload —Å —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        payload = {
            "reference_id": match.reference_id,
            "reference_name": match.reference_name,
            "reference_category": match.reference_category,
            "reference_unit": match.reference_unit,
            "price_item_name": match.price_item_name,
            "price_item_category": match.price_item_category,
            "price_item_unit": match.price_item_unit,
            "price_item_price": float(match.price_item_price),
            "price_item_supplier": match.price_item_supplier,
            "name_similarity": float(match.name_similarity),
            "unit_similarity": float(match.unit_similarity),
            "combined_score": float(match.combined_score),
            "match_confidence": match.match_confidence,
            "created_at": match.created_at.isoformat(),
            "match_id": f"{supplier_id}_{i+1}"
        }
        
        point = PointStruct(
            id=point_id,
            vector=embedding,
            payload=payload
        )
        points.append(point)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–∞—Ç—á–µ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        success = qdrant_service.upsert_points_batch("material_matches", points)
        
        if success:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(points)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é 'material_matches'")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await view_saved_matches()
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–∫–∂–µ –≤ JSON —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            matches_data = []
            for match in matches:
                match_dict = {
                    "reference_name": match.reference_name,
                    "reference_category": match.reference_category,
                    "reference_unit": match.reference_unit,
                    "price_item_name": match.price_item_name,
                    "price_item_category": match.price_item_category,
                    "price_item_unit": match.price_item_unit,
                    "price_item_price": float(match.price_item_price),
                    "price_item_supplier": match.price_item_supplier,
                    "name_similarity": float(match.name_similarity),
                    "unit_similarity": float(match.unit_similarity),
                    "combined_score": float(match.combined_score),
                    "match_confidence": match.match_confidence,
                    "created_at": match.created_at.isoformat()
                }
                matches_data.append(match_dict)
            
            filename = f"saved_matches_{supplier_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(matches_data, f, ensure_ascii=False, indent=2)
            
            print(f"üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def view_saved_matches():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    print(f"\nüëÄ –ü–†–û–°–ú–û–¢–† –°–û–•–†–ê–ù–ï–ù–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô")
    print("-"*60)
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        points = qdrant_service.get_points_with_payload("material_matches", limit=100)
        
        if not points:
            print("üì≠ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(points)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        print()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'ID':>3} {'–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø—Ä–∞–π—Å–∞':<25} {'‚Üí':<2} {'–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':<25} {'–°–∫–æ—Ä':>6} {'–£–≤-—Ç—å':>8} {'–¶–µ–Ω–∞':>8}")
        print("-" * 85)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ combined_score (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_points = sorted(points, key=lambda p: p.payload.get('combined_score', 0), reverse=True)
        
        for point in sorted_points:
            payload = point.payload
            
            confidence_icon = {"high": "üü¢", "medium": "üü°", "low": "üî¥"}[payload.get('match_confidence', 'low')]
            
            price_name = truncate_text(payload.get('price_item_name', ''), 25)
            ref_name = truncate_text(payload.get('reference_name', ''), 25)
            price_formatted = format_price(payload.get('price_item_price', 0))
            
            print(f"{point.id:>3} {price_name:<25} ‚Üí {ref_name:<25} {payload.get('combined_score', 0):>6.3f} {confidence_icon}{payload.get('match_confidence', 'low'):>7} {price_formatted:>8}")
        
        print("-" * 85)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        high_count = len([p for p in points if p.payload.get('match_confidence') == 'high'])
        medium_count = len([p for p in points if p.payload.get('match_confidence') == 'medium'])
        low_count = len([p for p in points if p.payload.get('match_confidence') == 'low'])
        avg_score = sum(p.payload.get('combined_score', 0) for p in points) / len(points)
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üü¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {high_count}")
        print(f"   üü° –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {medium_count}")
        print(f"   üî¥ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {low_count}")
        print(f"   üìä –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: {avg_score:.3f}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if sorted_points:
            best_match = sorted_points[0].payload
            print(f"\nüèÜ –õ–£–ß–®–ï–ï –°–û–í–ü–ê–î–ï–ù–ò–ï:")
            print(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø—Ä–∞–π—Å–∞: {best_match.get('price_item_name')}")
            print(f"   –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {best_match.get('reference_name')}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {best_match.get('price_item_use_category')} ‚Üí {best_match.get('reference_use_category')}")
            print(f"   –ï–¥–∏–Ω–∏—Ü—ã: {best_match.get('price_item_unit')} ‚Üí {best_match.get('reference_unit')}")
            print(f"   –°—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π: {best_match.get('name_similarity', 0):.3f}")
            print(f"   –°—Ö–æ–¥—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {best_match.get('unit_similarity', 0):.3f}")
            print(f"   –û–±—â–∏–π —Å–∫–æ—Ä: {best_match.get('combined_score', 0):.3f}")
            print(f"   –¶–µ–Ω–∞: {best_match.get('price_item_price', 0):.2f}‚ÇΩ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    supplier_id = "–ü–æ—Å—Ç–∞–≤—â–∏–∫_–°—Ç—Ä–æ–π_–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
    await save_and_view_matches(supplier_id)

if __name__ == "__main__":
    asyncio.run(main()) 