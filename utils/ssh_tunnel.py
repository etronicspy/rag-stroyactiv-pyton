#!/usr/bin/env python3
"""
SSH —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import subprocess
import time
import signal
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.config import get_settings

class SSHTunnel:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            self.settings = get_settings()
            self.config = self.settings.get_ssh_tunnel_config()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.key_path = Path(self.config["key_path"]).expanduser()
            self.local_port = self.config["local_port"]
            self.remote_host = self.config["remote_host"]
            self.remote_user = self.config["remote_user"]
            self.remote_port = self.config["remote_port"]
            self.key_passphrase = self.config["key_passphrase"]
            self.timeout = self.config["timeout"]
            self.compression = self.config["compression"]
            self.keep_alive = self.config["keep_alive"]
            self.strict_host_key_checking = self.config["strict_host_key_checking"]
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            
            # Fallback –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.key_path = Path.home() / ".ssh" / "postgres_key"
            self.local_port = 5435
            self.remote_host = "31.130.148.200"
            self.remote_user = "root"
            self.remote_port = 5432
            self.key_passphrase = None
            self.timeout = 30
            self.compression = True
            self.keep_alive = 60
            self.strict_host_key_checking = False
        
        self.process = None
        self.pexpect_process = None
        self.askpass_file = None
        
    def create_tunnel(self):
        """–°–æ–∑–¥–∞–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å"""
        print("üîó –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
        print(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {self.local_port}")
        print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {self.remote_user}@{self.remote_host}")
        print(f"   SSH –∫–ª—é—á: {self.key_path}")
        
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ SSH
        ssh_command = [
            "ssh",
            "-i", str(self.key_path),
            "-L", f"{self.local_port}:localhost:{self.remote_port}",
            "-N",  # –ù–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É, —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥
            "-T",  # –û—Ç–∫–ª—é—á–∏—Ç—å TTY allocation
            "-C",  # –í–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ
            "-o", "StrictHostKeyChecking=no",
            "-o", "ServerAliveInterval=60",
            "-o", "ServerAliveCountMax=3"
        ]
        
        if self.timeout > 0:
            ssh_command.extend(["-o", f"ConnectTimeout={self.timeout}"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç –≤ –∫–æ–Ω—Ü–µ
        ssh_command.append(f"{self.remote_user}@{self.remote_host}")
        
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ SSH —Ç—É–Ω–Ω–µ–ª—è...")
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(ssh_command)}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            env = os.environ.copy()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º pexpect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            if self.key_passphrase:
                print("üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è SSH –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                
                try:
                    import pexpect
                    
                    print(f"üöÄ –ó–∞–ø—É—Å–∫ SSH —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ pexpect...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º SSH —Å pexpect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
                    ssh_command_str = ' '.join(ssh_command)
                    print(f"   –ö–æ–º–∞–Ω–¥–∞: {ssh_command_str}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è pexpect
                    pexpect_env = env.copy()
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å pexpect
                    self.pexpect_process = pexpect.spawn(
                        ssh_command_str,
                        env=pexpect_env,
                        timeout=30
                    )
                    
                    # –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥–∏–º –µ–≥–æ
                    try:
                        index = self.pexpect_process.expect([
                            'Enter passphrase for key',
                            'password:',
                            pexpect.TIMEOUT,
                            pexpect.EOF
                        ], timeout=10)
                        
                        if index == 0 or index == 1:
                            # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
                            self.pexpect_process.sendline(self.key_passphrase)
                            print("‚úÖ –ü–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞ –≤–≤–µ–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                            
                            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                            self.pexpect_process.expect(pexpect.TIMEOUT, timeout=3)
                            
                        elif index == 2:
                            print("‚ö†Ô∏è Timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
                        elif index == 3:
                            print("‚ö†Ô∏è SSH –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                            
                    except pexpect.exceptions.TIMEOUT:
                        # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è SSH —Ç—É–Ω–Ω–µ–ª—è - –æ–Ω –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ
                        pass
                    except pexpect.exceptions.EOF:
                        print("‚ö†Ô∏è SSH –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                    if self.pexpect_process.isalive():
                        print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è!")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ pexpect –ø—Ä–æ—Ü–µ—Å—Å
                        self.process = self.pexpect_process
                        print(f"üîó PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ localhost:{self.local_port}")
                        return True
                    else:
                        print("‚ùå SSH —Ç—É–Ω–Ω–µ–ª—å –Ω–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è")
                        self.pexpect_process = None
                        return False
                        
                except ImportError:
                    print("‚ö†Ô∏è pexpect –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥")
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É —Å askpass
                    return self._create_tunnel_with_askpass(ssh_command, env)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ pexpect: {e}")
                    return False
            else:
                print("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞ –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ SSH_TUNNEL_KEY_PASSPHRASE –≤ .env.local –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
                self.process = subprocess.Popen(
                    ssh_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    env=env
                )
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                time.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
                poll = self.process.poll()
                if poll is None:
                    print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    print(f"üîó PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ localhost:{self.local_port}")
                    return True
                else:
                    stdout, stderr = self.process.communicate()
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è:")
                    if stderr:
                        print(f"   Stderr: {stderr.decode()}")
                    if stdout:
                        print(f"   Stdout: {stdout.decode()}")
                    return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SSH —Ç—É–Ω–Ω–µ–ª—è: {e}")
            return False
            
    def _create_tunnel_with_askpass(self, ssh_command, env):
        """Fallback –º–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SSH_ASKPASS"""
        import tempfile
        import stat
        
        print("üîê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ç–æ–¥–∞ —Å SSH_ASKPASS")
        
        # –°–æ–∑–¥–∞–µ–º askpass —Å–∫—Ä–∏–ø—Ç
        askpass_script = f"""#!/bin/bash
echo '{self.key_passphrase}'
"""
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.sh', delete=False) as f:
            f.write(askpass_script)
            askpass_file = f.name
        
        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω–∏–º—ã–º
            os.chmod(askpass_file, stat.S_IRWXU)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è SSH
            env["SSH_ASKPASS"] = askpass_file
            env["DISPLAY"] = ":0"
            
            print(f"üîë Askpass —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {askpass_file}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º SSH
            self.process = subprocess.Popen(
                ssh_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=env,
                stdin=subprocess.DEVNULL
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
            self.askpass_file = askpass_file
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
            poll = self.process.poll()
            if poll is None:
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"üîó PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ localhost:{self.local_port}")
                return True
            else:
                stdout, stderr = self.process.communicate()
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è:")
                if stderr:
                    print(f"   Stderr: {stderr.decode()}")
                if stdout:
                    print(f"   Stdout: {stdout.decode()}")
                return False
            
        except Exception as e:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                os.unlink(askpass_file)
            except:
                pass
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ fallback –º–µ—Ç–æ–¥–µ: {e}")
            return False
    
    def close_tunnel(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å"""
        if self.process:
            print("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ pexpect –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π subprocess
            if hasattr(self.process, 'terminate') and hasattr(self.process, 'isalive'):
                # pexpect –ø—Ä–æ—Ü–µ—Å—Å
                try:
                    if self.process.isalive():
                        self.process.terminate()
                        self.process.wait()
                    print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å (pexpect) –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ pexpect —Ç—É–Ω–Ω–µ–ª—è: {e}")
                    try:
                        self.process.kill()
                        print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å (pexpect) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                    except:
                        pass
            else:
                # –û–±—ã—á–Ω—ã–π subprocess
                try:
                    self.process.terminate()
                    self.process.wait(timeout=5)
                    print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç")
                except subprocess.TimeoutExpired:
                    print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
                    self.process.kill()
                    self.process.wait()
                    print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç—É–Ω–Ω–µ–ª—è: {e}")
            
            self.process = None
        
        # –û—á–∏—Å—Ç–∫–∞ pexpect –ø—Ä–æ—Ü–µ—Å—Å–∞
        if hasattr(self, 'pexpect_process') and self.pexpect_process:
            try:
                if self.pexpect_process.isalive():
                    self.pexpect_process.terminate()
                    self.pexpect_process.wait()
            except:
                pass
            finally:
                self.pexpect_process = None
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π askpass —Ñ–∞–π–ª
        if hasattr(self, 'askpass_file') and self.askpass_file:
            try:
                os.unlink(self.askpass_file)
                print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π askpass —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å askpass —Ñ–∞–π–ª: {e}")
            finally:
                self.askpass_file = None
    
    def is_tunnel_active(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—è"""
        if not self.process:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è pexpect –ø—Ä–æ—Ü–µ—Å—Å–∞
        if hasattr(self.process, 'isalive'):
            return self.process.isalive()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ subprocess
        return self.process.poll() is None
    
    def get_tunnel_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É–Ω–Ω–µ–ª–µ"""
        return {
            "local_port": self.local_port,
            "remote_host": self.remote_host,
            "remote_user": self.remote_user,
            "remote_port": self.remote_port,
            "ssh_key": str(self.key_path),
            "is_active": self.is_tunnel_active()
        }

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    if hasattr(signal_handler, 'tunnel'):
        signal_handler.tunnel.close_tunnel()
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è"""
    print("üöÄ SSH Tunnel Manager –¥–ª—è PostgreSQL")
    print("=" * 50)
    
    tunnel = SSHTunnel()
    signal_handler.tunnel = tunnel
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
    if tunnel.create_tunnel():
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É–Ω–Ω–µ–ª–µ:")
        info = tunnel.get_tunnel_info()
        for key, value in info.items():
            print(f"   {key}: {value}")
        
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL:")
        print(f"   psql -h localhost -p {tunnel.local_port} -U superadmin -d materials")
        print("\nüí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("   python utils/data/test_postgresql_connection.py")
        print("\n‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–º
            while tunnel.is_tunnel_active():
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω Ctrl+C...")
        finally:
            tunnel.close_tunnel()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. SSH –∫–ª—é—á –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        print("   2. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SSH")
        print("   3. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   4. –ü–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç")
        print("\nüîß –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è SSH –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
        print("   ssh-copy-id -i ~/.ssh/postgres_key root@31.130.148.200")
        sys.exit(1)

if __name__ == "__main__":
    main() 