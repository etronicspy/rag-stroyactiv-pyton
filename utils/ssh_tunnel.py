#!/usr/bin/env python3
"""
SSH —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import subprocess
import time
import signal
import sys
import os
from pathlib import Path

class SSHTunnel:
    def __init__(self):
        self.ssh_key_path = Path.home() / ".ssh" / "postgres_key"
        self.local_port = 5435
        self.remote_host = "31.130.148.200"
        self.remote_user = "root"
        self.remote_port = 5432
        self.process = None
        
    def create_tunnel(self):
        """–°–æ–∑–¥–∞–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å"""
        print(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
        print(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {self.local_port}")
        print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {self.remote_user}@{self.remote_host}")
        print(f"   SSH –∫–ª—é—á: {self.ssh_key_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SSH –∫–ª—é—á–∞
        if not self.ssh_key_path.exists():
            print(f"‚ùå SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.ssh_key_path}")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ SSH –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π: ssh-keygen -t ed25519 -f ~/.ssh/postgres_key")
            return False
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è
        ssh_command = [
            "ssh",
            "-i", str(self.ssh_key_path),
            "-L", f"{self.local_port}:localhost:{self.remote_port}",
            "-N",  # –ù–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            "-T",  # –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Å–µ–≤–¥–æ-—Ç–µ—Ä–º–∏–Ω–∞–ª
            f"{self.remote_user}@{self.remote_host}"
        ]
        
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ SSH —Ç—É–Ω–Ω–µ–ª—è...")
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(ssh_command)}")
            
            self.process = subprocess.Popen(
                ssh_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
            poll = self.process.poll()
            if poll is None:
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"üîó PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ localhost:{self.local_port}")
                return True
            else:
                stdout, stderr = self.process.communicate()
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è:")
                if stderr:
                    print(f"   Stderr: {stderr.decode()}")
                if stdout:
                    print(f"   Stdout: {stdout.decode()}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SSH —Ç—É–Ω–Ω–µ–ª—è: {e}")
            return False
    
    def close_tunnel(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å"""
        if self.process:
            print("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
            self.process.terminate()
            try:
                self.process.wait(timeout=5)
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç")
            except subprocess.TimeoutExpired:
                print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
                self.process.kill()
                self.process.wait()
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
            self.process = None
    
    def is_tunnel_active(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—è"""
        if self.process:
            return self.process.poll() is None
        return False
    
    def get_tunnel_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É–Ω–Ω–µ–ª–µ"""
        return {
            "local_port": self.local_port,
            "remote_host": self.remote_host,
            "remote_user": self.remote_user,
            "remote_port": self.remote_port,
            "ssh_key": str(self.ssh_key_path),
            "is_active": self.is_tunnel_active()
        }

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    if hasattr(signal_handler, 'tunnel'):
        signal_handler.tunnel.close_tunnel()
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è"""
    print("üöÄ SSH Tunnel Manager –¥–ª—è PostgreSQL")
    print("=" * 50)
    
    tunnel = SSHTunnel()
    signal_handler.tunnel = tunnel
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
    if tunnel.create_tunnel():
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É–Ω–Ω–µ–ª–µ:")
        info = tunnel.get_tunnel_info()
        for key, value in info.items():
            print(f"   {key}: {value}")
        
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL:")
        print(f"   psql -h localhost -p {tunnel.local_port} -U superadmin -d materials")
        print("\nüí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("   python utils/data/test_postgresql_connection.py")
        print("\n‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–º
            while tunnel.is_tunnel_active():
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω Ctrl+C...")
        finally:
            tunnel.close_tunnel()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. SSH –∫–ª—é—á –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        print("   2. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SSH")
        print("   3. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   4. –ü–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç")
        print("\nüîß –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è SSH –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
        print("   ssh-copy-id -i ~/.ssh/postgres_key root@31.130.148.200")
        sys.exit(1)

if __name__ == "__main__":
    main() 