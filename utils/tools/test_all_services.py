#!/usr/bin/env python3
"""Test script to check all services and collection auto-creation"""

import sys
import os
from pathlib import Path
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from services.materials_consolidated import MaterialsService, CategoryService, UnitService
from core.schemas.materials import MaterialCreate

async def test_category_service():
    """Test CategoryService"""
    print("\nüè∑Ô∏è  Testing CategoryService...")
    try:
        service = CategoryService()
        print("‚úÖ CategoryService initialized")
        
        # Create test category
        category = await service.create_category("–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print(f"‚úÖ Category created: {category.name}")
        
        # Get all categories
        categories = await service.get_categories()
        print(f"‚úÖ Retrieved {len(categories)} categories")
        
        return True
    except Exception as e:
        print(f"‚ùå CategoryService error: {e}")
        return False

async def test_unit_service():
    """Test UnitService"""
    print("\nüìè Testing UnitService...")
    try:
        service = UnitService()
        print("‚úÖ UnitService initialized")
        
        # Create test unit
        unit = await service.create_unit("—Ç–µ—Å—Ç", "–¢–µ—Å—Ç–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        print(f"‚úÖ Unit created: {unit.name}")
        
        # Get all units
        units = await service.get_units()
        print(f"‚úÖ Retrieved {len(units)} units")
        
        return True
    except Exception as e:
        print(f"‚ùå UnitService error: {e}")
        return False

async def test_materials_service():
    """Test MaterialsService"""
    print("\nüß± Testing MaterialsService...")
    try:
        service = MaterialsService()
        print("‚úÖ MaterialsService initialized")
        
        # Create test material
        material_data = MaterialCreate(
            name="–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
            category="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            unit="—Ç–µ—Å—Ç",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
        )
        material = await service.create_material(material_data)
        print(f"‚úÖ Material created: {material.name} (ID: {material.id})")
        
        # Get all materials
        materials = await service.get_materials(limit=10)
        print(f"‚úÖ Retrieved {len(materials)} materials")
        
        # Test search
        search_results = await service.search_materials("—Ç–µ—Å—Ç", limit=5)
        print(f"‚úÖ Search returned {len(search_results)} results")
        
        return True
    except Exception as e:
        print(f"‚ùå MaterialsService error: {e}")
        return False

async def check_collections():
    """Check what collections exist"""
    print("\nüìÇ Checking existing collections...")
    try:
        from core.config import get_vector_db_client
        client = get_vector_db_client()
        
        collections = client.get_collections()
        collection_names = [c.name for c in collections.collections]
        print(f"üìã Found {len(collection_names)} collections:")
        for name in collection_names:
            print(f"  ‚Ä¢ {name}")
        
        return collection_names
    except Exception as e:
        print(f"‚ùå Error checking collections: {e}")
        return []

async def main():
    """Main test function"""
    print("üß™ Testing All Services with Auto Collection Creation")
    print("=" * 60)
    
    # Check initial collections
    initial_collections = await check_collections()
    
    # Test all services
    category_ok = await test_category_service()
    unit_ok = await test_unit_service()
    materials_ok = await test_materials_service()
    
    # Check final collections
    print("\n" + "=" * 60)
    final_collections = await check_collections()
    
    # Summary
    print(f"\nüìä Test Results:")
    print(f"  CategoryService: {'‚úÖ PASS' if category_ok else '‚ùå FAIL'}")
    print(f"  UnitService: {'‚úÖ PASS' if unit_ok else '‚ùå FAIL'}")
    print(f"  MaterialsService: {'‚úÖ PASS' if materials_ok else '‚ùå FAIL'}")
    
    new_collections = set(final_collections) - set(initial_collections)
    if new_collections:
        print(f"\nüÜï New collections created: {', '.join(new_collections)}")
    else:
        print(f"\nüîÑ Collections were reused or already existed")
    
    overall_success = category_ok and unit_ok and materials_ok
    print(f"\nüéØ Overall: {'‚úÖ ALL TESTS PASSED' if overall_success else '‚ùå SOME TESTS FAILED'}")
    
    return overall_success

if __name__ == "__main__":
    asyncio.run(main()) 