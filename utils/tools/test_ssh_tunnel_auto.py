#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É SSH —Ç—É–Ω–Ω–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from core.config import get_settings
from utils.ssh_tunnel import SSHTunnel


def test_ssh_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH."""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH —Ç—É–Ω–Ω–µ–ª—è...")
    
    try:
        settings = get_settings()
        config = settings.get_ssh_tunnel_config()
        
        print(f"‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å enabled: {config['enabled']}")
        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {config['local_port']}")
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç: {config['remote_host']}")
        print(f"‚úÖ SSH –∫–ª—é—á: {config['key_path']}")
        
        if config['key_passphrase']:
            print(f"‚úÖ –ü–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω ({len(config['key_passphrase'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            return True
        else:
            print(f"‚ùå –ü–∞—Ä–æ–ª—å SSH –∫–ª—é—á–∞: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("üí° –î–æ–±–∞–≤—å—Ç–µ SSH_TUNNEL_KEY_PASSPHRASE –≤ .env.local")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_ssh_tunnel():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è...")
    
    tunnel = None
    try:
        tunnel = SSHTunnel()
        
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è...")
        success = tunnel.create_tunnel()
        
        if success:
            print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—É–Ω–Ω–µ–ª—è
            if tunnel.is_tunnel_active():
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info = tunnel.get_tunnel_info()
                print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É–Ω–Ω–µ–ª–µ:")
                for key, value in info.items():
                    if key != "ssh_key":
                        print(f"   {key}: {value}")
                
                return True
            else:
                print("‚ùå SSH —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è: {e}")
        return False
    finally:
        if tunnel:
            print("\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—É–Ω–Ω–µ–ª—è...")
            tunnel.close_tunnel()


def test_postgresql_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    tunnel = None
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
        tunnel = SSHTunnel()
        success = tunnel.create_tunnel()
        
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å")
            return False
        
        # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è (5 —Å–µ–∫—É–Ω–¥)...")
        time.sleep(5)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        from utils.data.postgresql_diagnostic import PostgreSQLDiagnostic
        
        async def test_connection():
            try:
                async with PostgreSQLDiagnostic() as diagnostic:
                    config_ok = await diagnostic.check_configuration()
                    connection_ok = await diagnostic.check_connection()
                    
                    if config_ok and connection_ok:
                        print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        return True
                    else:
                        print("‚ùå PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
                return False
        
        import asyncio
        result = asyncio.run(test_connection())
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL: {e}")
        return False
    finally:
        if tunnel:
            tunnel.close_tunnel()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ SSH Tunnel Auto Test")
    print("=" * 50)
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("SSH Configuration", test_ssh_config),
        ("SSH Tunnel Creation", test_ssh_tunnel),
        ("PostgreSQL Connection", test_postgresql_connection)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test_name} failed: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    successful = sum(1 for result in results.values() if result)
    total = len(results)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} {test_name}")
    
    if successful == total:
        print("\nüéâ SSH —Ç—É–Ω–Ω–µ–ª—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    elif successful >= total * 0.5:
        print("\n‚ö†Ô∏è SSH —Ç—É–Ω–Ω–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("\n‚ùå SSH —Ç—É–Ω–Ω–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH_TUNNEL_KEY_PASSPHRASE –≤ .env.local")
    
    return successful == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 