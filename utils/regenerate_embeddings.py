#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö OpenAI API –≤–º–µ—Å—Ç–æ mock –≤–µ–∫—Ç–æ—Ä–æ–≤.
"""

import asyncio
import time
from typing import List, Dict, Any
import logging

from services.materials import MaterialsService
from core.database.factories import DatabaseFactory, AIClientFactory
from core.database.exceptions import DatabaseError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class EmbeddingRegenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."""
        self.vector_db = None
        self.ai_client = None
        self.materials_service = None
        self.collection_name = "materials"
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∏ AI –∫–ª–∏–µ–Ω—Ç—É."""
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            self.vector_db = DatabaseFactory.create_vector_database()
            self.ai_client = AIClientFactory.create_ai_client()
            self.materials_service = MaterialsService(
                vector_db=self.vector_db,
                ai_client=self.ai_client
            )
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            raise
    
    async def get_all_materials(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î."""
        try:
            logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_exists = await self.vector_db.collection_exists(self.collection_name)
            if not collection_exists:
                logger.warning(f"‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.collection_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ scroll_all
            results = await self.vector_db.scroll_all(
                collection_name=self.collection_name,
                with_payload=True,
                with_vectors=True
            )
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(results)}")
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(results)}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            raise
    
    async def regenerate_single_material(self, material_data: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""
        try:
            material_id = material_data.get("id")
            payload = material_data.get("payload", {})
            
            name = payload.get("name", "")
            description = payload.get("description", "")
            use_category = payload.get("use_category", "")
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {name}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–∫–∞–∫ –≤ MaterialsService)
            text_for_embedding = f"{name} {use_category} {description}".strip()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ AI –∫–ª–∏–µ–Ω—Ç
            if hasattr(self.ai_client, 'embeddings'):
                logger.debug(f"   üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é OpenAI —ç–º–±–µ–¥–¥–∏–Ω–≥...")
                response = await self.ai_client.embeddings.create(
                    input=text_for_embedding,
                    model="text-embedding-3-small",
                    dimensions=1536
                )
                new_embedding = response.data[0].embedding
            elif hasattr(self.ai_client, 'get_embedding'):
                logger.debug(f"   üîß –ò—Å–ø–æ–ª—å–∑—É—è mock AI –∫–ª–∏–µ–Ω—Ç...")
                new_embedding = await self.ai_client.get_embedding(text_for_embedding)
            else:
                raise ValueError("AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            vector_data = {
                "id": material_id,
                "vector": new_embedding,
                "payload": payload
            }
            
            await self.vector_db.upsert(
                collection_name=self.collection_name,
                vectors=[vector_data]
            )
            
            logger.debug(f"   ‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è: {name}")
            return True
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material_id}: {e}")
            return False
    
    async def regenerate_all_embeddings(self, batch_size: int = 10) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        
        start_time = time.time()
        stats = {
            "total_materials": 0,
            "processed_successfully": 0,
            "failed": 0,
            "processing_time": 0,
            "avg_time_per_material": 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            materials = await self.get_all_materials()
            stats["total_materials"] = len(materials)
            
            if not materials:
                logger.warning("‚ö†Ô∏è  –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return stats
            
            logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–∞—Ç—á–∞–º–∏ –ø–æ {batch_size}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
            for i in range(0, len(materials), batch_size):
                batch = materials[i:i + batch_size]
                batch_num = i // batch_size + 1
                total_batches = (len(materials) + batch_size - 1) // batch_size
                
                logger.info(f"üì¶ –ë–∞—Ç—á {batch_num}/{total_batches}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(batch)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                tasks = [
                    self.regenerate_single_material(material) 
                    for material in batch
                ]
                
                batch_results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
                for result in batch_results:
                    if isinstance(result, Exception):
                        stats["failed"] += 1
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ: {result}")
                    elif result:
                        stats["processed_successfully"] += 1
                    else:
                        stats["failed"] += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
                if i + batch_size < len(materials):
                    await asyncio.sleep(1)
                    
                logger.info(f"   ‚úÖ –ë–∞—Ç—á {batch_num} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats["processing_time"] = time.time() - start_time
            if stats["processed_successfully"] > 0:
                stats["avg_time_per_material"] = stats["processing_time"] / stats["processed_successfully"]
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("\n" + "=" * 60)
            logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò")
            logger.info("=" * 60)
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {stats['total_materials']}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed_successfully']}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {stats['failed']}")
            logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['processing_time']:.1f}—Å")
            logger.info(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª: {stats['avg_time_per_material']:.2f}—Å")
            
            success_rate = (stats['processed_successfully'] / stats['total_materials']) * 100
            logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            if success_rate >= 90:
                logger.info("üåü –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            elif success_rate >= 70:
                logger.info("üëç –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            else:
                logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            stats["processing_time"] = time.time() - start_time
            raise
    
    async def verify_embeddings_quality(self, sample_size: int = 5) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–∞ –≤—ã–±–æ—Ä–∫–µ –∏–∑ {sample_size} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            materials = await self.get_all_materials()
            sample_materials = materials[:sample_size]
            
            quality_stats = {
                "sample_size": len(sample_materials),
                "vector_dimensions": [],
                "vector_norms": [],
                "non_zero_components": []
            }
            
            for material in sample_materials:
                vector = material.get("vector", [])
                payload = material.get("payload", {})
                name = payload.get("name", "Unknown")
                
                if vector:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä
                    dimensions = len(vector)
                    vector_norm = sum(x*x for x in vector) ** 0.5
                    non_zero_count = sum(1 for x in vector if abs(x) > 1e-8)
                    
                    quality_stats["vector_dimensions"].append(dimensions)
                    quality_stats["vector_norms"].append(vector_norm)
                    quality_stats["non_zero_components"].append(non_zero_count)
                    
                    logger.info(f"   üìä {name}: —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å={dimensions}, –Ω–æ—Ä–º–∞={vector_norm:.4f}, –Ω–µ–Ω—É–ª–µ–≤—ã—Ö={non_zero_count}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            if quality_stats["vector_dimensions"]:
                avg_norm = sum(quality_stats["vector_norms"]) / len(quality_stats["vector_norms"])
                avg_non_zero = sum(quality_stats["non_zero_components"]) / len(quality_stats["non_zero_components"])
                
                logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤: {avg_norm:.4f}")
                logger.info(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {avg_non_zero:.0f}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                all_1536_dims = all(d == 1536 for d in quality_stats["vector_dimensions"])
                reasonable_norms = all(0.1 < norm < 10.0 for norm in quality_stats["vector_norms"])
                diverse_vectors = all(nz > 100 for nz in quality_stats["non_zero_components"])
                
                if all_1536_dims and reasonable_norms and diverse_vectors:
                    logger.info("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: –û–¢–õ–ò–ß–ù–û–ï")
                elif all_1536_dims and reasonable_norms:
                    logger.info("üëç –ö–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: –•–û–†–û–®–ï–ï")
                else:
                    logger.warning("‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
                
                quality_stats["avg_norm"] = avg_norm
                quality_stats["avg_non_zero"] = avg_non_zero
                quality_stats["quality_checks"] = {
                    "correct_dimensions": all_1536_dims,
                    "reasonable_norms": reasonable_norms,
                    "diverse_vectors": diverse_vectors
                }
            
            return quality_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    print("üöÄ –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –≠–ú–ë–ï–î–î–ò–ù–ì–û–í –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("=" * 50)
    print("–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç mock —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ OpenAI –≤–µ–∫—Ç–æ—Ä—ã")
    print("–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
    print("")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirm = input("‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    regenerator = EmbeddingRegenerator()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        await regenerator.setup()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –î–û –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await regenerator.verify_embeddings_quality()
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        stats = await regenerator.regenerate_all_embeddings(batch_size=5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ
        if stats["processed_successfully"] > 0:
            print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ü–û–°–õ–ï –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            await regenerator.verify_embeddings_quality()
            
            print(f"\nüéâ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed_successfully']}/{stats['total_materials']} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {stats['processing_time']:.1f} —Å–µ–∫—É–Ω–¥")
            
            print(f"\nüí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞:")
            print(f"   python3 test_search_quality.py")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print(f"   - –ù–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞ –≤ .env.local")
        print(f"   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant")
        print(f"   - –ù–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")


if __name__ == "__main__":
    asyncio.run(main()) 