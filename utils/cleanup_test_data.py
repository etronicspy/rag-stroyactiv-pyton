#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.
"""

import asyncio
import logging
import json
from typing import List, Dict, Any

from services.materials import MaterialsService
from core.database.factories import DatabaseFactory, AIClientFactory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class DataCleanupManager:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        self.vector_db = None
        self.materials_service = None
        self.collection_name = "materials"
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            
            self.vector_db = DatabaseFactory.create_vector_database()
            ai_client = AIClientFactory.create_ai_client()
            self.materials_service = MaterialsService(
                vector_db=self.vector_db,
                ai_client=ai_client
            )
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            raise
    
    async def cleanup_test_materials(self) -> Dict[str, int]:
        """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∏ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."""
        logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        stats = {
            "total_checked": 0,
            "deleted": 0,
            "kept": 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            materials = await self.vector_db.scroll_all(
                collection_name=self.collection_name,
                with_payload=True,
                with_vectors=False
            )
            
            stats["total_checked"] = len(materials)
            logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è—é {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            delete_patterns = [
                "string",
                "test",
                "—Ç–µ—Å—Ç",
                "Test",
                "–¢–µ—Å—Ç"
            ]
            
            for material in materials:
                material_id = material.get("id")
                payload = material.get("payload", {})
                name = payload.get("name", "").lower()
                description = payload.get("description", "").lower()
                
                should_delete = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                for pattern in delete_patterns:
                    if (pattern.lower() in name or 
                        pattern.lower() in description or
                        name == pattern.lower()):
                        should_delete = True
                        break
                
                # –£–¥–∞–ª—è–µ–º –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if (name == "" or 
                    name == "unknown" or
                    len(name) < 3 or
                    description == name):  # –û–ø–∏—Å–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
                    should_delete = True
                
                if should_delete:
                    try:
                        await self.vector_db.delete(self.collection_name, material_id)
                        logger.info(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {payload.get('name', 'Unknown')}")
                        stats["deleted"] += 1
                    except Exception as e:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {material_id}: {e}")
                else:
                    stats["kept"] += 1
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {stats['deleted']}, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ {stats['kept']}")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def load_materials_from_json(self, json_file_path: str) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ –æ–±–æ–≥–∞—Ç–∏—Ç—å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏."""
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞: {json_file_path}")
        
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                raw_materials = json.load(f)
            
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(raw_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            enriched_materials = []
            
            for material in raw_materials:
                sku = material.get("sku", "")
                name = material.get("name", "")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ SKU –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                category, description, unit, price = self._enrich_material_data(sku, name)
                
                enriched_material = {
                    "sku": sku,
                    "name": name,
                    "description": description,
                    "use_category": category,
                    "unit": unit,
                    "price": price
                }
                
                enriched_materials.append(enriched_material)
                logger.debug(f"   üìù –û–±–æ–≥–∞—â–µ–Ω: {name} [{category}]")
            
            logger.info(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ {len(enriched_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            return enriched_materials
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON: {e}")
            raise
    
    def _enrich_material_data(self, sku: str, name: str) -> tuple:
        """–û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ SKU –∏ –Ω–∞–∑–≤–∞–Ω–∏—è."""
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–ø–∏—Å–∞–Ω–∏–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        enrichment_rules = {
            # –¶–ï–ú–ï–ù–¢–´
            "CEM": {
                "category": "–¶–µ–º–µ–Ω—Ç",
                "unit": "–∫–≥",
                "base_price": 300,
                "descriptions": {
                    "–ú400": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –º–∞—Ä–∫–∏ –ú400, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    "–ú500": "–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –º–∞—Ä–∫–∏ –ú500, –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä–æ–µ —Ç–≤–µ—Ä–¥–µ–Ω–∏–µ"
                }
            },
            
            # –ü–ï–°–û–ö –ò –©–ï–ë–ï–ù–¨
            "SND": {
                "category": "–ü–µ—Å–æ–∫",
                "unit": "–º3",
                "base_price": 800,
                "descriptions": {
                    "–º—ã—Ç—ã–π": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Å–æ–∫ –º—ã—Ç—ã–π, —Ñ—Ä–∞–∫—Ü–∏—è 0-5–º–º, –¥–ª—è –±–µ—Ç–æ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    "—Ä–µ—á–Ω–æ–π": "–ü–µ—Å–æ–∫ —Ä–µ—á–Ω–æ–π –ø—Ä–∏—Ä–æ–¥–Ω—ã–π, —á–∏—Å—Ç—ã–π, –¥–ª—è —à—Ç—É–∫–∞—Ç—É—Ä–Ω—ã—Ö –∏ –∫–ª–∞–¥–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç"
                }
            },
            "GRV": {
                "category": "–©–µ–±–µ–Ω—å",
                "unit": "–º3", 
                "base_price": 1200,
                "descriptions": {
                    "5-20–º–º": "–©–µ–±–µ–Ω—å –≥—Ä–∞–Ω–∏—Ç–Ω—ã–π —Ñ—Ä–∞–∫—Ü–∏–∏ 5-20–º–º –¥–ª—è –±–µ—Ç–æ–Ω–∞ –∏ –¥–æ—Ä–æ–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    "20-40–º–º": "–©–µ–±–µ–Ω—å –≥—Ä–∞–Ω–∏—Ç–Ω—ã–π —Ñ—Ä–∞–∫—Ü–∏–∏ 20-40–º–º –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤ –∏ –¥—Ä–µ–Ω–∞–∂–∞"
                }
            },
            
            # –ö–ò–†–ü–ò–ß–ò
            "BRK": {
                "category": "–ö–∏—Ä–ø–∏—á",
                "unit": "—à—Ç",
                "base_price": 20,
                "descriptions": {
                    "—Ä—è–¥–æ–≤–æ–π": "–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π —Ä—è–¥–æ–≤–æ–π –ø–æ–ª–Ω–æ—Ç–µ–ª—ã–π, —Ä–∞–∑–º–µ—Ä 250x120x65–º–º",
                    "—Å–∏–ª–∏–∫–∞—Ç–Ω—ã–π": "–ö–∏—Ä–ø–∏—á —Å–∏–ª–∏–∫–∞—Ç–Ω—ã–π –±–µ–ª—ã–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç–µ–Ω, —Ä–∞–∑–º–µ—Ä 250x120x65–º–º",
                    "–æ–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–π": "–ö–∏—Ä–ø–∏—á –æ–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ñ–∞—Å–∞–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç, —Ä–∞–∑–º–µ—Ä 250x120x65–º–º"
                }
            },
            
            # –ë–õ–û–ö–ò
            "BLK": {
                "category": "–ë–ª–æ–∫–∏",
                "unit": "—à—Ç",
                "base_price": 150,
                "descriptions": {
                    "–≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D400": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –∞–≤—Ç–æ–∫–ª–∞–≤–Ω—ã–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D400, —Ä–∞–∑–º–µ—Ä 600x300x200–º–º",
                    "–≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D500": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –∞–≤—Ç–æ–∫–ª–∞–≤–Ω—ã–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D500, —Ä–∞–∑–º–µ—Ä 600x300x200–º–º",
                    "–∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–µ—Ç–æ–Ω–Ω—ã–π": "–ë–ª–æ–∫ –∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–µ—Ç–æ–Ω–Ω—ã–π —Å—Ç–µ–Ω–æ–≤–æ–π, —Ä–∞–∑–º–µ—Ä 390x190x188–º–º",
                    "–ø–µ–Ω–æ–±–µ—Ç–æ–Ω–Ω—ã–π D300": "–ë–ª–æ–∫ –ø–µ–Ω–æ–±–µ—Ç–æ–Ω–Ω—ã–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D300, —Ä–∞–∑–º–µ—Ä 600x300x200–º–º"
                }
            },
            
            # –ê–†–ú–ê–¢–£–†–ê
            "ARM": {
                "category": "–ê—Ä–º–∞—Ç—É—Ä–∞",
                "unit": "–º",
                "base_price": 50,
                "descriptions": {
                    "√ò12–º–º": "–ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ê500–° –¥–∏–∞–º–µ—Ç—Ä–æ–º 12–º–º",
                    "√ò14–º–º": "–ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ê500–° –¥–∏–∞–º–µ—Ç—Ä–æ–º 14–º–º", 
                    "√ò16–º–º": "–ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ê500–° –¥–∏–∞–º–µ—Ç—Ä–æ–º 16–º–º",
                    "√ò20–º–º": "–ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ê500–° –¥–∏–∞–º–µ—Ç—Ä–æ–º 20–º–º"
                }
            },
            
            # –ú–ï–¢–ê–õ–õ–ò–ß–ï–°–ö–ò–ï –ò–ó–î–ï–õ–ò–Ø
            "MTL": {
                "category": "–ú–µ—Ç–∞–ª–ª–æ–∏–∑–¥–µ–ª–∏—è",
                "unit": "–º2",
                "base_price": 200,
                "descriptions": {
                    "–∞—Ä–º–∞—Ç—É—Ä–Ω–∞—è": "–°–µ—Ç–∫–∞ –∞—Ä–º–∞—Ç—É—Ä–Ω–∞—è —Å–≤–∞—Ä–Ω–∞—è –∏–∑ –ø—Ä–æ–≤–æ–ª–æ–∫–∏ –í–†-1, —è—á–µ–π–∫–∞ 100x100–º–º",
                    "–∫–ª–∞–¥–æ—á–Ω–∞—è": "–°–µ—Ç–∫–∞ –∫–ª–∞–¥–æ—á–Ω–∞—è –∏–∑ –ø—Ä–æ–≤–æ–ª–æ–∫–∏ –í–†-1, —è—á–µ–π–∫–∞ 50x50–º–º –¥–ª—è –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–¥–∫–∏"
                }
            },
            
            # –£–¢–ï–ü–õ–ò–¢–ï–õ–ò
            "INS": {
                "category": "–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å",
                "unit": "–º2",
                "base_price": 180,
                "descriptions": {
                    "–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞ 50–º–º": "–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å –º–∏–Ω–µ—Ä–∞–ª–æ–≤–∞—Ç–Ω—ã–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é 50–∫–≥/–º3, —Ç–æ–ª—â–∏–Ω–∞ 50–º–º",
                    "–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞ 100–º–º": "–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å –º–∏–Ω–µ—Ä–∞–ª–æ–≤–∞—Ç–Ω—ã–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é 50–∫–≥/–º3, —Ç–æ–ª—â–∏–Ω–∞ 100–º–º",
                    "—ç–∫—Å—Ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 50–º–º": "–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª —ç–∫—Å—Ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ª—â–∏–Ω–æ–π 50–º–º –¥–ª—è —É—Ç–µ–ø–ª–µ–Ω–∏—è —Ü–æ–∫–æ–ª–µ–π",
                    "–æ–±—ã—á–Ω—ã–π 100–º–º": "–ü–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª –æ–±—ã—á–Ω—ã–π —Ç–æ–ª—â–∏–Ω–æ–π 100–º–º –¥–ª—è —É—Ç–µ–ø–ª–µ–Ω–∏—è —Å—Ç–µ–Ω"
                }
            },
            
            # –ö–†–û–í–ï–õ–¨–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´
            "ROF": {
                "category": "–ö—Ä–æ–≤–ª—è",
                "unit": "–º2",
                "base_price": 350,
                "descriptions": {
                    "–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è": "–ß–µ—Ä–µ–ø–∏—Ü–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —Å –ø–æ–ª–∏–º–µ—Ä–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Å–∫–∞—Ç–Ω—ã—Ö –∫—Ä–æ–≤–µ–ª—å",
                    "–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è": "–ß–µ—Ä–µ–ø–∏—Ü–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –¥–ª—è —Å–∫–∞—Ç–Ω—ã—Ö –∫—Ä–æ–≤–µ–ª—å",
                    "–∞—Å–±–µ—Å—Ç–æ—Ü–µ–º–µ–Ω—Ç–Ω—ã–π": "–®–∏—Ñ–µ—Ä –∞—Å–±–µ—Å—Ç–æ—Ü–µ–º–µ–Ω—Ç–Ω—ã–π –≤–æ–ª–Ω–∏—Å—Ç—ã–π 8-–≤–æ–ª–Ω–æ–≤–æ–π",
                    "–°21": "–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π –°21 –¥–ª—è –∫—Ä–æ–≤–ª–∏ –∏ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–π",
                    "–û–Ω–¥—É–ª–∏–Ω": "–û–Ω–¥—É–ª–∏–Ω –±–∏—Ç—É–º–Ω—ã–µ –≤–æ–ª–Ω–∏—Å—Ç—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫—Ä–æ–≤–ª–∏",
                    "–†–ö–ö-350": "–†—É–±–µ—Ä–æ–∏–¥ –∫—Ä–æ–≤–µ–ª—å–Ω—ã–π –†–ö–ö-350 –Ω–∞ –∫–∞—Ä—Ç–æ–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ"
                }
            },
            
            # –ü–ò–õ–û–ú–ê–¢–ï–†–ò–ê–õ–´
            "WOD": {
                "category": "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                "unit": "–º3",
                "base_price": 15000,
                "descriptions": {
                    "50—Ö150–º–º": "–î–æ—Å–∫–∞ –æ–±—Ä–µ–∑–Ω–∞—è —Å–æ—Å–Ω–æ–≤–∞—è 50x150–º–º, –¥–ª–∏–Ω–∞ 6–º, —Å–æ—Ä—Ç 1-2",
                    "40—Ö150–º–º": "–î–æ—Å–∫–∞ –æ–±—Ä–µ–∑–Ω–∞—è —Å–æ—Å–Ω–æ–≤–∞—è 40x150–º–º, –¥–ª–∏–Ω–∞ 6–º, —Å–æ—Ä—Ç 1-2",
                    "100—Ö100–º–º": "–ë—Ä—É—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ—Å–Ω–æ–≤—ã–π 100x100–º–º, –¥–ª–∏–Ω–∞ 6–º, —Å–æ—Ä—Ç 1",
                    "150—Ö150–º–º": "–ë—Ä—É—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ—Å–Ω–æ–≤—ã–π 150x150–º–º, –¥–ª–∏–Ω–∞ 6–º, —Å–æ—Ä—Ç 1",
                    "–í–∞–≥–æ–Ω–∫–∞": "–í–∞–≥–æ–Ω–∫–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å–æ—Å–Ω–æ–≤–∞—è, –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç, —Å–æ—Ä—Ç –ê"
                }
            },
            
            # –õ–ò–°–¢–û–í–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´
            "PLY": {
                "category": "–§–∞–Ω–µ—Ä–∞",
                "unit": "–ª–∏—Å—Ç",
                "base_price": 800,
                "descriptions": {
                    "–±–µ—Ä–µ–∑–æ–≤–∞—è 12–º–º": "–§–∞–Ω–µ—Ä–∞ –±–µ—Ä–µ–∑–æ–≤–∞—è –§–ö 12–º–º, —Ä–∞–∑–º–µ—Ä 1525x1525–º–º, —Å–æ—Ä—Ç 2/3",
                    "—Ö–≤–æ–π–Ω–∞—è 18–º–º": "–§–∞–Ω–µ—Ä–∞ —Ö–≤–æ–π–Ω–∞—è –§–°–§ 18–º–º, —Ä–∞–∑–º–µ—Ä 1220x2440–º–º, —Å–æ—Ä—Ç 3/4"
                }
            },
            "OSB": {
                "category": "OSB",
                "unit": "–ª–∏—Å—Ç",
                "base_price": 600,
                "descriptions": {
                    "12–º–º": "–ü–ª–∏—Ç–∞ OSB-3 –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∞—è 12–º–º, —Ä–∞–∑–º–µ—Ä 1220x2440–º–º",
                    "18–º–º": "–ü–ª–∏—Ç–∞ OSB-3 –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∞—è 18–º–º, —Ä–∞–∑–º–µ—Ä 1220x2440–º–º"
                }
            },
            "GYP": {
                "category": "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω",
                "unit": "–ª–∏—Å—Ç",
                "base_price": 300,
                "descriptions": {
                    "–æ–±—ã—á–Ω—ã–π": "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω –æ–±—ã—á–Ω—ã–π –ì–ö–õ 12.5–º–º, —Ä–∞–∑–º–µ—Ä 1200x2500–º–º",
                    "–≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π": "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π –ì–ö–õ–í 12.5–º–º, —Ä–∞–∑–º–µ—Ä 1200x2500–º–º"
                }
            },
            
            # –ù–ê–ü–û–õ–¨–ù–´–ï –ü–û–ö–†–´–¢–ò–Ø
            "TIL": {
                "category": "–ü–ª–∏—Ç–∫–∞",
                "unit": "–º2",
                "base_price": 800,
                "descriptions": {
                    "–Ω–∞–ø–æ–ª—å–Ω–∞—è": "–ü–ª–∏—Ç–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞–ø–æ–ª—å–Ω–∞—è –ø—Ä–æ—Ç–∏–≤–æ—Å–∫–æ–ª—å–∑—è—â–∞—è, —Ä–∞–∑–º–µ—Ä 300x300–º–º",
                    "–Ω–∞—Å—Ç–µ–Ω–Ω–∞—è": "–ü–ª–∏—Ç–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç–µ–Ω–Ω–∞—è –≥–ª–∞–∑—É—Ä–æ–≤–∞–Ω–Ω–∞—è, —Ä–∞–∑–º–µ—Ä 200x300–º–º",
                    "–ö–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç": "–ö–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç –ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, —Ä–∞–∑–º–µ—Ä 600x600–º–º"
                }
            },
            "LAM": {
                "category": "–õ–∞–º–∏–Ω–∞—Ç",
                "unit": "–º2",
                "base_price": 600,
                "descriptions": {
                    "32 –∫–ª–∞—Å—Å": "–õ–∞–º–∏–Ω–∞—Ç 32 –∫–ª–∞—Å—Å –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ –¥–ª—è –∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π",
                    "33 –∫–ª–∞—Å—Å": "–õ–∞–º–∏–Ω–∞—Ç 33 –∫–ª–∞—Å—Å –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π"
                }
            },
            "PAR": {
                "category": "–ü–∞—Ä–∫–µ—Ç",
                "unit": "–º2",
                "base_price": 1500,
                "descriptions": {
                    "–¥—É–±–æ–≤—ã–π": "–ü–∞—Ä–∫–µ—Ç —à—Ç—É—á–Ω—ã–π –¥—É–±–æ–≤—ã–π, —Ä–∞–∑–º–µ—Ä 420x70x15–º–º, —Å–æ—Ä—Ç –†—É—Å—Ç–∏–∫"
                }
            },
            "LIN": {
                "category": "–õ–∏–Ω–æ–ª–µ—É–º",
                "unit": "–º2",
                "base_price": 400,
                "descriptions": {
                    "–±—ã—Ç–æ–≤–æ–π": "–õ–∏–Ω–æ–ª–µ—É–º –±—ã—Ç–æ–≤–æ–π –≥–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω—ã–π, —Ç–æ–ª—â–∏–Ω–∞ 2.5–º–º, —à–∏—Ä–∏–Ω–∞ 2–º",
                    "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π": "–õ–∏–Ω–æ–ª–µ—É–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –≥–æ–º–æ–≥–µ–Ω–Ω—ã–π, —Ç–æ–ª—â–∏–Ω–∞ 2–º–º, —à–∏—Ä–∏–Ω–∞ 2–º"
                }
            },
            
            # –õ–ê–ö–û–ö–†–ê–°–û–ß–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´
            "PNT": {
                "category": "–ö—Ä–∞—Å–∫–∏",
                "unit": "–∫–≥",
                "base_price": 200,
                "descriptions": {
                    "–≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è": "–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è –±–µ–ª–∞—è –º–∞—Ç–æ–≤–∞—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–±–æ—Ç",
                    "–º–∞—Å–ª—è–Ω–∞—è": "–ö—Ä–∞—Å–∫–∞ –º–∞—Å–ª—è–Ω–∞—è –±–µ–ª–∞—è –≥–ª—è–Ω—Ü–µ–≤–∞—è –¥–ª—è –Ω–∞—Ä—É–∂–Ω—ã—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–±–æ—Ç"
                }
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å SKU
        sku_prefix = sku[:3] if len(sku) >= 3 else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        rules = enrichment_rules.get(sku_prefix, {
            "category": "–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "unit": "—à—Ç",
            "base_price": 100,
            "descriptions": {}
        })
        
        category = rules["category"]
        unit = rules["unit"]
        base_price = rules["base_price"]
        
        # –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = name
        for key, desc in rules.get("descriptions", {}).items():
            if key.lower() in name.lower():
                description = desc
                break
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ
        if description == name:
            description = f"{name} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
        
        # –í–∞—Ä–∏–∞—Ü–∏—è —Ü–µ–Ω—ã (¬±20%)
        import random
        price_variation = random.uniform(0.8, 1.2)
        price = round(base_price * price_variation, 2)
        
        return category, description, unit, price

    async def add_quality_materials(self, json_file_path: str = None) -> Dict[str, int]:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        logger.info("üì¶ –î–æ–±–∞–≤–ª—è—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...")
        
        if json_file_path:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
            quality_materials = await self.load_materials_from_json(json_file_path)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (fallback)
            quality_materials = []
        
        stats = {
            "added": 0,
            "failed": 0
        }
        
        for material_data in quality_materials:
            try:
                result = await self.materials_service.create_material(material_data)
                if result.get("success"):
                    logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {material_data['name']}")
                    stats["added"] += 1
                else:
                    logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {material_data['name']}")
                    stats["failed"] += 1
                    
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {material_data['name']}: {e}")
                stats["failed"] += 1
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ {stats['added']}, –æ—à–∏–±–æ–∫ {stats['failed']}")
        return stats


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    print("üßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("=" * 60)
    print("–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞:")
    print("1. üóëÔ∏è  –£–¥–∞–ª–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("2. üì¶ –î–æ–±–∞–≤–∏—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    print("3. üéØ –£–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirm = input("‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    manager = DataCleanupManager()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        await manager.setup()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüßπ –≠–¢–ê–ü 1: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        cleanup_stats = await manager.cleanup_test_materials()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        print(f"\nüì¶ –≠–¢–ê–ü 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        json_file_path = "tests/data/building_materials.json"
        add_stats = await manager.add_quality_materials(json_file_path)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüéâ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"=" * 40)
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {cleanup_stats['deleted']}")
        print(f"üìã –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {cleanup_stats['kept']}")
        print(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {add_stats['added']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {add_stats['failed']}")
        
        total_materials = cleanup_stats['kept'] + add_stats['added']
        print(f"\nüìä –ò—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –±–∞–∑–µ: {total_materials}")
        
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞:")
        print(f"   python3 test_search_quality.py")
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 