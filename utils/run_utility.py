#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–∏–ª–∏—Ç –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–£–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
"""

import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç"""
    print("\n" + "=" * 60)
    print("üõ†Ô∏è  –ú–ï–ù–ï–î–ñ–ï–† –£–¢–ò–õ–ò–¢ RAG –°–ò–°–¢–ï–ú–´ –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("=" * 60)
    print()
    print("üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•:")
    print("  1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ JSON")
    print("  2. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print()
    print("üîÑ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–û–í:")
    print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    print("  4. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("  5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("  6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)")
    print()
    print("üëÅÔ∏è –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–•:")
    print("  7. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    print("  8. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    print("  9. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print(" 10. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∞–π—Å–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    print(" 11. –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ CSV —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏")
    print()
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    print(" 12. –¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print(" 13. –¢–µ—Å—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    print(" 14. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
    print()
    print("üóÑÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
    print(" 15. –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print()
    print("  0. –í—ã—Ö–æ–¥")
    print()

async def run_utility(choice: str):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Ç–∏–ª–∏—Ç—É"""
    
    try:
        if choice == "1":
            from .load_building_materials import load_materials
            await load_materials()
            
        elif choice == "2":
            from .create_test_data import create_materials
            await create_materials()
            
        elif choice == "3":
            from .material_matcher import main as run_matcher
            await run_matcher()
            
        elif choice == "4":
            from .material_summary import show_material_matches
            supplier_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ").strip()
            if supplier_id:
                await show_material_matches(supplier_id)
            else:
                print("‚ùå ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
                
        elif choice == "5":
            from .save_matches import save_matches
            await save_matches()
            
        elif choice == "6":
            from .save_simple_matches import save_simple_matches
            supplier_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ").strip()
            if supplier_id:
                await save_simple_matches(supplier_id)
            else:
                print("‚ùå ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
                
        elif choice == "7":
            exec(open(Path(__file__).parent / "show_material.py").read())
            
        elif choice == "8":
            from .check_loaded_materials import check_materials
            check_materials()
            
        elif choice == "9":
            from .view_collection import main as view_collections
            view_collections()
            
        elif choice == "10":
            from .show_supplier_prices import show_supplier_prices
            supplier_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ").strip()
            if supplier_id:
                show_supplier_prices(supplier_id)
            else:
                print("‚ùå ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            
        elif choice == "11":
            from utils.export_supplier_prices import export_supplier_prices_to_csv
            print("\nüìã –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            supplier_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ").strip()
            if not supplier_id:
                print("‚ùå ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
                return
                
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
            include_vectors = input("–í–∫–ª—é—á–∏—Ç—å –≤–µ–∫—Ç–æ—Ä—ã? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
            include_vectors = include_vectors != 'n'
            
            if include_vectors:
                print("–§–æ—Ä–º–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–æ–≤:")
                print("  json - –≤–µ–∫—Ç–æ—Ä—ã –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)")
                print("  columns - –∫–∞–∂–¥–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ (—à–∏—Ä–æ–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)")
                print("  compact - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤ (–Ω–æ—Ä–º–∞, —Å—Ä–µ–¥–Ω–µ–µ, –∏ —Ç.–¥.)")
                vector_format = input("–§–æ—Ä–º–∞—Ç –≤–µ–∫—Ç–æ—Ä–æ–≤ (json/columns/compact, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é json): ").strip().lower()
                if vector_format not in ['json', 'columns', 'compact']:
                    vector_format = 'json'
            else:
                vector_format = 'json'
                
            limit_str = input("–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (Enter - –≤—Å–µ): ").strip()
            limit = int(limit_str) if limit_str.isdigit() else None
            
            output_file = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (Enter - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π): ").strip()
            if not output_file:
                output_file = None
                
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            result = export_supplier_prices_to_csv(
                supplier_id=supplier_id,
                output_file=output_file,
                include_vectors=include_vectors,
                vector_format=vector_format,
                limit=limit
            )
            
            if not result:
                print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")
            
        elif choice == "12":
            from .test_russian_search import main as test_russian
            test_russian()
            
        elif choice == "13":
            from .test_all_services import main as test_services
            await test_services()
            
        elif choice == "14":
            from .check_db_connection import main as check_db
            check_db()
            
        elif choice == "15":
            from .cleanup_collections import main as cleanup
            cleanup()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    while True:
        show_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—É (0-15): ").strip()
        
        if choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        if choice in [str(i) for i in range(1, 16)]:
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã {choice}...")
            print("-" * 40)
            
            await run_utility(choice)
            
            print("\n" + "-" * 40)
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    asyncio.run(main()) 