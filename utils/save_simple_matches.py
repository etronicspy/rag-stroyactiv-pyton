#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
"""

import asyncio
from datetime import datetime

from .material_matcher import MaterialMatcher
from .common import qdrant_service
from .common_utils import generate_unique_id, truncate_text
from qdrant_client.models import PointStruct, Distance, VectorParams

async def save_simple_matches(supplier_id: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    print("üíæ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    print("üìã –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: –∏–º–µ–Ω–∞, –µ–¥–∏–Ω–∏—Ü—ã –∏ –∞—Ä—Ç–∏–∫—É–ª—ã")
    print("="*60)
    
    matcher = MaterialMatcher()
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print(f"üîç –í—ã–ø–æ–ª–Ω—è—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_id}")
    matches = await matcher.match_materials_with_vector_search(supplier_id, top_k=5)
    
    if not matches:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    simple_collection_name = "simple_material_matches"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≤–µ–∫—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏)
    qdrant_service.ensure_collection_exists(simple_collection_name, vector_size=1)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    simple_points = []
    
    for i, match in enumerate(matches):
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
        article_text = f"{match.price_item_name}_{match.reference_name}_{supplier_id}"
        article_code = generate_unique_id(article_text, "MT")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π payload —Å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        simple_payload = {
            "article_code": article_code,
            "price_material_name": match.price_item_name,
            "price_material_unit": match.price_item_unit,
            "reference_material_name": match.reference_name,
            "reference_material_unit": match.reference_unit,
            "match_score": round(float(match.combined_score), 3),
            "confidence": match.match_confidence,
            "supplier": supplier_id,
            "created_at": datetime.utcnow().isoformat()
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ)
        simple_vector = [0.5]
        
        point = PointStruct(
            id=article_code,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –∫–∞–∫ ID
            vector=simple_vector,
            payload=simple_payload
        )
        simple_points.append(point)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–∞—Ç—á–µ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º
        success = qdrant_service.upsert_points_batch(simple_collection_name, simple_points)
        
        if success:
            print(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(simple_points)} —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await view_simple_matches()
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def view_simple_matches():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    print(f"\nüëÄ –ü–†–û–°–ú–û–¢–† –£–ü–†–û–©–ï–ù–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô")
    print("="*80)
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        points = qdrant_service.get_points_with_payload("simple_material_matches", limit=100)
        
        if not points:
            print("üì≠ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(points)} —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        print()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–ê—Ä—Ç–∏–∫—É–ª':<12} {'–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø—Ä–∞–π—Å–∞':<25} {'–ï–¥.':<5} {'‚Üí':<2} {'–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª':<25} {'–ï–¥.':<5} {'–°–∫–æ—Ä':<6}")
        print("=" * 85)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–∫–æ—Ä—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_points = sorted(points, key=lambda p: p.payload.get('match_score', 0), reverse=True)
        
        for point in sorted_points:
            payload = point.payload
            
            # –û–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            price_name = truncate_text(payload.get('price_material_name', ''), 25)
            ref_name = truncate_text(payload.get('reference_material_name', ''), 25)
            
            print(f"{payload.get('article_code', ''):<12} "
                  f"{price_name:<25} "
                  f"{payload.get('price_material_unit', ''):<5} "
                  f"‚Üí "
                  f"{ref_name:<25} "
                  f"{payload.get('reference_material_unit', ''):<5} "
                  f"{payload.get('match_score', 0):<6.3f}")
        
        print("=" * 85)
        
        # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        high_count = len([p for p in points if p.payload.get('confidence') == 'high'])
        medium_count = len([p for p in points if p.payload.get('confidence') == 'medium'])
        low_count = len([p for p in points if p.payload.get('confidence') == 'low'])
        
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üü¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {high_count}")
        print(f"   üü° –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {medium_count}")
        print(f"   üî¥ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {low_count}")
        print(f"   üì¶ –í—Å–µ–≥–æ –ø–∞—Ä: {len(points)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        print(f"\nüè∑Ô∏è –ü–†–ò–ú–ï–†–´ –ê–†–¢–ò–ö–£–õ–û–í:")
        for i, point in enumerate(sorted_points[:3], 1):
            payload = point.payload
            print(f"   {i}. {payload.get('article_code')} - "
                  f"{payload.get('price_material_name')} ‚Üí "
                  f"{payload.get('reference_material_name')}")
        
        # –°–æ–∑–¥–∞—Ç—å CSV —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        csv_data = []
        csv_data.append("–ê—Ä—Ç–∏–∫—É–ª,–ú–∞—Ç–µ—Ä–∏–∞–ª_–∏–∑_–ø—Ä–∞–π—Å–∞,–ï–¥–∏–Ω–∏—Ü–∞_–ø—Ä–∞–π—Å,–≠—Ç–∞–ª–æ–Ω–Ω—ã–π_–º–∞—Ç–µ—Ä–∏–∞–ª,–ï–¥–∏–Ω–∏—Ü–∞_—ç—Ç–∞–ª–æ–Ω,–°–∫–æ—Ä,–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        
        for point in sorted_points:
            payload = point.payload
            csv_line = (f"{payload.get('article_code', '')},"
                       f"{payload.get('price_material_name', '')},"
                       f"{payload.get('price_material_unit', '')},"
                       f"{payload.get('reference_material_name', '')},"
                       f"{payload.get('reference_material_unit', '')},"
                       f"{payload.get('match_score', 0)},"
                       f"{payload.get('confidence', '')}")
            csv_data.append(csv_line)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV —Ñ–∞–π–ª
        csv_filename = f"simple_matches_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        with open(csv_filename, "w", encoding="utf-8") as f:
            f.write("\n".join(csv_data))
        
        print(f"\nüìÑ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    supplier_id = "–ü–æ—Å—Ç–∞–≤—â–∏–∫_–°—Ç—Ä–æ–π_–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
    await save_simple_matches(supplier_id)

if __name__ == "__main__":
    asyncio.run(main()) 