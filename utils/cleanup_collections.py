#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π Qdrant
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config import get_vector_db_client, settings
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def cleanup_materials_collection():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials"""
    try:
        client = get_vector_db_client()
        db_config = settings.get_vector_db_config()
        collection_name = db_config["collection_name"]
        
        logger.info(f"üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections = client.get_collections()
        if any(c.name == collection_name for c in collections.collections):
            # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é
            client.delete_collection(collection_name=collection_name)
            logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–¥–∞–ª–µ–Ω–∞")
        else:
            logger.info(f"‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials: {e}")
        return False
    return True

def cleanup_price_collections():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø—Ä–∞–π—Å–∞–º–∏"""
    try:
        client = get_vector_db_client()
        
        logger.info("üóëÔ∏è  –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø—Ä–∞–π—Å–∞–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections = client.get_collections()
        price_collections = [c.name for c in collections.collections if "supplier_" in c.name and "_prices" in c.name]
        
        if not price_collections:
            logger.info("‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –ø—Ä–∞–π—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø—Ä–∞–π—Å–∞–º–∏: {len(price_collections)}")
        for collection_name in price_collections:
            logger.info(f"  ‚Ä¢ {collection_name}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = input("\n‚ùì –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –ø—Ä–∞–π—Å–∞–º–∏? (y/N): ").strip().lower()
        if response not in ['y', 'yes', '–¥–∞']:
            logger.info("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
            
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        for collection_name in price_collections:
            try:
                client.delete_collection(collection_name=collection_name)
                logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {collection_name}: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø—Ä–∞–π—Å–∞–º–∏: {e}")
        return False
    return True

def cleanup_all_collections():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
    try:
        client = get_vector_db_client()
        
        logger.info("üóëÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections = client.get_collections()
        all_collections = [c.name for c in collections.collections]
        
        if not all_collections:
            logger.info("‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(all_collections)}")
        for collection_name in all_collections:
            logger.info(f"  ‚Ä¢ {collection_name}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = input("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –£–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–ª–ª–µ–∫—Ü–∏–∏? (y/N): ").strip().lower()
        if response not in ['y', 'yes', '–¥–∞']:
            logger.info("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
            
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        for collection_name in all_collections:
            try:
                client.delete_collection(collection_name=collection_name)
                logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {collection_name}: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")
        return False
    return True

def recreate_materials_collection():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        from qdrant_client.models import Distance, VectorParams
        
        client = get_vector_db_client()
        db_config = settings.get_vector_db_config()
        collection_name = db_config["collection_name"]
        
        logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        client.create_collection(
            collection_name=collection_name,
            vectors_config=VectorParams(
                size=db_config["vector_size"], 
                distance=Distance.COSINE
            ),
        )
        
        logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials: {e}")
        return False
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üßπ –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π Qdrant")
    logger.info("=" * 50)
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:")
    print("1. –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏—é materials")
    print("2. –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –ø—Ä–∞–π—Å–∞–º–∏") 
    print("3. –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print("4. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é materials")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: ").strip()
    
    if choice == "1":
        logger.info("\nüéØ –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials...")
        if cleanup_materials_collection():
            logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    elif choice == "2":
        logger.info("\nüéØ –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø—Ä–∞–π—Å–∞–º–∏...")
        if cleanup_price_collections():
            logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    elif choice == "3":
        logger.info("\nüéØ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
        if cleanup_all_collections():
            logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    elif choice == "4":
        logger.info("\nüéØ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ materials...")
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º
        if cleanup_materials_collection():
            # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
            if recreate_materials_collection():
                logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            
    elif choice == "0":
        logger.info("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    else:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 