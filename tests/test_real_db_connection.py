"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import pytest
import time
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct
import logging

logger = logging.getLogger(__name__)

class TestRealDBConnection:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    
    def test_qdrant_connection(self, qdrant_client):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant"""
        try:
            collections = qdrant_client.get_collections()
            logger.info(f"‚úÖ Connected to Qdrant. Collections count: {len(collections.collections)}")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
            for collection in collections.collections:
                logger.info(f"üìö Collection: {collection.name}")
            
            assert True, "Connection successful"
        except Exception as e:
            pytest.fail(f"Failed to connect to Qdrant: {e}")
    
    def test_create_test_collection(self, qdrant_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        test_collection_name = f"test_connection_{int(time.time())}"
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            qdrant_client.create_collection(
                collection_name=test_collection_name,
                vectors_config=VectorParams(size=384, distance=Distance.COSINE),
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞
            collections = qdrant_client.get_collections()
            collection_names = [c.name for c in collections.collections]
            
            assert test_collection_name in collection_names
            logger.info(f"‚úÖ Test collection '{test_collection_name}' created successfully")
            
        except Exception as e:
            pytest.fail(f"Failed to create test collection: {e}")
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            try:
                qdrant_client.delete_collection(test_collection_name)
                logger.info(f"üßπ Cleaned up test collection '{test_collection_name}'")
            except Exception as e:
                logger.warning(f"Failed to cleanup test collection: {e}")
    
    def test_insert_and_retrieve_data(self, qdrant_client):
        """–¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        test_collection_name = f"test_data_{int(time.time())}"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            qdrant_client.create_collection(
                collection_name=test_collection_name,
                vectors_config=VectorParams(size=384, distance=Distance.COSINE),
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_vector = [0.1] * 384  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
            test_payload = {
                "name": "Test Material",
                "category": "Test Category",
                "price": 100.0,
                "supplier": "TEST_SUPPLIER"
            }
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            qdrant_client.upsert(
                collection_name=test_collection_name,
                points=[
                    PointStruct(
                        id=1,
                        vector=test_vector,
                        payload=test_payload
                    )
                ]
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            retrieved = qdrant_client.retrieve(
                collection_name=test_collection_name,
                ids=[1]
            )
            
            assert len(retrieved) == 1
            assert retrieved[0].payload["name"] == "Test Material"
            assert retrieved[0].payload["supplier"] == "TEST_SUPPLIER"
            
            logger.info("‚úÖ Data insert and retrieve test passed")
            
        except Exception as e:
            pytest.fail(f"Failed to insert/retrieve data: {e}")
        
        finally:
            # –û—á–∏—â–∞–µ–º
            try:
                qdrant_client.delete_collection(test_collection_name)
                logger.info(f"üßπ Cleaned up test collection '{test_collection_name}'")
            except Exception as e:
                logger.warning(f"Failed to cleanup: {e}")
    
    def test_list_existing_collections(self, qdrant_client):
        """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        try:
            collections = qdrant_client.get_collections()
            
            logger.info(f"üìä Database contains {len(collections.collections)} collections:")
            for collection in collections.collections:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                try:
                    info = qdrant_client.get_collection(collection.name)
                    logger.info(f"  üìö {collection.name}: {info.points_count} points, vector size: {info.config.params.vectors.size}")
                except Exception as e:
                    logger.info(f"  üìö {collection.name}: (error getting details: {e})")
            
            assert True, "Collection listing successful"
            
        except Exception as e:
            pytest.fail(f"Failed to list collections: {e}") 