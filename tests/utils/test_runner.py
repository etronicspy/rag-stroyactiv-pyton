#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
"""

import sys
import subprocess
import argparse
from pathlib import Path
import os


def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö)"""
    print("üß™ –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/utils/",
        "-v", 
        "--tb=short",
        "-m", "not integration",
        "--color=yes"
    ]
    
    return subprocess.run(cmd, cwd=Path(__file__).parent.parent.parent)


def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç...")
    
    cmd = [
        sys.executable, "-m", "pytest", 
        "tests/utils/",
        "-v",
        "--tb=short", 
        "-m", "integration",
        "--color=yes"
    ]
    
    return subprocess.run(cmd, cwd=Path(__file__).parent.parent.parent)


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/utils/",
        "-v",
        "--tb=short",
        "--color=yes"
    ]
    
    return subprocess.run(cmd, cwd=Path(__file__).parent.parent.parent)


def run_specific_test(test_name):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
    
    cmd = [
        sys.executable, "-m", "pytest",
        f"tests/utils/{test_name}",
        "-v",
        "--tb=short", 
        "--color=yes"
    ]
    
    return subprocess.run(cmd, cwd=Path(__file__).parent.parent.parent)


def run_with_coverage():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""
    print("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/utils/",
        "--cov=utils",
        "--cov-report=html",
        "--cov-report=term-missing",
        "-v",
        "--color=yes"
    ]
    
    return subprocess.run(cmd, cwd=Path(__file__).parent.parent.parent)


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
    try:
        import pytest
        print(f"‚úÖ pytest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {pytest.__version__}")
    except ImportError:
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ coverage
    try:
        import coverage
        print(f"‚úÖ coverage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {coverage.__version__}")
    except ImportError:
        print("‚ö†Ô∏è  coverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = ['OPENAI_API_KEY', 'QDRANT_URL', 'QDRANT_API_KEY']
    for var in env_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {'*' * (len(value) - 4) + value[-4:]}")
        else:
            print(f"‚ö†Ô∏è  {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            print(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant
        try:
            response = requests.get("http://localhost:6333", timeout=2)
            print(f"‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception:
            print("‚ùå Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except ImportError:
        print("‚ö†Ô∏è  requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç")
    parser.add_argument(
        "mode",
        choices=["unit", "integration", "all", "coverage", "check"],
        help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"
    )
    parser.add_argument(
        "--test",
        help="–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: test_load_materials.py)"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if args.mode == "check":
        check_environment()
        return
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    if args.test:
        result = run_specific_test(args.test)
        sys.exit(result.returncode)
    
    # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–µ–∂–∏–º—É
    if args.mode == "unit":
        result = run_unit_tests()
    elif args.mode == "integration":
        result = run_integration_tests()
    elif args.mode == "all":
        result = run_all_tests()
    elif args.mode == "coverage":
        result = run_with_coverage()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {args.mode}")
        sys.exit(1)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.returncode == 0:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    sys.exit(result.returncode)


if __name__ == "__main__":
    main() 